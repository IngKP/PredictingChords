DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1147)
           2	LOAD_FAST(arg=0, lineno=1147)
           4	LOAD_CONST(arg=1, lineno=1147)
           6	BINARY_SUBSCR(arg=None, lineno=1147)
           8	STORE_FAST(arg=3, lineno=1147)
          10	LOAD_FAST(arg=1, lineno=1148)
          12	UNARY_NEGATIVE(arg=None, lineno=1148)
          14	LOAD_FAST(arg=3, lineno=1148)
          16	DUP_TOP(arg=None, lineno=1148)
          18	ROT_THREE(arg=None, lineno=1148)
          20	COMPARE_OP(arg=1, lineno=1148)
          22	POP_JUMP_IF_FALSE(arg=32, lineno=1148)
          24	LOAD_FAST(arg=1, lineno=1148)
          26	COMPARE_OP(arg=1, lineno=1148)
          28	POP_JUMP_IF_FALSE(arg=40, lineno=1148)
          30	JUMP_FORWARD(arg=4, lineno=1148)
>         32	POP_TOP(arg=None, lineno=1148)
          34	JUMP_FORWARD(arg=4, lineno=1148)
>         36	LOAD_CONST(arg=1, lineno=1149)
          38	STORE_FAST(arg=3, lineno=1149)
>         40	LOAD_FAST(arg=0, lineno=1151)
          42	LOAD_CONST(arg=2, lineno=1151)
          44	BINARY_SUBSCR(arg=None, lineno=1151)
          46	STORE_FAST(arg=4, lineno=1151)
          48	LOAD_FAST(arg=1, lineno=1152)
          50	UNARY_NEGATIVE(arg=None, lineno=1152)
          52	LOAD_FAST(arg=4, lineno=1152)
          54	DUP_TOP(arg=None, lineno=1152)
          56	ROT_THREE(arg=None, lineno=1152)
          58	COMPARE_OP(arg=1, lineno=1152)
          60	POP_JUMP_IF_FALSE(arg=70, lineno=1152)
          62	LOAD_FAST(arg=1, lineno=1152)
          64	COMPARE_OP(arg=1, lineno=1152)
          66	POP_JUMP_IF_FALSE(arg=78, lineno=1152)
          68	JUMP_FORWARD(arg=4, lineno=1152)
>         70	POP_TOP(arg=None, lineno=1152)
          72	JUMP_FORWARD(arg=4, lineno=1152)
>         74	LOAD_CONST(arg=1, lineno=1153)
          76	STORE_FAST(arg=4, lineno=1153)
>         78	LOAD_FAST(arg=2, lineno=1155)
          80	POP_JUMP_IF_FALSE(arg=102, lineno=1155)
          82	LOAD_GLOBAL(arg=0, lineno=1156)
          84	LOAD_METHOD(arg=1, lineno=1156)
          86	LOAD_FAST(arg=3, lineno=1156)
          88	CALL_METHOD(arg=1, lineno=1156)
          90	LOAD_GLOBAL(arg=0, lineno=1156)
          92	LOAD_METHOD(arg=1, lineno=1156)
          94	LOAD_FAST(arg=4, lineno=1156)
          96	CALL_METHOD(arg=1, lineno=1156)
          98	COMPARE_OP(arg=3, lineno=1156)
         100	RETURN_VALUE(arg=None, lineno=1156)
>        102	LOAD_GLOBAL(arg=0, lineno=1158)
         104	LOAD_METHOD(arg=2, lineno=1158)
         106	LOAD_FAST(arg=3, lineno=1158)
         108	CALL_METHOD(arg=1, lineno=1158)
         110	LOAD_GLOBAL(arg=0, lineno=1158)
         112	LOAD_METHOD(arg=2, lineno=1158)
         114	LOAD_FAST(arg=4, lineno=1158)
         116	CALL_METHOD(arg=1, lineno=1158)
         118	COMPARE_OP(arg=3, lineno=1158)
         120	RETURN_VALUE(arg=None, lineno=1158)
         122	LOAD_CONST(arg=3, lineno=1158)
         124	RETURN_VALUE(arg=None, lineno=1158)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1147)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1147)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1147)
DEBUG:numba.core.byteflow:stack ['$x2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1147)
DEBUG:numba.core.byteflow:stack ['$x2.0', '$const4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1147)
DEBUG:numba.core.byteflow:stack ['$6binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=1148)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=12, inst=UNARY_NEGATIVE(arg=None, lineno=1148)
DEBUG:numba.core.byteflow:stack ['$threshold10.3']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=1148)
DEBUG:numba.core.byteflow:stack ['$12unary_negative.4']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=DUP_TOP(arg=None, lineno=1148)
DEBUG:numba.core.byteflow:stack ['$12unary_negative.4', '$x014.5']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=ROT_THREE(arg=None, lineno=1148)
DEBUG:numba.core.byteflow:stack ['$12unary_negative.4', '$x014.5', '$16dup_top.6']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=COMPARE_OP(arg=1, lineno=1148)
DEBUG:numba.core.byteflow:stack ['$16dup_top.6', '$12unary_negative.4', '$x014.5']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=32, lineno=1148)
DEBUG:numba.core.byteflow:stack ['$16dup_top.6', '$20compare_op.7']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=24, stack=('$16dup_top.6',), blockstack=(), npush=0), Edge(pc=32, stack=('$16dup_top.6',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=24 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi24.0']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=1148)
DEBUG:numba.core.byteflow:stack ['$phi24.0']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=COMPARE_OP(arg=1, lineno=1148)
DEBUG:numba.core.byteflow:stack ['$phi24.0', '$threshold24.1']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=40, lineno=1148)
DEBUG:numba.core.byteflow:stack ['$26compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: ['$phi32.0']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=POP_TOP(arg=None, lineno=1148)
DEBUG:numba.core.byteflow:stack ['$phi32.0']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=JUMP_FORWARD(arg=4, lineno=1148)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=30, inst=JUMP_FORWARD(arg=4, lineno=1148)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=36, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=1151)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_CONST(arg=2, lineno=1151)
DEBUG:numba.core.byteflow:stack ['$x40.0']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=1151)
DEBUG:numba.core.byteflow:stack ['$x40.0', '$const42.1']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=STORE_FAST(arg=4, lineno=1151)
DEBUG:numba.core.byteflow:stack ['$44binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=1152)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=50, inst=UNARY_NEGATIVE(arg=None, lineno=1152)
DEBUG:numba.core.byteflow:stack ['$threshold48.3']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_FAST(arg=4, lineno=1152)
DEBUG:numba.core.byteflow:stack ['$50unary_negative.4']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=DUP_TOP(arg=None, lineno=1152)
DEBUG:numba.core.byteflow:stack ['$50unary_negative.4', '$x152.5']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=ROT_THREE(arg=None, lineno=1152)
DEBUG:numba.core.byteflow:stack ['$50unary_negative.4', '$x152.5', '$54dup_top.6']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=COMPARE_OP(arg=1, lineno=1152)
DEBUG:numba.core.byteflow:stack ['$54dup_top.6', '$50unary_negative.4', '$x152.5']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=POP_JUMP_IF_FALSE(arg=70, lineno=1152)
DEBUG:numba.core.byteflow:stack ['$54dup_top.6', '$58compare_op.7']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=62, stack=('$54dup_top.6',), blockstack=(), npush=0), Edge(pc=70, stack=('$54dup_top.6',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1149)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=38, inst=STORE_FAST(arg=3, lineno=1149)
DEBUG:numba.core.byteflow:stack ['$const36.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: ['$phi62.0']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=1152)
DEBUG:numba.core.byteflow:stack ['$phi62.0']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=COMPARE_OP(arg=1, lineno=1152)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$threshold62.1']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=78, lineno=1152)
DEBUG:numba.core.byteflow:stack ['$64compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=68, stack=(), blockstack=(), npush=0), Edge(pc=78, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: ['$phi70.0']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=POP_TOP(arg=None, lineno=1152)
DEBUG:numba.core.byteflow:stack ['$phi70.0']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=JUMP_FORWARD(arg=4, lineno=1152)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=68, inst=JUMP_FORWARD(arg=4, lineno=1152)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=78, inst=LOAD_FAST(arg=2, lineno=1155)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=80, inst=POP_JUMP_IF_FALSE(arg=102, lineno=1155)
DEBUG:numba.core.byteflow:stack ['$zero_pos78.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=82, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_CONST(arg=1, lineno=1153)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=76, inst=STORE_FAST(arg=4, lineno=1153)
DEBUG:numba.core.byteflow:stack ['$const74.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=82, inst=LOAD_GLOBAL(arg=0, lineno=1156)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=84, inst=LOAD_METHOD(arg=1, lineno=1156)
DEBUG:numba.core.byteflow:stack ['$82load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=86, inst=LOAD_FAST(arg=3, lineno=1156)
DEBUG:numba.core.byteflow:stack ['$84load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=88, inst=CALL_METHOD(arg=1, lineno=1156)
DEBUG:numba.core.byteflow:stack ['$84load_method.1', '$x086.2']
DEBUG:numba.core.byteflow:dispatch pc=90, inst=LOAD_GLOBAL(arg=0, lineno=1156)
DEBUG:numba.core.byteflow:stack ['$88call_method.3']
DEBUG:numba.core.byteflow:dispatch pc=92, inst=LOAD_METHOD(arg=1, lineno=1156)
DEBUG:numba.core.byteflow:stack ['$88call_method.3', '$90load_global.4']
DEBUG:numba.core.byteflow:dispatch pc=94, inst=LOAD_FAST(arg=4, lineno=1156)
DEBUG:numba.core.byteflow:stack ['$88call_method.3', '$92load_method.5']
DEBUG:numba.core.byteflow:dispatch pc=96, inst=CALL_METHOD(arg=1, lineno=1156)
DEBUG:numba.core.byteflow:stack ['$88call_method.3', '$92load_method.5', '$x194.6']
DEBUG:numba.core.byteflow:dispatch pc=98, inst=COMPARE_OP(arg=3, lineno=1156)
DEBUG:numba.core.byteflow:stack ['$88call_method.3', '$96call_method.7']
DEBUG:numba.core.byteflow:dispatch pc=100, inst=RETURN_VALUE(arg=None, lineno=1156)
DEBUG:numba.core.byteflow:stack ['$98compare_op.8']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=102, inst=LOAD_GLOBAL(arg=0, lineno=1158)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=104, inst=LOAD_METHOD(arg=2, lineno=1158)
DEBUG:numba.core.byteflow:stack ['$102load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=106, inst=LOAD_FAST(arg=3, lineno=1158)
DEBUG:numba.core.byteflow:stack ['$104load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=108, inst=CALL_METHOD(arg=1, lineno=1158)
DEBUG:numba.core.byteflow:stack ['$104load_method.1', '$x0106.2']
DEBUG:numba.core.byteflow:dispatch pc=110, inst=LOAD_GLOBAL(arg=0, lineno=1158)
DEBUG:numba.core.byteflow:stack ['$108call_method.3']
DEBUG:numba.core.byteflow:dispatch pc=112, inst=LOAD_METHOD(arg=2, lineno=1158)
DEBUG:numba.core.byteflow:stack ['$108call_method.3', '$110load_global.4']
DEBUG:numba.core.byteflow:dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=1158)
DEBUG:numba.core.byteflow:stack ['$108call_method.3', '$112load_method.5']
DEBUG:numba.core.byteflow:dispatch pc=116, inst=CALL_METHOD(arg=1, lineno=1158)
DEBUG:numba.core.byteflow:stack ['$108call_method.3', '$112load_method.5', '$x1114.6']
DEBUG:numba.core.byteflow:dispatch pc=118, inst=COMPARE_OP(arg=3, lineno=1158)
DEBUG:numba.core.byteflow:stack ['$108call_method.3', '$116call_method.7']
DEBUG:numba.core.byteflow:dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=1158)
DEBUG:numba.core.byteflow:stack ['$118compare_op.8']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=78 nstack_initial=0)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=1): {'$phi24.0'},
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=1): {'$phi62.0'},
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=1): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi24.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.0': State(pc_initial=40 nstack_initial=0),
 '$phi70.0': State(pc_initial=40 nstack_initial=0)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi24.0': {('$16dup_top.6', State(pc_initial=0 nstack_initial=0))},
 '$phi62.0': {('$54dup_top.6', State(pc_initial=40 nstack_initial=0))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi24.0': '$16dup_top.6'},
             State(pc_initial=40 nstack_initial=0): {'$phi62.0': '$54dup_top.6'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$threshold10.3'}), (12, {'value': '$threshold10.3', 'res': '$12unary_negative.4'}), (14, {'res': '$x014.5'}), (16, {'orig': ['$x014.5'], 'duped': ['$16dup_top.6']}), (20, {'lhs': '$12unary_negative.4', 'rhs': '$x014.5', 'res': '$20compare_op.7'}), (22, {'pred': '$20compare_op.7'})), outgoing_phis={'$phi24.0': '$16dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$16dup_top.6',), 32: ('$16dup_top.6',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=24 nstack_initial=1):
AdaptBlockInfo(insts=((24, {'res': '$threshold24.1'}), (26, {'lhs': '$phi24.0', 'rhs': '$threshold24.1', 'res': '$26compare_op.2'}), (28, {'pred': '$26compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 40: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((34, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$const36.0'}), (38, {'value': '$const36.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$x40.0'}), (42, {'res': '$const42.1'}), (44, {'index': '$const42.1', 'target': '$x40.0', 'res': '$44binary_subscr.2'}), (46, {'value': '$44binary_subscr.2'}), (48, {'res': '$threshold48.3'}), (50, {'value': '$threshold48.3', 'res': '$50unary_negative.4'}), (52, {'res': '$x152.5'}), (54, {'orig': ['$x152.5'], 'duped': ['$54dup_top.6']}), (58, {'lhs': '$50unary_negative.4', 'rhs': '$x152.5', 'res': '$58compare_op.7'}), (60, {'pred': '$58compare_op.7'})), outgoing_phis={'$phi62.0': '$54dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$54dup_top.6',), 70: ('$54dup_top.6',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=62 nstack_initial=1):
AdaptBlockInfo(insts=((62, {'res': '$threshold62.1'}), (64, {'lhs': '$phi62.0', 'rhs': '$threshold62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: (), 78: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=70 nstack_initial=1):
AdaptBlockInfo(insts=((72, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'value': '$const74.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$zero_pos78.0'}), (80, {'pred': '$zero_pos78.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: (), 102: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$82load_global.0'}), (84, {'item': '$82load_global.0', 'res': '$84load_method.1'}), (86, {'res': '$x086.2'}), (88, {'func': '$84load_method.1', 'args': ['$x086.2'], 'res': '$88call_method.3'}), (90, {'res': '$90load_global.4'}), (92, {'item': '$90load_global.4', 'res': '$92load_method.5'}), (94, {'res': '$x194.6'}), (96, {'func': '$92load_method.5', 'args': ['$x194.6'], 'res': '$96call_method.7'}), (98, {'lhs': '$88call_method.3', 'rhs': '$96call_method.7', 'res': '$98compare_op.8'}), (100, {'retval': '$98compare_op.8', 'castval': '$100return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$102load_global.0'}), (104, {'item': '$102load_global.0', 'res': '$104load_method.1'}), (106, {'res': '$x0106.2'}), (108, {'func': '$104load_method.1', 'args': ['$x0106.2'], 'res': '$108call_method.3'}), (110, {'res': '$110load_global.4'}), (112, {'item': '$110load_global.4', 'res': '$112load_method.5'}), (114, {'res': '$x1114.6'}), (116, {'func': '$112load_method.5', 'args': ['$x1114.6'], 'res': '$116call_method.7'}), (118, {'lhs': '$108call_method.3', 'rhs': '$116call_method.7', 'res': '$118compare_op.8'}), (120, {'retval': '$118compare_op.8', 'castval': '$120return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    $const4.1 = const(int, 0)                ['$const4.1']
    x0 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'x', 'x0']
    $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$12unary_negative.4', 'threshold']
    $20compare_op.7 = $12unary_negative.4 <= x0 ['$12unary_negative.4', '$20compare_op.7', 'x0']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1148),), kws=(), vararg=None, target=None) ['$20compare_op.7', '$22pred', 'bool22']
    $phi24.0 = x0                            ['$phi24.0', 'x0']
    branch $22pred, 24, 32                   ['$22pred']
label 24:
    $26compare_op.2 = $phi24.0 <= threshold  ['$26compare_op.2', '$phi24.0', 'threshold']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1148),), kws=(), vararg=None, target=None) ['$26compare_op.2', '$28pred', 'bool28']
    branch $28pred, 30, 40                   ['$28pred']
label 30:
    jump 36                                  []
label 32:
    jump 40                                  []
label 36:
    x0 = const(int, 0)                       ['x0']
    jump 40                                  []
label 40:
    $const42.1 = const(int, -1)              ['$const42.1']
    x1 = getitem(value=x, index=$const42.1, fn=<built-in function getitem>) ['$const42.1', 'x', 'x1']
    $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$50unary_negative.4', 'threshold']
    $58compare_op.7 = $50unary_negative.4 <= x1 ['$50unary_negative.4', '$58compare_op.7', 'x1']
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1152),), kws=(), vararg=None, target=None) ['$58compare_op.7', '$60pred', 'bool60']
    $phi62.0 = x1                            ['$phi62.0', 'x1']
    branch $60pred, 62, 70                   ['$60pred']
label 62:
    $64compare_op.2 = $phi62.0 <= threshold  ['$64compare_op.2', '$phi62.0', 'threshold']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1152),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 78                   ['$66pred']
label 68:
    jump 74                                  []
label 70:
    jump 78                                  []
label 74:
    x1 = const(int, 0)                       ['x1']
    jump 78                                  []
label 78:
    bool80 = global(bool: <class 'bool'>)    ['bool80']
    $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1147),), kws=(), vararg=None, target=None) ['$80pred', 'bool80', 'zero_pos']
    branch $80pred, 82, 102                  ['$80pred']
label 82:
    $82load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$82load_global.0']
    $84load_method.1 = getattr(value=$82load_global.0, attr=signbit) ['$82load_global.0', '$84load_method.1']
    $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, target=None) ['$84load_method.1', '$88call_method.3', 'x0']
    $90load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$90load_global.4']
    $92load_method.5 = getattr(value=$90load_global.4, attr=signbit) ['$90load_global.4', '$92load_method.5']
    $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1151)], kws=(), vararg=None, target=None) ['$92load_method.5', '$96call_method.7', 'x1']
    $98compare_op.8 = $88call_method.3 != $96call_method.7 ['$88call_method.3', '$96call_method.7', '$98compare_op.8']
    $100return_value.9 = cast(value=$98compare_op.8) ['$100return_value.9', '$98compare_op.8']
    return $100return_value.9                ['$100return_value.9']
label 102:
    $102load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$102load_global.0']
    $104load_method.1 = getattr(value=$102load_global.0, attr=sign) ['$102load_global.0', '$104load_method.1']
    $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1147)], kws=(), vararg=None, target=None) ['$104load_method.1', '$108call_method.3', 'x0']
    $110load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$110load_global.4']
    $112load_method.5 = getattr(value=$110load_global.4, attr=sign) ['$110load_global.4', '$112load_method.5']
    $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1151)], kws=(), vararg=None, target=None) ['$112load_method.5', '$116call_method.7', 'x1']
    $118compare_op.8 = $108call_method.3 != $116call_method.7 ['$108call_method.3', '$116call_method.7', '$118compare_op.8']
    $120return_value.9 = cast(value=$118compare_op.8) ['$118compare_op.8', '$120return_value.9']
    return $120return_value.9                ['$120return_value.9']

DEBUG:parso.python.diff:diff parser start
DEBUG:parso.python.diff:line_lengths old: 7; new: 9
DEBUG:parso.python.diff:-> code[equal] old[1:3] new[1:3]
DEBUG:parso.python.diff:copy old[1:2] new[1:2]
DEBUG:parso.python.diff:parse_part from 3 to 9 (to 8 in part parser)
DEBUG:parso.python.diff:-> code[insert] old[4:3] new[4:4]
DEBUG:parso.python.diff:-> code[equal] old[4:5] new[5:6]
DEBUG:parso.python.diff:-> code[replace] old[6:7] new[7:9]
DEBUG:parso.python.diff:diff parser end
DEBUG:parso.cache:pickle loaded: C:\Users\Kittipat\anaconda3\lib\typing.py
DEBUG:parso.cache:pickle loaded: C:\Users\Kittipat\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\typing.pyi
DEBUG:parso.python.diff:diff parser start
DEBUG:parso.python.diff:line_lengths old: 9; new: 10
DEBUG:parso.python.diff:-> code[equal] old[1:8] new[1:8]
DEBUG:parso.python.diff:copy old[1:2] new[1:2]
DEBUG:parso.python.diff:parse_part from 3 to 10 (to 9 in part parser)
DEBUG:parso.python.diff:-> code[replace] old[9:9] new[9:10]
DEBUG:parso.python.diff:diff parser end
DEBUG:parso.python.diff:diff parser start
DEBUG:parso.python.diff:line_lengths old: 10; new: 10
DEBUG:parso.python.diff:-> code[equal] old[1:9] new[1:9]
DEBUG:parso.python.diff:copy old[1:2] new[1:2]
DEBUG:parso.python.diff:parse_part from 3 to 10 (to 9 in part parser)
DEBUG:parso.python.diff:-> code[replace] old[10:10] new[10:10]
DEBUG:parso.python.diff:diff parser end
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1054)
           2	LOAD_FAST(arg=0, lineno=1054)
           4	LOAD_CONST(arg=1, lineno=1054)
           6	BINARY_SUBSCR(arg=None, lineno=1054)
           8	LOAD_FAST(arg=0, lineno=1054)
          10	LOAD_CONST(arg=2, lineno=1054)
          12	BINARY_SUBSCR(arg=None, lineno=1054)
          14	COMPARE_OP(arg=4, lineno=1054)
          16	LOAD_FAST(arg=0, lineno=1054)
          18	LOAD_CONST(arg=1, lineno=1054)
          20	BINARY_SUBSCR(arg=None, lineno=1054)
          22	LOAD_FAST(arg=0, lineno=1054)
          24	LOAD_CONST(arg=3, lineno=1054)
          26	BINARY_SUBSCR(arg=None, lineno=1054)
          28	COMPARE_OP(arg=5, lineno=1054)
          30	BINARY_AND(arg=None, lineno=1054)
          32	RETURN_VALUE(arg=None, lineno=1054)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1054)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1054)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1054)
DEBUG:numba.core.byteflow:stack ['$x2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1054)
DEBUG:numba.core.byteflow:stack ['$x2.0', '$const4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1054)
DEBUG:numba.core.byteflow:stack ['$6binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1054)
DEBUG:numba.core.byteflow:stack ['$6binary_subscr.2', '$x8.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1054)
DEBUG:numba.core.byteflow:stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=COMPARE_OP(arg=4, lineno=1054)
DEBUG:numba.core.byteflow:stack ['$6binary_subscr.2', '$12binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1054)
DEBUG:numba.core.byteflow:stack ['$14compare_op.6']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1054)
DEBUG:numba.core.byteflow:stack ['$14compare_op.6', '$x16.7']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1054)
DEBUG:numba.core.byteflow:stack ['$14compare_op.6', '$x16.7', '$const18.8']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1054)
DEBUG:numba.core.byteflow:stack ['$14compare_op.6', '$20binary_subscr.9']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1054)
DEBUG:numba.core.byteflow:stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1054)
DEBUG:numba.core.byteflow:stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=COMPARE_OP(arg=5, lineno=1054)
DEBUG:numba.core.byteflow:stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1054)
DEBUG:numba.core.byteflow:stack ['$14compare_op.6', '$28compare_op.13']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1054)
DEBUG:numba.core.byteflow:stack ['$30binary_and.14']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1060)
           2	LOAD_FAST(arg=0, lineno=1060)
           4	LOAD_CONST(arg=1, lineno=1060)
           6	BINARY_SUBSCR(arg=None, lineno=1060)
           8	LOAD_FAST(arg=0, lineno=1060)
          10	LOAD_CONST(arg=2, lineno=1060)
          12	BINARY_SUBSCR(arg=None, lineno=1060)
          14	COMPARE_OP(arg=0, lineno=1060)
          16	LOAD_FAST(arg=0, lineno=1060)
          18	LOAD_CONST(arg=1, lineno=1060)
          20	BINARY_SUBSCR(arg=None, lineno=1060)
          22	LOAD_FAST(arg=0, lineno=1060)
          24	LOAD_CONST(arg=3, lineno=1060)
          26	BINARY_SUBSCR(arg=None, lineno=1060)
          28	COMPARE_OP(arg=1, lineno=1060)
          30	BINARY_AND(arg=None, lineno=1060)
          32	RETURN_VALUE(arg=None, lineno=1060)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1060)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1060)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1060)
DEBUG:numba.core.byteflow:stack ['$x2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1060)
DEBUG:numba.core.byteflow:stack ['$x2.0', '$const4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1060)
DEBUG:numba.core.byteflow:stack ['$6binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1060)
DEBUG:numba.core.byteflow:stack ['$6binary_subscr.2', '$x8.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1060)
DEBUG:numba.core.byteflow:stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=COMPARE_OP(arg=0, lineno=1060)
DEBUG:numba.core.byteflow:stack ['$6binary_subscr.2', '$12binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1060)
DEBUG:numba.core.byteflow:stack ['$14compare_op.6']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1060)
DEBUG:numba.core.byteflow:stack ['$14compare_op.6', '$x16.7']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1060)
DEBUG:numba.core.byteflow:stack ['$14compare_op.6', '$x16.7', '$const18.8']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1060)
DEBUG:numba.core.byteflow:stack ['$14compare_op.6', '$20binary_subscr.9']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1060)
DEBUG:numba.core.byteflow:stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1060)
DEBUG:numba.core.byteflow:stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=COMPARE_OP(arg=1, lineno=1060)
DEBUG:numba.core.byteflow:stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1060)
DEBUG:numba.core.byteflow:stack ['$14compare_op.6', '$28compare_op.13']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1060)
DEBUG:numba.core.byteflow:stack ['$30binary_and.14']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=434)
           2	LOAD_FAST(arg=0, lineno=434)
           4	LOAD_CONST(arg=1, lineno=434)
           6	BINARY_SUBSCR(arg=None, lineno=434)
           8	LOAD_FAST(arg=0, lineno=434)
          10	LOAD_CONST(arg=2, lineno=434)
          12	BINARY_SUBSCR(arg=None, lineno=434)
          14	BINARY_ADD(arg=None, lineno=434)
          16	LOAD_CONST(arg=3, lineno=434)
          18	LOAD_FAST(arg=0, lineno=434)
          20	LOAD_CONST(arg=4, lineno=434)
          22	BINARY_SUBSCR(arg=None, lineno=434)
          24	BINARY_MULTIPLY(arg=None, lineno=434)
          26	BINARY_SUBTRACT(arg=None, lineno=434)
          28	STORE_FAST(arg=1, lineno=434)
          30	LOAD_FAST(arg=0, lineno=435)
          32	LOAD_CONST(arg=1, lineno=435)
          34	BINARY_SUBSCR(arg=None, lineno=435)
          36	LOAD_FAST(arg=0, lineno=435)
          38	LOAD_CONST(arg=2, lineno=435)
          40	BINARY_SUBSCR(arg=None, lineno=435)
          42	BINARY_SUBTRACT(arg=None, lineno=435)
          44	LOAD_CONST(arg=3, lineno=435)
          46	BINARY_TRUE_DIVIDE(arg=None, lineno=435)
          48	STORE_FAST(arg=2, lineno=435)
          50	LOAD_GLOBAL(arg=0, lineno=437)
          52	LOAD_METHOD(arg=1, lineno=437)
          54	LOAD_FAST(arg=2, lineno=437)
          56	CALL_METHOD(arg=1, lineno=437)
          58	LOAD_GLOBAL(arg=0, lineno=437)
          60	LOAD_METHOD(arg=1, lineno=437)
          62	LOAD_FAST(arg=1, lineno=437)
          64	CALL_METHOD(arg=1, lineno=437)
          66	COMPARE_OP(arg=5, lineno=437)
          68	POP_JUMP_IF_FALSE(arg=74, lineno=437)
          70	LOAD_CONST(arg=4, lineno=440)
          72	RETURN_VALUE(arg=None, lineno=440)
>         74	LOAD_FAST(arg=2, lineno=442)
          76	UNARY_NEGATIVE(arg=None, lineno=442)
          78	LOAD_FAST(arg=1, lineno=442)
          80	BINARY_TRUE_DIVIDE(arg=None, lineno=442)
          82	RETURN_VALUE(arg=None, lineno=442)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=434)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=434)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=434)
DEBUG:numba.core.byteflow:stack ['$x2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=434)
DEBUG:numba.core.byteflow:stack ['$x2.0', '$const4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=434)
DEBUG:numba.core.byteflow:stack ['$6binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=434)
DEBUG:numba.core.byteflow:stack ['$6binary_subscr.2', '$x8.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=434)
DEBUG:numba.core.byteflow:stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=BINARY_ADD(arg=None, lineno=434)
DEBUG:numba.core.byteflow:stack ['$6binary_subscr.2', '$12binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_CONST(arg=3, lineno=434)
DEBUG:numba.core.byteflow:stack ['$14binary_add.6']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=434)
DEBUG:numba.core.byteflow:stack ['$14binary_add.6', '$const16.7']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_CONST(arg=4, lineno=434)
DEBUG:numba.core.byteflow:stack ['$14binary_add.6', '$const16.7', '$x18.8']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=434)
DEBUG:numba.core.byteflow:stack ['$14binary_add.6', '$const16.7', '$x18.8', '$const20.9']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=BINARY_MULTIPLY(arg=None, lineno=434)
DEBUG:numba.core.byteflow:stack ['$14binary_add.6', '$const16.7', '$22binary_subscr.10']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=434)
DEBUG:numba.core.byteflow:stack ['$14binary_add.6', '$24binary_multiply.11']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=STORE_FAST(arg=1, lineno=434)
DEBUG:numba.core.byteflow:stack ['$26binary_subtract.12']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=435)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_CONST(arg=1, lineno=435)
DEBUG:numba.core.byteflow:stack ['$x30.13']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=435)
DEBUG:numba.core.byteflow:stack ['$x30.13', '$const32.14']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=435)
DEBUG:numba.core.byteflow:stack ['$34binary_subscr.15']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=435)
DEBUG:numba.core.byteflow:stack ['$34binary_subscr.15', '$x36.16']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=435)
DEBUG:numba.core.byteflow:stack ['$34binary_subscr.15', '$x36.16', '$const38.17']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=BINARY_SUBTRACT(arg=None, lineno=435)
DEBUG:numba.core.byteflow:stack ['$34binary_subscr.15', '$40binary_subscr.18']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_CONST(arg=3, lineno=435)
DEBUG:numba.core.byteflow:stack ['$42binary_subtract.19']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=435)
DEBUG:numba.core.byteflow:stack ['$42binary_subtract.19', '$const44.20']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=STORE_FAST(arg=2, lineno=435)
DEBUG:numba.core.byteflow:stack ['$46binary_true_divide.21']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_GLOBAL(arg=0, lineno=437)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_METHOD(arg=1, lineno=437)
DEBUG:numba.core.byteflow:stack ['$50load_global.22']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_FAST(arg=2, lineno=437)
DEBUG:numba.core.byteflow:stack ['$52load_method.23']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=CALL_METHOD(arg=1, lineno=437)
DEBUG:numba.core.byteflow:stack ['$52load_method.23', '$b54.24']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_GLOBAL(arg=0, lineno=437)
DEBUG:numba.core.byteflow:stack ['$56call_method.25']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_METHOD(arg=1, lineno=437)
DEBUG:numba.core.byteflow:stack ['$56call_method.25', '$58load_global.26']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=437)
DEBUG:numba.core.byteflow:stack ['$56call_method.25', '$60load_method.27']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=CALL_METHOD(arg=1, lineno=437)
DEBUG:numba.core.byteflow:stack ['$56call_method.25', '$60load_method.27', '$a62.28']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=COMPARE_OP(arg=5, lineno=437)
DEBUG:numba.core.byteflow:stack ['$56call_method.25', '$64call_method.29']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=74, lineno=437)
DEBUG:numba.core.byteflow:stack ['$66compare_op.30']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=74, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=440)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=72, inst=RETURN_VALUE(arg=None, lineno=440)
DEBUG:numba.core.byteflow:stack ['$const70.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=74 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_FAST(arg=2, lineno=442)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=76, inst=UNARY_NEGATIVE(arg=None, lineno=442)
DEBUG:numba.core.byteflow:stack ['$b74.0']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=LOAD_FAST(arg=1, lineno=442)
DEBUG:numba.core.byteflow:stack ['$76unary_negative.1']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=442)
DEBUG:numba.core.byteflow:stack ['$76unary_negative.1', '$a78.2']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=442)
DEBUG:numba.core.byteflow:stack ['$80binary_true_divide.3']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14binary_add.6'}), (16, {'res': '$const16.7'}), (18, {'res': '$x18.8'}), (20, {'res': '$const20.9'}), (22, {'index': '$const20.9', 'target': '$x18.8', 'res': '$22binary_subscr.10'}), (24, {'lhs': '$const16.7', 'rhs': '$22binary_subscr.10', 'res': '$24binary_multiply.11'}), (26, {'lhs': '$14binary_add.6', 'rhs': '$24binary_multiply.11', 'res': '$26binary_subtract.12'}), (28, {'value': '$26binary_subtract.12'}), (30, {'res': '$x30.13'}), (32, {'res': '$const32.14'}), (34, {'index': '$const32.14', 'target': '$x30.13', 'res': '$34binary_subscr.15'}), (36, {'res': '$x36.16'}), (38, {'res': '$const38.17'}), (40, {'index': '$const38.17', 'target': '$x36.16', 'res': '$40binary_subscr.18'}), (42, {'lhs': '$34binary_subscr.15', 'rhs': '$40binary_subscr.18', 'res': '$42binary_subtract.19'}), (44, {'res': '$const44.20'}), (46, {'lhs': '$42binary_subtract.19', 'rhs': '$const44.20', 'res': '$46binary_true_divide.21'}), (48, {'value': '$46binary_true_divide.21'}), (50, {'res': '$50load_global.22'}), (52, {'item': '$50load_global.22', 'res': '$52load_method.23'}), (54, {'res': '$b54.24'}), (56, {'func': '$52load_method.23', 'args': ['$b54.24'], 'res': '$56call_method.25'}), (58, {'res': '$58load_global.26'}), (60, {'item': '$58load_global.26', 'res': '$60load_method.27'}), (62, {'res': '$a62.28'}), (64, {'func': '$60load_method.27', 'args': ['$a62.28'], 'res': '$64call_method.29'}), (66, {'lhs': '$56call_method.25', 'rhs': '$64call_method.29', 'res': '$66compare_op.30'}), (68, {'pred': '$66compare_op.30'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 74: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$const70.0'}), (72, {'retval': '$const70.0', 'castval': '$72return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$b74.0'}), (76, {'value': '$b74.0', 'res': '$76unary_negative.1'}), (78, {'res': '$a78.2'}), (80, {'lhs': '$76unary_negative.1', 'rhs': '$a78.2', 'res': '$80binary_true_divide.3'}), (82, {'retval': '$80binary_true_divide.3', 'castval': '$82return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14binary_add.6 = $6binary_subscr.2 + $12binary_subscr.5 ['$12binary_subscr.5', '$14binary_add.6', '$6binary_subscr.2']
    $const16.7 = const(int, 2)               ['$const16.7']
    $const20.9 = const(int, 0)               ['$const20.9']
    $22binary_subscr.10 = getitem(value=x, index=$const20.9, fn=<built-in function getitem>) ['$22binary_subscr.10', '$const20.9', 'x']
    $24binary_multiply.11 = $const16.7 * $22binary_subscr.10 ['$22binary_subscr.10', '$24binary_multiply.11', '$const16.7']
    a = $14binary_add.6 - $24binary_multiply.11 ['$14binary_add.6', '$24binary_multiply.11', 'a']
    $const32.14 = const(int, 1)              ['$const32.14']
    $34binary_subscr.15 = getitem(value=x, index=$const32.14, fn=<built-in function getitem>) ['$34binary_subscr.15', '$const32.14', 'x']
    $const38.17 = const(int, -1)             ['$const38.17']
    $40binary_subscr.18 = getitem(value=x, index=$const38.17, fn=<built-in function getitem>) ['$40binary_subscr.18', '$const38.17', 'x']
    $42binary_subtract.19 = $34binary_subscr.15 - $40binary_subscr.18 ['$34binary_subscr.15', '$40binary_subscr.18', '$42binary_subtract.19']
    $const44.20 = const(int, 2)              ['$const44.20']
    b = $42binary_subtract.19 / $const44.20  ['$42binary_subtract.19', '$const44.20', 'b']
    $50load_global.22 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$50load_global.22']
    $52load_method.23 = getattr(value=$50load_global.22, attr=abs) ['$50load_global.22', '$52load_method.23']
    $56call_method.25 = call $52load_method.23(b, func=$52load_method.23, args=[Var(b, pitch.py:435)], kws=(), vararg=None, target=None) ['$52load_method.23', '$56call_method.25', 'b']
    $58load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$58load_global.26']
    $60load_method.27 = getattr(value=$58load_global.26, attr=abs) ['$58load_global.26', '$60load_method.27']
    $64call_method.29 = call $60load_method.27(a, func=$60load_method.27, args=[Var(a, pitch.py:434)], kws=(), vararg=None, target=None) ['$60load_method.27', '$64call_method.29', 'a']
    $66compare_op.30 = $56call_method.25 >= $64call_method.29 ['$56call_method.25', '$64call_method.29', '$66compare_op.30']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.30, func=bool68, args=(Var($66compare_op.30, pitch.py:437),), kws=(), vararg=None, target=None) ['$66compare_op.30', '$68pred', 'bool68']
    branch $68pred, 70, 74                   ['$68pred']
label 70:
    $const70.0 = const(int, 0)               ['$const70.0']
    $72return_value.1 = cast(value=$const70.0) ['$72return_value.1', '$const70.0']
    return $72return_value.1                 ['$72return_value.1']
label 74:
    $76unary_negative.1 = unary(fn=<built-in function neg>, value=b) ['$76unary_negative.1', 'b']
    $80binary_true_divide.3 = $76unary_negative.1 / a ['$76unary_negative.1', '$80binary_true_divide.3', 'a']
    $82return_value.4 = cast(value=$80binary_true_divide.3) ['$80binary_true_divide.3', '$82return_value.4']
    return $82return_value.4                 ['$82return_value.4']

DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=47)
           2	LOAD_FAST(arg=1, lineno=47)
           4	LOAD_CONST(arg=1, lineno=47)
           6	CONTAINS_OP(arg=0, lineno=47)
           8	POP_JUMP_IF_TRUE(arg=14, lineno=47)
          10	LOAD_ASSERTION_ERROR(arg=None, lineno=47)
          12	RAISE_VARARGS(arg=1, lineno=47)
>         14	LOAD_FAST(arg=0, lineno=49)
          16	LOAD_ATTR(arg=0, lineno=49)
          18	UNPACK_SEQUENCE(arg=2, lineno=49)
          20	STORE_FAST(arg=4, lineno=49)
          22	STORE_FAST(arg=5, lineno=49)
          24	LOAD_GLOBAL(arg=1, lineno=50)
          26	LOAD_METHOD(arg=2, lineno=50)
          28	LOAD_FAST(arg=4, lineno=50)
          30	LOAD_FAST(arg=5, lineno=50)
          32	BUILD_TUPLE(arg=2, lineno=50)
          34	CALL_METHOD(arg=1, lineno=50)
          36	STORE_FAST(arg=6, lineno=50)
          38	LOAD_FAST(arg=1, lineno=52)
          40	LOAD_CONST(arg=2, lineno=52)
          42	COMPARE_OP(arg=2, lineno=52)
          44	POP_JUMP_IF_FALSE(arg=174, lineno=52)
          46	LOAD_FAST(arg=3, lineno=53)
          48	LOAD_CONST(arg=3, lineno=53)
          50	IS_OP(arg=0, lineno=53)
          52	POP_JUMP_IF_FALSE(arg=74, lineno=53)
          54	LOAD_GLOBAL(arg=1, lineno=54)
          56	LOAD_ATTR(arg=3, lineno=54)
          58	LOAD_FAST(arg=4, lineno=54)
          60	LOAD_GLOBAL(arg=1, lineno=54)
          62	LOAD_ATTR(arg=4, lineno=54)
          64	LOAD_CONST(arg=4, lineno=54)
          66	CALL_FUNCTION_KW(arg=2, lineno=54)
          68	LOAD_FAST(arg=4, lineno=54)
          70	BINARY_TRUE_DIVIDE(arg=None, lineno=54)
          72	STORE_FAST(arg=3, lineno=54)
>         74	LOAD_GLOBAL(arg=5, lineno=55)
          76	LOAD_FAST(arg=5, lineno=55)
          78	CALL_FUNCTION(arg=1, lineno=55)
          80	GET_ITER(arg=None, lineno=55)
>         82	FOR_ITER(arg=90, lineno=55)
          84	STORE_FAST(arg=7, lineno=55)
          86	LOAD_GLOBAL(arg=1, lineno=56)
          88	LOAD_METHOD(arg=6, lineno=56)
          90	LOAD_GLOBAL(arg=1, lineno=56)
          92	LOAD_METHOD(arg=7, lineno=56)
          94	LOAD_FAST(arg=0, lineno=56)
          96	LOAD_CONST(arg=3, lineno=56)
          98	LOAD_CONST(arg=3, lineno=56)
         100	BUILD_SLICE(arg=2, lineno=56)
         102	LOAD_FAST(arg=7, lineno=56)
         104	BUILD_TUPLE(arg=2, lineno=56)
         106	BINARY_SUBSCR(arg=None, lineno=56)
         108	CALL_METHOD(arg=1, lineno=56)
         110	CALL_METHOD(arg=1, lineno=56)
         112	STORE_FAST(arg=8, lineno=56)
         114	LOAD_FAST(arg=8, lineno=57)
         116	LOAD_FAST(arg=2, lineno=57)
         118	COMPARE_OP(arg=4, lineno=57)
         120	POP_JUMP_IF_FALSE(arg=156, lineno=57)
         122	LOAD_FAST(arg=0, lineno=58)
         124	LOAD_CONST(arg=3, lineno=58)
         126	LOAD_CONST(arg=3, lineno=58)
         128	BUILD_SLICE(arg=2, lineno=58)
         130	LOAD_FAST(arg=7, lineno=58)
         132	BUILD_TUPLE(arg=2, lineno=58)
         134	BINARY_SUBSCR(arg=None, lineno=58)
         136	LOAD_FAST(arg=8, lineno=58)
         138	BINARY_TRUE_DIVIDE(arg=None, lineno=58)
         140	LOAD_FAST(arg=6, lineno=58)
         142	LOAD_CONST(arg=3, lineno=58)
         144	LOAD_CONST(arg=3, lineno=58)
         146	BUILD_SLICE(arg=2, lineno=58)
         148	LOAD_FAST(arg=7, lineno=58)
         150	BUILD_TUPLE(arg=2, lineno=58)
         152	STORE_SUBSCR(arg=None, lineno=58)
         154	JUMP_ABSOLUTE(arg=82, lineno=58)
>        156	LOAD_FAST(arg=3, lineno=60)
         158	LOAD_FAST(arg=6, lineno=60)
         160	LOAD_CONST(arg=3, lineno=60)
         162	LOAD_CONST(arg=3, lineno=60)
         164	BUILD_SLICE(arg=2, lineno=60)
         166	LOAD_FAST(arg=7, lineno=60)
         168	BUILD_TUPLE(arg=2, lineno=60)
         170	STORE_SUBSCR(arg=None, lineno=60)
         172	JUMP_ABSOLUTE(arg=82, lineno=60)
>        174	LOAD_FAST(arg=1, lineno=62)
         176	LOAD_CONST(arg=5, lineno=62)
         178	COMPARE_OP(arg=2, lineno=62)
         180	POP_JUMP_IF_FALSE(arg=324, lineno=62)
         184	LOAD_FAST(arg=3, lineno=63)
         186	LOAD_CONST(arg=3, lineno=63)
         188	IS_OP(arg=0, lineno=63)
         190	POP_JUMP_IF_FALSE(arg=218, lineno=63)
         192	LOAD_GLOBAL(arg=1, lineno=64)
         194	LOAD_ATTR(arg=3, lineno=64)
         196	LOAD_FAST(arg=4, lineno=64)
         198	LOAD_GLOBAL(arg=1, lineno=64)
         200	LOAD_ATTR(arg=4, lineno=64)
         202	LOAD_CONST(arg=4, lineno=64)
         204	CALL_FUNCTION_KW(arg=2, lineno=64)
         206	LOAD_GLOBAL(arg=1, lineno=64)
         208	LOAD_METHOD(arg=8, lineno=64)
         210	LOAD_FAST(arg=4, lineno=64)
         212	CALL_METHOD(arg=1, lineno=64)
         214	BINARY_TRUE_DIVIDE(arg=None, lineno=64)
         216	STORE_FAST(arg=3, lineno=64)
>        218	LOAD_GLOBAL(arg=5, lineno=65)
         220	LOAD_FAST(arg=5, lineno=65)
         222	CALL_FUNCTION(arg=1, lineno=65)
         224	GET_ITER(arg=None, lineno=65)
>        226	FOR_ITER(arg=96, lineno=65)
         228	STORE_FAST(arg=7, lineno=65)
         230	LOAD_GLOBAL(arg=1, lineno=66)
         232	LOAD_METHOD(arg=8, lineno=66)
         234	LOAD_GLOBAL(arg=1, lineno=66)
         236	LOAD_METHOD(arg=6, lineno=66)
         238	LOAD_FAST(arg=0, lineno=66)
         240	LOAD_CONST(arg=3, lineno=66)
         242	LOAD_CONST(arg=3, lineno=66)
         244	BUILD_SLICE(arg=2, lineno=66)
         246	LOAD_FAST(arg=7, lineno=66)
         248	BUILD_TUPLE(arg=2, lineno=66)
         250	BINARY_SUBSCR(arg=None, lineno=66)
         252	LOAD_CONST(arg=6, lineno=66)
         254	BINARY_POWER(arg=None, lineno=66)
         256	CALL_METHOD(arg=1, lineno=66)
         258	CALL_METHOD(arg=1, lineno=66)
         260	STORE_FAST(arg=8, lineno=66)
         262	LOAD_FAST(arg=8, lineno=67)
         264	LOAD_FAST(arg=2, lineno=67)
         266	COMPARE_OP(arg=4, lineno=67)
         268	POP_JUMP_IF_FALSE(arg=306, lineno=67)
         272	LOAD_FAST(arg=0, lineno=68)
         274	LOAD_CONST(arg=3, lineno=68)
         276	LOAD_CONST(arg=3, lineno=68)
         278	BUILD_SLICE(arg=2, lineno=68)
         280	LOAD_FAST(arg=7, lineno=68)
         282	BUILD_TUPLE(arg=2, lineno=68)
         284	BINARY_SUBSCR(arg=None, lineno=68)
         286	LOAD_FAST(arg=8, lineno=68)
         288	BINARY_TRUE_DIVIDE(arg=None, lineno=68)
         290	LOAD_FAST(arg=6, lineno=68)
         292	LOAD_CONST(arg=3, lineno=68)
         294	LOAD_CONST(arg=3, lineno=68)
         296	BUILD_SLICE(arg=2, lineno=68)
         298	LOAD_FAST(arg=7, lineno=68)
         300	BUILD_TUPLE(arg=2, lineno=68)
         302	STORE_SUBSCR(arg=None, lineno=68)
         304	JUMP_ABSOLUTE(arg=226, lineno=68)
>        306	LOAD_FAST(arg=3, lineno=70)
         308	LOAD_FAST(arg=6, lineno=70)
         310	LOAD_CONST(arg=3, lineno=70)
         312	LOAD_CONST(arg=3, lineno=70)
         314	BUILD_SLICE(arg=2, lineno=70)
         316	LOAD_FAST(arg=7, lineno=70)
         318	BUILD_TUPLE(arg=2, lineno=70)
         320	STORE_SUBSCR(arg=None, lineno=70)
         322	JUMP_ABSOLUTE(arg=226, lineno=70)
>        324	LOAD_FAST(arg=1, lineno=72)
         326	LOAD_CONST(arg=7, lineno=72)
         328	COMPARE_OP(arg=2, lineno=72)
         330	POP_JUMP_IF_FALSE(arg=464, lineno=72)
         334	LOAD_FAST(arg=3, lineno=73)
         336	LOAD_CONST(arg=3, lineno=73)
         338	IS_OP(arg=0, lineno=73)
         340	POP_JUMP_IF_FALSE(arg=360, lineno=73)
         344	LOAD_GLOBAL(arg=1, lineno=74)
         346	LOAD_ATTR(arg=3, lineno=74)
         348	LOAD_FAST(arg=4, lineno=74)
         350	LOAD_GLOBAL(arg=1, lineno=74)
         352	LOAD_ATTR(arg=4, lineno=74)
         354	LOAD_CONST(arg=4, lineno=74)
         356	CALL_FUNCTION_KW(arg=2, lineno=74)
         358	STORE_FAST(arg=3, lineno=74)
>        360	LOAD_GLOBAL(arg=5, lineno=75)
         362	LOAD_FAST(arg=5, lineno=75)
         364	CALL_FUNCTION(arg=1, lineno=75)
         366	GET_ITER(arg=None, lineno=75)
>        368	FOR_ITER(arg=94, lineno=75)
         370	STORE_FAST(arg=7, lineno=75)
         372	LOAD_GLOBAL(arg=1, lineno=76)
         374	LOAD_METHOD(arg=9, lineno=76)
         376	LOAD_GLOBAL(arg=1, lineno=76)
         378	LOAD_METHOD(arg=7, lineno=76)
         380	LOAD_FAST(arg=0, lineno=76)
         382	LOAD_CONST(arg=3, lineno=76)
         384	LOAD_CONST(arg=3, lineno=76)
         386	BUILD_SLICE(arg=2, lineno=76)
         388	LOAD_FAST(arg=7, lineno=76)
         390	BUILD_TUPLE(arg=2, lineno=76)
         392	BINARY_SUBSCR(arg=None, lineno=76)
         394	CALL_METHOD(arg=1, lineno=76)
         396	CALL_METHOD(arg=1, lineno=76)
         398	STORE_FAST(arg=8, lineno=76)
         400	LOAD_FAST(arg=8, lineno=77)
         402	LOAD_FAST(arg=2, lineno=77)
         404	COMPARE_OP(arg=4, lineno=77)
         406	POP_JUMP_IF_FALSE(arg=444, lineno=77)
         410	LOAD_FAST(arg=0, lineno=78)
         412	LOAD_CONST(arg=3, lineno=78)
         414	LOAD_CONST(arg=3, lineno=78)
         416	BUILD_SLICE(arg=2, lineno=78)
         418	LOAD_FAST(arg=7, lineno=78)
         420	BUILD_TUPLE(arg=2, lineno=78)
         422	BINARY_SUBSCR(arg=None, lineno=78)
         424	LOAD_FAST(arg=8, lineno=78)
         426	BINARY_TRUE_DIVIDE(arg=None, lineno=78)
         428	LOAD_FAST(arg=6, lineno=78)
         430	LOAD_CONST(arg=3, lineno=78)
         432	LOAD_CONST(arg=3, lineno=78)
         434	BUILD_SLICE(arg=2, lineno=78)
         436	LOAD_FAST(arg=7, lineno=78)
         438	BUILD_TUPLE(arg=2, lineno=78)
         440	STORE_SUBSCR(arg=None, lineno=78)
         442	JUMP_FORWARD(arg=16, lineno=78)
>        444	LOAD_FAST(arg=3, lineno=80)
         446	LOAD_FAST(arg=6, lineno=80)
         448	LOAD_CONST(arg=3, lineno=80)
         450	LOAD_CONST(arg=3, lineno=80)
         452	BUILD_SLICE(arg=2, lineno=80)
         454	LOAD_FAST(arg=7, lineno=80)
         456	BUILD_TUPLE(arg=2, lineno=80)
         458	STORE_SUBSCR(arg=None, lineno=80)
>        460	JUMP_ABSOLUTE(arg=368, lineno=80)
>        464	LOAD_FAST(arg=1, lineno=82)
         466	LOAD_CONST(arg=8, lineno=82)
         468	COMPARE_OP(arg=2, lineno=82)
         470	POP_JUMP_IF_FALSE(arg=650, lineno=82)
         474	LOAD_FAST(arg=3, lineno=83)
         476	LOAD_CONST(arg=3, lineno=83)
         478	IS_OP(arg=0, lineno=83)
         480	POP_JUMP_IF_FALSE(arg=500, lineno=83)
         484	LOAD_GLOBAL(arg=1, lineno=84)
         486	LOAD_ATTR(arg=2, lineno=84)
         488	LOAD_FAST(arg=4, lineno=84)
         490	LOAD_GLOBAL(arg=1, lineno=84)
         492	LOAD_ATTR(arg=4, lineno=84)
         494	LOAD_CONST(arg=4, lineno=84)
         496	CALL_FUNCTION_KW(arg=2, lineno=84)
         498	STORE_FAST(arg=3, lineno=84)
>        500	LOAD_GLOBAL(arg=5, lineno=85)
         502	LOAD_FAST(arg=5, lineno=85)
         504	CALL_FUNCTION(arg=1, lineno=85)
         506	GET_ITER(arg=None, lineno=85)
>        508	FOR_ITER(arg=140, lineno=85)
         510	STORE_FAST(arg=7, lineno=85)
         512	LOAD_GLOBAL(arg=1, lineno=86)
         514	LOAD_METHOD(arg=6, lineno=86)
         516	LOAD_FAST(arg=0, lineno=86)
         518	LOAD_CONST(arg=3, lineno=86)
         520	LOAD_CONST(arg=3, lineno=86)
         522	BUILD_SLICE(arg=2, lineno=86)
         524	LOAD_FAST(arg=7, lineno=86)
         526	BUILD_TUPLE(arg=2, lineno=86)
         528	BINARY_SUBSCR(arg=None, lineno=86)
         530	CALL_METHOD(arg=1, lineno=86)
         532	LOAD_FAST(arg=4, lineno=86)
         534	BINARY_TRUE_DIVIDE(arg=None, lineno=86)
         536	STORE_FAST(arg=9, lineno=86)
         538	LOAD_GLOBAL(arg=1, lineno=87)
         540	LOAD_METHOD(arg=8, lineno=87)
         542	LOAD_GLOBAL(arg=1, lineno=87)
         544	LOAD_METHOD(arg=6, lineno=87)
         546	LOAD_FAST(arg=0, lineno=87)
         548	LOAD_CONST(arg=3, lineno=87)
         550	LOAD_CONST(arg=3, lineno=87)
         552	BUILD_SLICE(arg=2, lineno=87)
         554	LOAD_FAST(arg=7, lineno=87)
         556	BUILD_TUPLE(arg=2, lineno=87)
         558	BINARY_SUBSCR(arg=None, lineno=87)
         560	LOAD_FAST(arg=9, lineno=87)
         562	BINARY_SUBTRACT(arg=None, lineno=87)
         564	LOAD_CONST(arg=6, lineno=87)
         566	BINARY_POWER(arg=None, lineno=87)
         568	CALL_METHOD(arg=1, lineno=87)
         570	LOAD_FAST(arg=4, lineno=87)
         572	LOAD_CONST(arg=9, lineno=87)
         574	BINARY_SUBTRACT(arg=None, lineno=87)
         576	BINARY_TRUE_DIVIDE(arg=None, lineno=87)
         578	CALL_METHOD(arg=1, lineno=87)
         580	STORE_FAST(arg=10, lineno=87)
         582	LOAD_FAST(arg=10, lineno=88)
         584	LOAD_FAST(arg=2, lineno=88)
         586	COMPARE_OP(arg=4, lineno=88)
         588	POP_JUMP_IF_FALSE(arg=630, lineno=88)
         592	LOAD_FAST(arg=0, lineno=89)
         594	LOAD_CONST(arg=3, lineno=89)
         596	LOAD_CONST(arg=3, lineno=89)
         598	BUILD_SLICE(arg=2, lineno=89)
         600	LOAD_FAST(arg=7, lineno=89)
         602	BUILD_TUPLE(arg=2, lineno=89)
         604	BINARY_SUBSCR(arg=None, lineno=89)
         606	LOAD_FAST(arg=9, lineno=89)
         608	BINARY_SUBTRACT(arg=None, lineno=89)
         610	LOAD_FAST(arg=10, lineno=89)
         612	BINARY_TRUE_DIVIDE(arg=None, lineno=89)
         614	LOAD_FAST(arg=6, lineno=89)
         616	LOAD_CONST(arg=3, lineno=89)
         618	LOAD_CONST(arg=3, lineno=89)
         620	BUILD_SLICE(arg=2, lineno=89)
         622	LOAD_FAST(arg=7, lineno=89)
         624	BUILD_TUPLE(arg=2, lineno=89)
         626	STORE_SUBSCR(arg=None, lineno=89)
         628	JUMP_FORWARD(arg=16, lineno=89)
>        630	LOAD_FAST(arg=3, lineno=91)
         632	LOAD_FAST(arg=6, lineno=91)
         634	LOAD_CONST(arg=3, lineno=91)
         636	LOAD_CONST(arg=3, lineno=91)
         638	BUILD_SLICE(arg=2, lineno=91)
         640	LOAD_FAST(arg=7, lineno=91)
         642	BUILD_TUPLE(arg=2, lineno=91)
         644	STORE_SUBSCR(arg=None, lineno=91)
>        646	JUMP_ABSOLUTE(arg=508, lineno=91)
>        650	LOAD_FAST(arg=6, lineno=93)
         652	RETURN_VALUE(arg=None, lineno=93)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=47)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=47)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=47)
DEBUG:numba.core.byteflow:stack ['$norm2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=CONTAINS_OP(arg=0, lineno=47)
DEBUG:numba.core.byteflow:stack ['$norm2.0', '$const4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=POP_JUMP_IF_TRUE(arg=14, lineno=47)
DEBUG:numba.core.byteflow:stack ['$6contains_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_ASSERTION_ERROR(arg=None, lineno=47)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=12, inst=RAISE_VARARGS(arg=1, lineno=47)
DEBUG:numba.core.byteflow:stack ['$assertion_error10.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=49)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_ATTR(arg=0, lineno=49)
DEBUG:numba.core.byteflow:stack ['$X14.0']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=UNPACK_SEQUENCE(arg=2, lineno=49)
DEBUG:numba.core.byteflow:stack ['$16load_attr.1']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=STORE_FAST(arg=4, lineno=49)
DEBUG:numba.core.byteflow:stack ['$18unpack_sequence.3', '$18unpack_sequence.2']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=STORE_FAST(arg=5, lineno=49)
DEBUG:numba.core.byteflow:stack ['$18unpack_sequence.3']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_GLOBAL(arg=1, lineno=50)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_METHOD(arg=2, lineno=50)
DEBUG:numba.core.byteflow:stack ['$24load_global.5']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=50)
DEBUG:numba.core.byteflow:stack ['$26load_method.6']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_FAST(arg=5, lineno=50)
DEBUG:numba.core.byteflow:stack ['$26load_method.6', '$K28.7']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=BUILD_TUPLE(arg=2, lineno=50)
DEBUG:numba.core.byteflow:stack ['$26load_method.6', '$K28.7', '$N30.8']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=CALL_METHOD(arg=1, lineno=50)
DEBUG:numba.core.byteflow:stack ['$26load_method.6', '$32build_tuple.9']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=STORE_FAST(arg=6, lineno=50)
DEBUG:numba.core.byteflow:stack ['$34call_method.10']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=52)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_CONST(arg=2, lineno=52)
DEBUG:numba.core.byteflow:stack ['$norm38.11']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=COMPARE_OP(arg=2, lineno=52)
DEBUG:numba.core.byteflow:stack ['$norm38.11', '$const40.12']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=POP_JUMP_IF_FALSE(arg=174, lineno=52)
DEBUG:numba.core.byteflow:stack ['$42compare_op.13']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=46, stack=(), blockstack=(), npush=0), Edge(pc=174, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=46 nstack_initial=0), State(pc_initial=174 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LOAD_FAST(arg=3, lineno=53)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_CONST(arg=3, lineno=53)
DEBUG:numba.core.byteflow:stack ['$v46.0']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=IS_OP(arg=0, lineno=53)
DEBUG:numba.core.byteflow:stack ['$v46.0', '$const48.1']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=POP_JUMP_IF_FALSE(arg=74, lineno=53)
DEBUG:numba.core.byteflow:stack ['$50is_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=74, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=174 nstack_initial=0), State(pc_initial=54 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=174, inst=LOAD_FAST(arg=1, lineno=62)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=176, inst=LOAD_CONST(arg=5, lineno=62)
DEBUG:numba.core.byteflow:stack ['$norm174.0']
DEBUG:numba.core.byteflow:dispatch pc=178, inst=COMPARE_OP(arg=2, lineno=62)
DEBUG:numba.core.byteflow:stack ['$norm174.0', '$const176.1']
DEBUG:numba.core.byteflow:dispatch pc=180, inst=POP_JUMP_IF_FALSE(arg=324, lineno=62)
DEBUG:numba.core.byteflow:stack ['$178compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=184, stack=(), blockstack=(), npush=0), Edge(pc=324, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=324 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_GLOBAL(arg=1, lineno=54)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=56, inst=LOAD_ATTR(arg=3, lineno=54)
DEBUG:numba.core.byteflow:stack ['$54load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_FAST(arg=4, lineno=54)
DEBUG:numba.core.byteflow:stack ['$56load_attr.1']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_GLOBAL(arg=1, lineno=54)
DEBUG:numba.core.byteflow:stack ['$56load_attr.1', '$K58.2']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=LOAD_ATTR(arg=4, lineno=54)
DEBUG:numba.core.byteflow:stack ['$56load_attr.1', '$K58.2', '$60load_global.3']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_CONST(arg=4, lineno=54)
DEBUG:numba.core.byteflow:stack ['$56load_attr.1', '$K58.2', '$62load_attr.4']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=CALL_FUNCTION_KW(arg=2, lineno=54)
DEBUG:numba.core.byteflow:stack ['$56load_attr.1', '$K58.2', '$62load_attr.4', '$const64.5']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=LOAD_FAST(arg=4, lineno=54)
DEBUG:numba.core.byteflow:stack ['$66call_function_kw.6']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=54)
DEBUG:numba.core.byteflow:stack ['$66call_function_kw.6', '$K68.7']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=STORE_FAST(arg=3, lineno=54)
DEBUG:numba.core.byteflow:stack ['$70binary_true_divide.8']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=324 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_GLOBAL(arg=5, lineno=55)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=55)
DEBUG:numba.core.byteflow:stack ['$74load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=CALL_FUNCTION(arg=1, lineno=55)
DEBUG:numba.core.byteflow:stack ['$74load_global.0', '$N76.1']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=GET_ITER(arg=None, lineno=55)
DEBUG:numba.core.byteflow:stack ['$78call_function.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=82, stack=('$80get_iter.3',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=324 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=184, inst=LOAD_FAST(arg=3, lineno=63)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=186, inst=LOAD_CONST(arg=3, lineno=63)
DEBUG:numba.core.byteflow:stack ['$v184.0']
DEBUG:numba.core.byteflow:dispatch pc=188, inst=IS_OP(arg=0, lineno=63)
DEBUG:numba.core.byteflow:stack ['$v184.0', '$const186.1']
DEBUG:numba.core.byteflow:dispatch pc=190, inst=POP_JUMP_IF_FALSE(arg=218, lineno=63)
DEBUG:numba.core.byteflow:stack ['$188is_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=192, stack=(), blockstack=(), npush=0), Edge(pc=218, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=324 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=1), State(pc_initial=192 nstack_initial=0), State(pc_initial=218 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=324, inst=LOAD_FAST(arg=1, lineno=72)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=326, inst=LOAD_CONST(arg=7, lineno=72)
DEBUG:numba.core.byteflow:stack ['$norm324.0']
DEBUG:numba.core.byteflow:dispatch pc=328, inst=COMPARE_OP(arg=2, lineno=72)
DEBUG:numba.core.byteflow:stack ['$norm324.0', '$const326.1']
DEBUG:numba.core.byteflow:dispatch pc=330, inst=POP_JUMP_IF_FALSE(arg=464, lineno=72)
DEBUG:numba.core.byteflow:stack ['$328compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=334, stack=(), blockstack=(), npush=0), Edge(pc=464, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=1), State(pc_initial=192 nstack_initial=0), State(pc_initial=218 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=464 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=82 nstack_initial=1), State(pc_initial=192 nstack_initial=0), State(pc_initial=218 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=464 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: ['$phi82.0']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=FOR_ITER(arg=90, lineno=55)
DEBUG:numba.core.byteflow:stack ['$phi82.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=174, stack=(), blockstack=(), npush=0), Edge(pc=84, stack=('$phi82.0', '$82for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=192 nstack_initial=0), State(pc_initial=218 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=464 nstack_initial=0), State(pc_initial=174 nstack_initial=0), State(pc_initial=84 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=192, inst=LOAD_GLOBAL(arg=1, lineno=64)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=194, inst=LOAD_ATTR(arg=3, lineno=64)
DEBUG:numba.core.byteflow:stack ['$192load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=196, inst=LOAD_FAST(arg=4, lineno=64)
DEBUG:numba.core.byteflow:stack ['$194load_attr.1']
DEBUG:numba.core.byteflow:dispatch pc=198, inst=LOAD_GLOBAL(arg=1, lineno=64)
DEBUG:numba.core.byteflow:stack ['$194load_attr.1', '$K196.2']
DEBUG:numba.core.byteflow:dispatch pc=200, inst=LOAD_ATTR(arg=4, lineno=64)
DEBUG:numba.core.byteflow:stack ['$194load_attr.1', '$K196.2', '$198load_global.3']
DEBUG:numba.core.byteflow:dispatch pc=202, inst=LOAD_CONST(arg=4, lineno=64)
DEBUG:numba.core.byteflow:stack ['$194load_attr.1', '$K196.2', '$200load_attr.4']
DEBUG:numba.core.byteflow:dispatch pc=204, inst=CALL_FUNCTION_KW(arg=2, lineno=64)
DEBUG:numba.core.byteflow:stack ['$194load_attr.1', '$K196.2', '$200load_attr.4', '$const202.5']
DEBUG:numba.core.byteflow:dispatch pc=206, inst=LOAD_GLOBAL(arg=1, lineno=64)
DEBUG:numba.core.byteflow:stack ['$204call_function_kw.6']
DEBUG:numba.core.byteflow:dispatch pc=208, inst=LOAD_METHOD(arg=8, lineno=64)
DEBUG:numba.core.byteflow:stack ['$204call_function_kw.6', '$206load_global.7']
DEBUG:numba.core.byteflow:dispatch pc=210, inst=LOAD_FAST(arg=4, lineno=64)
DEBUG:numba.core.byteflow:stack ['$204call_function_kw.6', '$208load_method.8']
DEBUG:numba.core.byteflow:dispatch pc=212, inst=CALL_METHOD(arg=1, lineno=64)
DEBUG:numba.core.byteflow:stack ['$204call_function_kw.6', '$208load_method.8', '$K210.9']
DEBUG:numba.core.byteflow:dispatch pc=214, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=64)
DEBUG:numba.core.byteflow:stack ['$204call_function_kw.6', '$212call_method.10']
DEBUG:numba.core.byteflow:dispatch pc=216, inst=STORE_FAST(arg=3, lineno=64)
DEBUG:numba.core.byteflow:stack ['$214binary_true_divide.11']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=218, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=218 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=464 nstack_initial=0), State(pc_initial=174 nstack_initial=0), State(pc_initial=84 nstack_initial=2), State(pc_initial=218 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=218, inst=LOAD_GLOBAL(arg=5, lineno=65)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=220, inst=LOAD_FAST(arg=5, lineno=65)
DEBUG:numba.core.byteflow:stack ['$218load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=222, inst=CALL_FUNCTION(arg=1, lineno=65)
DEBUG:numba.core.byteflow:stack ['$218load_global.0', '$N220.1']
DEBUG:numba.core.byteflow:dispatch pc=224, inst=GET_ITER(arg=None, lineno=65)
DEBUG:numba.core.byteflow:stack ['$222call_function.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=226, stack=('$224get_iter.3',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=334 nstack_initial=0), State(pc_initial=464 nstack_initial=0), State(pc_initial=174 nstack_initial=0), State(pc_initial=84 nstack_initial=2), State(pc_initial=218 nstack_initial=0), State(pc_initial=226 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=334, inst=LOAD_FAST(arg=3, lineno=73)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=336, inst=LOAD_CONST(arg=3, lineno=73)
DEBUG:numba.core.byteflow:stack ['$v334.0']
DEBUG:numba.core.byteflow:dispatch pc=338, inst=IS_OP(arg=0, lineno=73)
DEBUG:numba.core.byteflow:stack ['$v334.0', '$const336.1']
DEBUG:numba.core.byteflow:dispatch pc=340, inst=POP_JUMP_IF_FALSE(arg=360, lineno=73)
DEBUG:numba.core.byteflow:stack ['$338is_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=344, stack=(), blockstack=(), npush=0), Edge(pc=360, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=464 nstack_initial=0), State(pc_initial=174 nstack_initial=0), State(pc_initial=84 nstack_initial=2), State(pc_initial=218 nstack_initial=0), State(pc_initial=226 nstack_initial=1), State(pc_initial=344 nstack_initial=0), State(pc_initial=360 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=464, inst=LOAD_FAST(arg=1, lineno=82)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=466, inst=LOAD_CONST(arg=8, lineno=82)
DEBUG:numba.core.byteflow:stack ['$norm464.0']
DEBUG:numba.core.byteflow:dispatch pc=468, inst=COMPARE_OP(arg=2, lineno=82)
DEBUG:numba.core.byteflow:stack ['$norm464.0', '$const466.1']
DEBUG:numba.core.byteflow:dispatch pc=470, inst=POP_JUMP_IF_FALSE(arg=650, lineno=82)
DEBUG:numba.core.byteflow:stack ['$468compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=474, stack=(), blockstack=(), npush=0), Edge(pc=650, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=174 nstack_initial=0), State(pc_initial=84 nstack_initial=2), State(pc_initial=218 nstack_initial=0), State(pc_initial=226 nstack_initial=1), State(pc_initial=344 nstack_initial=0), State(pc_initial=360 nstack_initial=0), State(pc_initial=474 nstack_initial=0), State(pc_initial=650 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=84 nstack_initial=2), State(pc_initial=218 nstack_initial=0), State(pc_initial=226 nstack_initial=1), State(pc_initial=344 nstack_initial=0), State(pc_initial=360 nstack_initial=0), State(pc_initial=474 nstack_initial=0), State(pc_initial=650 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: ['$phi84.0', '$phi84.1']
DEBUG:numba.core.byteflow:dispatch pc=84, inst=STORE_FAST(arg=7, lineno=55)
DEBUG:numba.core.byteflow:stack ['$phi84.0', '$phi84.1']
DEBUG:numba.core.byteflow:dispatch pc=86, inst=LOAD_GLOBAL(arg=1, lineno=56)
DEBUG:numba.core.byteflow:stack ['$phi84.0']
DEBUG:numba.core.byteflow:dispatch pc=88, inst=LOAD_METHOD(arg=6, lineno=56)
DEBUG:numba.core.byteflow:stack ['$phi84.0', '$86load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=90, inst=LOAD_GLOBAL(arg=1, lineno=56)
DEBUG:numba.core.byteflow:stack ['$phi84.0', '$88load_method.3']
DEBUG:numba.core.byteflow:dispatch pc=92, inst=LOAD_METHOD(arg=7, lineno=56)
DEBUG:numba.core.byteflow:stack ['$phi84.0', '$88load_method.3', '$90load_global.4']
DEBUG:numba.core.byteflow:dispatch pc=94, inst=LOAD_FAST(arg=0, lineno=56)
DEBUG:numba.core.byteflow:stack ['$phi84.0', '$88load_method.3', '$92load_method.5']
DEBUG:numba.core.byteflow:dispatch pc=96, inst=LOAD_CONST(arg=3, lineno=56)
DEBUG:numba.core.byteflow:stack ['$phi84.0', '$88load_method.3', '$92load_method.5', '$X94.6']
DEBUG:numba.core.byteflow:dispatch pc=98, inst=LOAD_CONST(arg=3, lineno=56)
DEBUG:numba.core.byteflow:stack ['$phi84.0', '$88load_method.3', '$92load_method.5', '$X94.6', '$const96.7']
DEBUG:numba.core.byteflow:dispatch pc=100, inst=BUILD_SLICE(arg=2, lineno=56)
DEBUG:numba.core.byteflow:stack ['$phi84.0', '$88load_method.3', '$92load_method.5', '$X94.6', '$const96.7', '$const98.8']
DEBUG:numba.core.byteflow:dispatch pc=102, inst=LOAD_FAST(arg=7, lineno=56)
DEBUG:numba.core.byteflow:stack ['$phi84.0', '$88load_method.3', '$92load_method.5', '$X94.6', '$100build_slice.10']
DEBUG:numba.core.byteflow:dispatch pc=104, inst=BUILD_TUPLE(arg=2, lineno=56)
DEBUG:numba.core.byteflow:stack ['$phi84.0', '$88load_method.3', '$92load_method.5', '$X94.6', '$100build_slice.10', '$n102.11']
DEBUG:numba.core.byteflow:dispatch pc=106, inst=BINARY_SUBSCR(arg=None, lineno=56)
DEBUG:numba.core.byteflow:stack ['$phi84.0', '$88load_method.3', '$92load_method.5', '$X94.6', '$104build_tuple.12']
DEBUG:numba.core.byteflow:dispatch pc=108, inst=CALL_METHOD(arg=1, lineno=56)
DEBUG:numba.core.byteflow:stack ['$phi84.0', '$88load_method.3', '$92load_method.5', '$106binary_subscr.13']
DEBUG:numba.core.byteflow:dispatch pc=110, inst=CALL_METHOD(arg=1, lineno=56)
DEBUG:numba.core.byteflow:stack ['$phi84.0', '$88load_method.3', '$108call_method.14']
DEBUG:numba.core.byteflow:dispatch pc=112, inst=STORE_FAST(arg=8, lineno=56)
DEBUG:numba.core.byteflow:stack ['$phi84.0', '$110call_method.15']
DEBUG:numba.core.byteflow:dispatch pc=114, inst=LOAD_FAST(arg=8, lineno=57)
DEBUG:numba.core.byteflow:stack ['$phi84.0']
DEBUG:numba.core.byteflow:dispatch pc=116, inst=LOAD_FAST(arg=2, lineno=57)
DEBUG:numba.core.byteflow:stack ['$phi84.0', '$s114.16']
DEBUG:numba.core.byteflow:dispatch pc=118, inst=COMPARE_OP(arg=4, lineno=57)
DEBUG:numba.core.byteflow:stack ['$phi84.0', '$s114.16', '$threshold116.17']
DEBUG:numba.core.byteflow:dispatch pc=120, inst=POP_JUMP_IF_FALSE(arg=156, lineno=57)
DEBUG:numba.core.byteflow:stack ['$phi84.0', '$118compare_op.18']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=122, stack=('$phi84.0',), blockstack=(), npush=0), Edge(pc=156, stack=('$phi84.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=218 nstack_initial=0), State(pc_initial=226 nstack_initial=1), State(pc_initial=344 nstack_initial=0), State(pc_initial=360 nstack_initial=0), State(pc_initial=474 nstack_initial=0), State(pc_initial=650 nstack_initial=0), State(pc_initial=122 nstack_initial=1), State(pc_initial=156 nstack_initial=1)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=226 nstack_initial=1), State(pc_initial=344 nstack_initial=0), State(pc_initial=360 nstack_initial=0), State(pc_initial=474 nstack_initial=0), State(pc_initial=650 nstack_initial=0), State(pc_initial=122 nstack_initial=1), State(pc_initial=156 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi226.0']
DEBUG:numba.core.byteflow:dispatch pc=226, inst=FOR_ITER(arg=96, lineno=65)
DEBUG:numba.core.byteflow:stack ['$phi226.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=324, stack=(), blockstack=(), npush=0), Edge(pc=228, stack=('$phi226.0', '$226for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=344 nstack_initial=0), State(pc_initial=360 nstack_initial=0), State(pc_initial=474 nstack_initial=0), State(pc_initial=650 nstack_initial=0), State(pc_initial=122 nstack_initial=1), State(pc_initial=156 nstack_initial=1), State(pc_initial=324 nstack_initial=0), State(pc_initial=228 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=344, inst=LOAD_GLOBAL(arg=1, lineno=74)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=346, inst=LOAD_ATTR(arg=3, lineno=74)
DEBUG:numba.core.byteflow:stack ['$344load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=348, inst=LOAD_FAST(arg=4, lineno=74)
DEBUG:numba.core.byteflow:stack ['$346load_attr.1']
DEBUG:numba.core.byteflow:dispatch pc=350, inst=LOAD_GLOBAL(arg=1, lineno=74)
DEBUG:numba.core.byteflow:stack ['$346load_attr.1', '$K348.2']
DEBUG:numba.core.byteflow:dispatch pc=352, inst=LOAD_ATTR(arg=4, lineno=74)
DEBUG:numba.core.byteflow:stack ['$346load_attr.1', '$K348.2', '$350load_global.3']
DEBUG:numba.core.byteflow:dispatch pc=354, inst=LOAD_CONST(arg=4, lineno=74)
DEBUG:numba.core.byteflow:stack ['$346load_attr.1', '$K348.2', '$352load_attr.4']
DEBUG:numba.core.byteflow:dispatch pc=356, inst=CALL_FUNCTION_KW(arg=2, lineno=74)
DEBUG:numba.core.byteflow:stack ['$346load_attr.1', '$K348.2', '$352load_attr.4', '$const354.5']
DEBUG:numba.core.byteflow:dispatch pc=358, inst=STORE_FAST(arg=3, lineno=74)
DEBUG:numba.core.byteflow:stack ['$356call_function_kw.6']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=360, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=360 nstack_initial=0), State(pc_initial=474 nstack_initial=0), State(pc_initial=650 nstack_initial=0), State(pc_initial=122 nstack_initial=1), State(pc_initial=156 nstack_initial=1), State(pc_initial=324 nstack_initial=0), State(pc_initial=228 nstack_initial=2), State(pc_initial=360 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=360, inst=LOAD_GLOBAL(arg=5, lineno=75)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=362, inst=LOAD_FAST(arg=5, lineno=75)
DEBUG:numba.core.byteflow:stack ['$360load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=364, inst=CALL_FUNCTION(arg=1, lineno=75)
DEBUG:numba.core.byteflow:stack ['$360load_global.0', '$N362.1']
DEBUG:numba.core.byteflow:dispatch pc=366, inst=GET_ITER(arg=None, lineno=75)
DEBUG:numba.core.byteflow:stack ['$364call_function.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=368, stack=('$366get_iter.3',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=474 nstack_initial=0), State(pc_initial=650 nstack_initial=0), State(pc_initial=122 nstack_initial=1), State(pc_initial=156 nstack_initial=1), State(pc_initial=324 nstack_initial=0), State(pc_initial=228 nstack_initial=2), State(pc_initial=360 nstack_initial=0), State(pc_initial=368 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=474, inst=LOAD_FAST(arg=3, lineno=83)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=476, inst=LOAD_CONST(arg=3, lineno=83)
DEBUG:numba.core.byteflow:stack ['$v474.0']
DEBUG:numba.core.byteflow:dispatch pc=478, inst=IS_OP(arg=0, lineno=83)
DEBUG:numba.core.byteflow:stack ['$v474.0', '$const476.1']
DEBUG:numba.core.byteflow:dispatch pc=480, inst=POP_JUMP_IF_FALSE(arg=500, lineno=83)
DEBUG:numba.core.byteflow:stack ['$478is_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=484, stack=(), blockstack=(), npush=0), Edge(pc=500, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=650 nstack_initial=0), State(pc_initial=122 nstack_initial=1), State(pc_initial=156 nstack_initial=1), State(pc_initial=324 nstack_initial=0), State(pc_initial=228 nstack_initial=2), State(pc_initial=360 nstack_initial=0), State(pc_initial=368 nstack_initial=1), State(pc_initial=484 nstack_initial=0), State(pc_initial=500 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=650, inst=LOAD_FAST(arg=6, lineno=93)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=652, inst=RETURN_VALUE(arg=None, lineno=93)
DEBUG:numba.core.byteflow:stack ['$X_norm650.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=122 nstack_initial=1), State(pc_initial=156 nstack_initial=1), State(pc_initial=324 nstack_initial=0), State(pc_initial=228 nstack_initial=2), State(pc_initial=360 nstack_initial=0), State(pc_initial=368 nstack_initial=1), State(pc_initial=484 nstack_initial=0), State(pc_initial=500 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: ['$phi122.0']
DEBUG:numba.core.byteflow:dispatch pc=122, inst=LOAD_FAST(arg=0, lineno=58)
DEBUG:numba.core.byteflow:stack ['$phi122.0']
DEBUG:numba.core.byteflow:dispatch pc=124, inst=LOAD_CONST(arg=3, lineno=58)
DEBUG:numba.core.byteflow:stack ['$phi122.0', '$X122.1']
DEBUG:numba.core.byteflow:dispatch pc=126, inst=LOAD_CONST(arg=3, lineno=58)
DEBUG:numba.core.byteflow:stack ['$phi122.0', '$X122.1', '$const124.2']
DEBUG:numba.core.byteflow:dispatch pc=128, inst=BUILD_SLICE(arg=2, lineno=58)
DEBUG:numba.core.byteflow:stack ['$phi122.0', '$X122.1', '$const124.2', '$const126.3']
DEBUG:numba.core.byteflow:dispatch pc=130, inst=LOAD_FAST(arg=7, lineno=58)
DEBUG:numba.core.byteflow:stack ['$phi122.0', '$X122.1', '$128build_slice.5']
DEBUG:numba.core.byteflow:dispatch pc=132, inst=BUILD_TUPLE(arg=2, lineno=58)
DEBUG:numba.core.byteflow:stack ['$phi122.0', '$X122.1', '$128build_slice.5', '$n130.6']
DEBUG:numba.core.byteflow:dispatch pc=134, inst=BINARY_SUBSCR(arg=None, lineno=58)
DEBUG:numba.core.byteflow:stack ['$phi122.0', '$X122.1', '$132build_tuple.7']
DEBUG:numba.core.byteflow:dispatch pc=136, inst=LOAD_FAST(arg=8, lineno=58)
DEBUG:numba.core.byteflow:stack ['$phi122.0', '$134binary_subscr.8']
DEBUG:numba.core.byteflow:dispatch pc=138, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=58)
DEBUG:numba.core.byteflow:stack ['$phi122.0', '$134binary_subscr.8', '$s136.9']
DEBUG:numba.core.byteflow:dispatch pc=140, inst=LOAD_FAST(arg=6, lineno=58)
DEBUG:numba.core.byteflow:stack ['$phi122.0', '$138binary_true_divide.10']
DEBUG:numba.core.byteflow:dispatch pc=142, inst=LOAD_CONST(arg=3, lineno=58)
DEBUG:numba.core.byteflow:stack ['$phi122.0', '$138binary_true_divide.10', '$X_norm140.11']
DEBUG:numba.core.byteflow:dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=58)
DEBUG:numba.core.byteflow:stack ['$phi122.0', '$138binary_true_divide.10', '$X_norm140.11', '$const142.12']
DEBUG:numba.core.byteflow:dispatch pc=146, inst=BUILD_SLICE(arg=2, lineno=58)
DEBUG:numba.core.byteflow:stack ['$phi122.0', '$138binary_true_divide.10', '$X_norm140.11', '$const142.12', '$const144.13']
DEBUG:numba.core.byteflow:dispatch pc=148, inst=LOAD_FAST(arg=7, lineno=58)
DEBUG:numba.core.byteflow:stack ['$phi122.0', '$138binary_true_divide.10', '$X_norm140.11', '$146build_slice.15']
DEBUG:numba.core.byteflow:dispatch pc=150, inst=BUILD_TUPLE(arg=2, lineno=58)
DEBUG:numba.core.byteflow:stack ['$phi122.0', '$138binary_true_divide.10', '$X_norm140.11', '$146build_slice.15', '$n148.16']
DEBUG:numba.core.byteflow:dispatch pc=152, inst=STORE_SUBSCR(arg=None, lineno=58)
DEBUG:numba.core.byteflow:stack ['$phi122.0', '$138binary_true_divide.10', '$X_norm140.11', '$150build_tuple.17']
DEBUG:numba.core.byteflow:dispatch pc=154, inst=JUMP_ABSOLUTE(arg=82, lineno=58)
DEBUG:numba.core.byteflow:stack ['$phi122.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=82, stack=('$phi122.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=156 nstack_initial=1), State(pc_initial=324 nstack_initial=0), State(pc_initial=228 nstack_initial=2), State(pc_initial=360 nstack_initial=0), State(pc_initial=368 nstack_initial=1), State(pc_initial=484 nstack_initial=0), State(pc_initial=500 nstack_initial=0), State(pc_initial=82 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi156.0']
DEBUG:numba.core.byteflow:dispatch pc=156, inst=LOAD_FAST(arg=3, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi156.0']
DEBUG:numba.core.byteflow:dispatch pc=158, inst=LOAD_FAST(arg=6, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi156.0', '$v156.1']
DEBUG:numba.core.byteflow:dispatch pc=160, inst=LOAD_CONST(arg=3, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi156.0', '$v156.1', '$X_norm158.2']
DEBUG:numba.core.byteflow:dispatch pc=162, inst=LOAD_CONST(arg=3, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi156.0', '$v156.1', '$X_norm158.2', '$const160.3']
DEBUG:numba.core.byteflow:dispatch pc=164, inst=BUILD_SLICE(arg=2, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi156.0', '$v156.1', '$X_norm158.2', '$const160.3', '$const162.4']
DEBUG:numba.core.byteflow:dispatch pc=166, inst=LOAD_FAST(arg=7, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi156.0', '$v156.1', '$X_norm158.2', '$164build_slice.6']
DEBUG:numba.core.byteflow:dispatch pc=168, inst=BUILD_TUPLE(arg=2, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi156.0', '$v156.1', '$X_norm158.2', '$164build_slice.6', '$n166.7']
DEBUG:numba.core.byteflow:dispatch pc=170, inst=STORE_SUBSCR(arg=None, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi156.0', '$v156.1', '$X_norm158.2', '$168build_tuple.8']
DEBUG:numba.core.byteflow:dispatch pc=172, inst=JUMP_ABSOLUTE(arg=82, lineno=60)
DEBUG:numba.core.byteflow:stack ['$phi156.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=82, stack=('$phi156.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=324 nstack_initial=0), State(pc_initial=228 nstack_initial=2), State(pc_initial=360 nstack_initial=0), State(pc_initial=368 nstack_initial=1), State(pc_initial=484 nstack_initial=0), State(pc_initial=500 nstack_initial=0), State(pc_initial=82 nstack_initial=1), State(pc_initial=82 nstack_initial=1)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=228 nstack_initial=2), State(pc_initial=360 nstack_initial=0), State(pc_initial=368 nstack_initial=1), State(pc_initial=484 nstack_initial=0), State(pc_initial=500 nstack_initial=0), State(pc_initial=82 nstack_initial=1), State(pc_initial=82 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi228.0', '$phi228.1']
DEBUG:numba.core.byteflow:dispatch pc=228, inst=STORE_FAST(arg=7, lineno=65)
DEBUG:numba.core.byteflow:stack ['$phi228.0', '$phi228.1']
DEBUG:numba.core.byteflow:dispatch pc=230, inst=LOAD_GLOBAL(arg=1, lineno=66)
DEBUG:numba.core.byteflow:stack ['$phi228.0']
DEBUG:numba.core.byteflow:dispatch pc=232, inst=LOAD_METHOD(arg=8, lineno=66)
DEBUG:numba.core.byteflow:stack ['$phi228.0', '$230load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=234, inst=LOAD_GLOBAL(arg=1, lineno=66)
DEBUG:numba.core.byteflow:stack ['$phi228.0', '$232load_method.3']
DEBUG:numba.core.byteflow:dispatch pc=236, inst=LOAD_METHOD(arg=6, lineno=66)
DEBUG:numba.core.byteflow:stack ['$phi228.0', '$232load_method.3', '$234load_global.4']
DEBUG:numba.core.byteflow:dispatch pc=238, inst=LOAD_FAST(arg=0, lineno=66)
DEBUG:numba.core.byteflow:stack ['$phi228.0', '$232load_method.3', '$236load_method.5']
DEBUG:numba.core.byteflow:dispatch pc=240, inst=LOAD_CONST(arg=3, lineno=66)
DEBUG:numba.core.byteflow:stack ['$phi228.0', '$232load_method.3', '$236load_method.5', '$X238.6']
DEBUG:numba.core.byteflow:dispatch pc=242, inst=LOAD_CONST(arg=3, lineno=66)
DEBUG:numba.core.byteflow:stack ['$phi228.0', '$232load_method.3', '$236load_method.5', '$X238.6', '$const240.7']
DEBUG:numba.core.byteflow:dispatch pc=244, inst=BUILD_SLICE(arg=2, lineno=66)
DEBUG:numba.core.byteflow:stack ['$phi228.0', '$232load_method.3', '$236load_method.5', '$X238.6', '$const240.7', '$const242.8']
DEBUG:numba.core.byteflow:dispatch pc=246, inst=LOAD_FAST(arg=7, lineno=66)
DEBUG:numba.core.byteflow:stack ['$phi228.0', '$232load_method.3', '$236load_method.5', '$X238.6', '$244build_slice.10']
DEBUG:numba.core.byteflow:dispatch pc=248, inst=BUILD_TUPLE(arg=2, lineno=66)
DEBUG:numba.core.byteflow:stack ['$phi228.0', '$232load_method.3', '$236load_method.5', '$X238.6', '$244build_slice.10', '$n246.11']
DEBUG:numba.core.byteflow:dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=66)
DEBUG:numba.core.byteflow:stack ['$phi228.0', '$232load_method.3', '$236load_method.5', '$X238.6', '$248build_tuple.12']
DEBUG:numba.core.byteflow:dispatch pc=252, inst=LOAD_CONST(arg=6, lineno=66)
DEBUG:numba.core.byteflow:stack ['$phi228.0', '$232load_method.3', '$236load_method.5', '$250binary_subscr.13']
DEBUG:numba.core.byteflow:dispatch pc=254, inst=BINARY_POWER(arg=None, lineno=66)
DEBUG:numba.core.byteflow:stack ['$phi228.0', '$232load_method.3', '$236load_method.5', '$250binary_subscr.13', '$const252.14']
DEBUG:numba.core.byteflow:dispatch pc=256, inst=CALL_METHOD(arg=1, lineno=66)
DEBUG:numba.core.byteflow:stack ['$phi228.0', '$232load_method.3', '$236load_method.5', '$254binary_power.15']
DEBUG:numba.core.byteflow:dispatch pc=258, inst=CALL_METHOD(arg=1, lineno=66)
DEBUG:numba.core.byteflow:stack ['$phi228.0', '$232load_method.3', '$256call_method.16']
DEBUG:numba.core.byteflow:dispatch pc=260, inst=STORE_FAST(arg=8, lineno=66)
DEBUG:numba.core.byteflow:stack ['$phi228.0', '$258call_method.17']
DEBUG:numba.core.byteflow:dispatch pc=262, inst=LOAD_FAST(arg=8, lineno=67)
DEBUG:numba.core.byteflow:stack ['$phi228.0']
DEBUG:numba.core.byteflow:dispatch pc=264, inst=LOAD_FAST(arg=2, lineno=67)
DEBUG:numba.core.byteflow:stack ['$phi228.0', '$s262.18']
DEBUG:numba.core.byteflow:dispatch pc=266, inst=COMPARE_OP(arg=4, lineno=67)
DEBUG:numba.core.byteflow:stack ['$phi228.0', '$s262.18', '$threshold264.19']
DEBUG:numba.core.byteflow:dispatch pc=268, inst=POP_JUMP_IF_FALSE(arg=306, lineno=67)
DEBUG:numba.core.byteflow:stack ['$phi228.0', '$266compare_op.20']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=272, stack=('$phi228.0',), blockstack=(), npush=0), Edge(pc=306, stack=('$phi228.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=360 nstack_initial=0), State(pc_initial=368 nstack_initial=1), State(pc_initial=484 nstack_initial=0), State(pc_initial=500 nstack_initial=0), State(pc_initial=82 nstack_initial=1), State(pc_initial=82 nstack_initial=1), State(pc_initial=272 nstack_initial=1), State(pc_initial=306 nstack_initial=1)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=368 nstack_initial=1), State(pc_initial=484 nstack_initial=0), State(pc_initial=500 nstack_initial=0), State(pc_initial=82 nstack_initial=1), State(pc_initial=82 nstack_initial=1), State(pc_initial=272 nstack_initial=1), State(pc_initial=306 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi368.0']
DEBUG:numba.core.byteflow:dispatch pc=368, inst=FOR_ITER(arg=94, lineno=75)
DEBUG:numba.core.byteflow:stack ['$phi368.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=464, stack=(), blockstack=(), npush=0), Edge(pc=370, stack=('$phi368.0', '$368for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=484 nstack_initial=0), State(pc_initial=500 nstack_initial=0), State(pc_initial=82 nstack_initial=1), State(pc_initial=82 nstack_initial=1), State(pc_initial=272 nstack_initial=1), State(pc_initial=306 nstack_initial=1), State(pc_initial=464 nstack_initial=0), State(pc_initial=370 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=484, inst=LOAD_GLOBAL(arg=1, lineno=84)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=486, inst=LOAD_ATTR(arg=2, lineno=84)
DEBUG:numba.core.byteflow:stack ['$484load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=488, inst=LOAD_FAST(arg=4, lineno=84)
DEBUG:numba.core.byteflow:stack ['$486load_attr.1']
DEBUG:numba.core.byteflow:dispatch pc=490, inst=LOAD_GLOBAL(arg=1, lineno=84)
DEBUG:numba.core.byteflow:stack ['$486load_attr.1', '$K488.2']
DEBUG:numba.core.byteflow:dispatch pc=492, inst=LOAD_ATTR(arg=4, lineno=84)
DEBUG:numba.core.byteflow:stack ['$486load_attr.1', '$K488.2', '$490load_global.3']
DEBUG:numba.core.byteflow:dispatch pc=494, inst=LOAD_CONST(arg=4, lineno=84)
DEBUG:numba.core.byteflow:stack ['$486load_attr.1', '$K488.2', '$492load_attr.4']
DEBUG:numba.core.byteflow:dispatch pc=496, inst=CALL_FUNCTION_KW(arg=2, lineno=84)
DEBUG:numba.core.byteflow:stack ['$486load_attr.1', '$K488.2', '$492load_attr.4', '$const494.5']
DEBUG:numba.core.byteflow:dispatch pc=498, inst=STORE_FAST(arg=3, lineno=84)
DEBUG:numba.core.byteflow:stack ['$496call_function_kw.6']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=500, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=500 nstack_initial=0), State(pc_initial=82 nstack_initial=1), State(pc_initial=82 nstack_initial=1), State(pc_initial=272 nstack_initial=1), State(pc_initial=306 nstack_initial=1), State(pc_initial=464 nstack_initial=0), State(pc_initial=370 nstack_initial=2), State(pc_initial=500 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=500, inst=LOAD_GLOBAL(arg=5, lineno=85)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=502, inst=LOAD_FAST(arg=5, lineno=85)
DEBUG:numba.core.byteflow:stack ['$500load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=504, inst=CALL_FUNCTION(arg=1, lineno=85)
DEBUG:numba.core.byteflow:stack ['$500load_global.0', '$N502.1']
DEBUG:numba.core.byteflow:dispatch pc=506, inst=GET_ITER(arg=None, lineno=85)
DEBUG:numba.core.byteflow:stack ['$504call_function.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=508, stack=('$506get_iter.3',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=82 nstack_initial=1), State(pc_initial=82 nstack_initial=1), State(pc_initial=272 nstack_initial=1), State(pc_initial=306 nstack_initial=1), State(pc_initial=464 nstack_initial=0), State(pc_initial=370 nstack_initial=2), State(pc_initial=500 nstack_initial=0), State(pc_initial=508 nstack_initial=1)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=82 nstack_initial=1), State(pc_initial=272 nstack_initial=1), State(pc_initial=306 nstack_initial=1), State(pc_initial=464 nstack_initial=0), State(pc_initial=370 nstack_initial=2), State(pc_initial=500 nstack_initial=0), State(pc_initial=508 nstack_initial=1)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=272 nstack_initial=1), State(pc_initial=306 nstack_initial=1), State(pc_initial=464 nstack_initial=0), State(pc_initial=370 nstack_initial=2), State(pc_initial=500 nstack_initial=0), State(pc_initial=508 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi272.0']
DEBUG:numba.core.byteflow:dispatch pc=272, inst=LOAD_FAST(arg=0, lineno=68)
DEBUG:numba.core.byteflow:stack ['$phi272.0']
DEBUG:numba.core.byteflow:dispatch pc=274, inst=LOAD_CONST(arg=3, lineno=68)
DEBUG:numba.core.byteflow:stack ['$phi272.0', '$X272.1']
DEBUG:numba.core.byteflow:dispatch pc=276, inst=LOAD_CONST(arg=3, lineno=68)
DEBUG:numba.core.byteflow:stack ['$phi272.0', '$X272.1', '$const274.2']
DEBUG:numba.core.byteflow:dispatch pc=278, inst=BUILD_SLICE(arg=2, lineno=68)
DEBUG:numba.core.byteflow:stack ['$phi272.0', '$X272.1', '$const274.2', '$const276.3']
DEBUG:numba.core.byteflow:dispatch pc=280, inst=LOAD_FAST(arg=7, lineno=68)
DEBUG:numba.core.byteflow:stack ['$phi272.0', '$X272.1', '$278build_slice.5']
DEBUG:numba.core.byteflow:dispatch pc=282, inst=BUILD_TUPLE(arg=2, lineno=68)
DEBUG:numba.core.byteflow:stack ['$phi272.0', '$X272.1', '$278build_slice.5', '$n280.6']
DEBUG:numba.core.byteflow:dispatch pc=284, inst=BINARY_SUBSCR(arg=None, lineno=68)
DEBUG:numba.core.byteflow:stack ['$phi272.0', '$X272.1', '$282build_tuple.7']
DEBUG:numba.core.byteflow:dispatch pc=286, inst=LOAD_FAST(arg=8, lineno=68)
DEBUG:numba.core.byteflow:stack ['$phi272.0', '$284binary_subscr.8']
DEBUG:numba.core.byteflow:dispatch pc=288, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=68)
DEBUG:numba.core.byteflow:stack ['$phi272.0', '$284binary_subscr.8', '$s286.9']
DEBUG:numba.core.byteflow:dispatch pc=290, inst=LOAD_FAST(arg=6, lineno=68)
DEBUG:numba.core.byteflow:stack ['$phi272.0', '$288binary_true_divide.10']
DEBUG:numba.core.byteflow:dispatch pc=292, inst=LOAD_CONST(arg=3, lineno=68)
DEBUG:numba.core.byteflow:stack ['$phi272.0', '$288binary_true_divide.10', '$X_norm290.11']
DEBUG:numba.core.byteflow:dispatch pc=294, inst=LOAD_CONST(arg=3, lineno=68)
DEBUG:numba.core.byteflow:stack ['$phi272.0', '$288binary_true_divide.10', '$X_norm290.11', '$const292.12']
DEBUG:numba.core.byteflow:dispatch pc=296, inst=BUILD_SLICE(arg=2, lineno=68)
DEBUG:numba.core.byteflow:stack ['$phi272.0', '$288binary_true_divide.10', '$X_norm290.11', '$const292.12', '$const294.13']
DEBUG:numba.core.byteflow:dispatch pc=298, inst=LOAD_FAST(arg=7, lineno=68)
DEBUG:numba.core.byteflow:stack ['$phi272.0', '$288binary_true_divide.10', '$X_norm290.11', '$296build_slice.15']
DEBUG:numba.core.byteflow:dispatch pc=300, inst=BUILD_TUPLE(arg=2, lineno=68)
DEBUG:numba.core.byteflow:stack ['$phi272.0', '$288binary_true_divide.10', '$X_norm290.11', '$296build_slice.15', '$n298.16']
DEBUG:numba.core.byteflow:dispatch pc=302, inst=STORE_SUBSCR(arg=None, lineno=68)
DEBUG:numba.core.byteflow:stack ['$phi272.0', '$288binary_true_divide.10', '$X_norm290.11', '$300build_tuple.17']
DEBUG:numba.core.byteflow:dispatch pc=304, inst=JUMP_ABSOLUTE(arg=226, lineno=68)
DEBUG:numba.core.byteflow:stack ['$phi272.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=226, stack=('$phi272.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=306 nstack_initial=1), State(pc_initial=464 nstack_initial=0), State(pc_initial=370 nstack_initial=2), State(pc_initial=500 nstack_initial=0), State(pc_initial=508 nstack_initial=1), State(pc_initial=226 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi306.0']
DEBUG:numba.core.byteflow:dispatch pc=306, inst=LOAD_FAST(arg=3, lineno=70)
DEBUG:numba.core.byteflow:stack ['$phi306.0']
DEBUG:numba.core.byteflow:dispatch pc=308, inst=LOAD_FAST(arg=6, lineno=70)
DEBUG:numba.core.byteflow:stack ['$phi306.0', '$v306.1']
DEBUG:numba.core.byteflow:dispatch pc=310, inst=LOAD_CONST(arg=3, lineno=70)
DEBUG:numba.core.byteflow:stack ['$phi306.0', '$v306.1', '$X_norm308.2']
DEBUG:numba.core.byteflow:dispatch pc=312, inst=LOAD_CONST(arg=3, lineno=70)
DEBUG:numba.core.byteflow:stack ['$phi306.0', '$v306.1', '$X_norm308.2', '$const310.3']
DEBUG:numba.core.byteflow:dispatch pc=314, inst=BUILD_SLICE(arg=2, lineno=70)
DEBUG:numba.core.byteflow:stack ['$phi306.0', '$v306.1', '$X_norm308.2', '$const310.3', '$const312.4']
DEBUG:numba.core.byteflow:dispatch pc=316, inst=LOAD_FAST(arg=7, lineno=70)
DEBUG:numba.core.byteflow:stack ['$phi306.0', '$v306.1', '$X_norm308.2', '$314build_slice.6']
DEBUG:numba.core.byteflow:dispatch pc=318, inst=BUILD_TUPLE(arg=2, lineno=70)
DEBUG:numba.core.byteflow:stack ['$phi306.0', '$v306.1', '$X_norm308.2', '$314build_slice.6', '$n316.7']
DEBUG:numba.core.byteflow:dispatch pc=320, inst=STORE_SUBSCR(arg=None, lineno=70)
DEBUG:numba.core.byteflow:stack ['$phi306.0', '$v306.1', '$X_norm308.2', '$318build_tuple.8']
DEBUG:numba.core.byteflow:dispatch pc=322, inst=JUMP_ABSOLUTE(arg=226, lineno=70)
DEBUG:numba.core.byteflow:stack ['$phi306.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=226, stack=('$phi306.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=464 nstack_initial=0), State(pc_initial=370 nstack_initial=2), State(pc_initial=500 nstack_initial=0), State(pc_initial=508 nstack_initial=1), State(pc_initial=226 nstack_initial=1), State(pc_initial=226 nstack_initial=1)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=370 nstack_initial=2), State(pc_initial=500 nstack_initial=0), State(pc_initial=508 nstack_initial=1), State(pc_initial=226 nstack_initial=1), State(pc_initial=226 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi370.0', '$phi370.1']
DEBUG:numba.core.byteflow:dispatch pc=370, inst=STORE_FAST(arg=7, lineno=75)
DEBUG:numba.core.byteflow:stack ['$phi370.0', '$phi370.1']
DEBUG:numba.core.byteflow:dispatch pc=372, inst=LOAD_GLOBAL(arg=1, lineno=76)
DEBUG:numba.core.byteflow:stack ['$phi370.0']
DEBUG:numba.core.byteflow:dispatch pc=374, inst=LOAD_METHOD(arg=9, lineno=76)
DEBUG:numba.core.byteflow:stack ['$phi370.0', '$372load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=376, inst=LOAD_GLOBAL(arg=1, lineno=76)
DEBUG:numba.core.byteflow:stack ['$phi370.0', '$374load_method.3']
DEBUG:numba.core.byteflow:dispatch pc=378, inst=LOAD_METHOD(arg=7, lineno=76)
DEBUG:numba.core.byteflow:stack ['$phi370.0', '$374load_method.3', '$376load_global.4']
DEBUG:numba.core.byteflow:dispatch pc=380, inst=LOAD_FAST(arg=0, lineno=76)
DEBUG:numba.core.byteflow:stack ['$phi370.0', '$374load_method.3', '$378load_method.5']
DEBUG:numba.core.byteflow:dispatch pc=382, inst=LOAD_CONST(arg=3, lineno=76)
DEBUG:numba.core.byteflow:stack ['$phi370.0', '$374load_method.3', '$378load_method.5', '$X380.6']
DEBUG:numba.core.byteflow:dispatch pc=384, inst=LOAD_CONST(arg=3, lineno=76)
DEBUG:numba.core.byteflow:stack ['$phi370.0', '$374load_method.3', '$378load_method.5', '$X380.6', '$const382.7']
DEBUG:numba.core.byteflow:dispatch pc=386, inst=BUILD_SLICE(arg=2, lineno=76)
DEBUG:numba.core.byteflow:stack ['$phi370.0', '$374load_method.3', '$378load_method.5', '$X380.6', '$const382.7', '$const384.8']
DEBUG:numba.core.byteflow:dispatch pc=388, inst=LOAD_FAST(arg=7, lineno=76)
DEBUG:numba.core.byteflow:stack ['$phi370.0', '$374load_method.3', '$378load_method.5', '$X380.6', '$386build_slice.10']
DEBUG:numba.core.byteflow:dispatch pc=390, inst=BUILD_TUPLE(arg=2, lineno=76)
DEBUG:numba.core.byteflow:stack ['$phi370.0', '$374load_method.3', '$378load_method.5', '$X380.6', '$386build_slice.10', '$n388.11']
DEBUG:numba.core.byteflow:dispatch pc=392, inst=BINARY_SUBSCR(arg=None, lineno=76)
DEBUG:numba.core.byteflow:stack ['$phi370.0', '$374load_method.3', '$378load_method.5', '$X380.6', '$390build_tuple.12']
DEBUG:numba.core.byteflow:dispatch pc=394, inst=CALL_METHOD(arg=1, lineno=76)
DEBUG:numba.core.byteflow:stack ['$phi370.0', '$374load_method.3', '$378load_method.5', '$392binary_subscr.13']
DEBUG:numba.core.byteflow:dispatch pc=396, inst=CALL_METHOD(arg=1, lineno=76)
DEBUG:numba.core.byteflow:stack ['$phi370.0', '$374load_method.3', '$394call_method.14']
DEBUG:numba.core.byteflow:dispatch pc=398, inst=STORE_FAST(arg=8, lineno=76)
DEBUG:numba.core.byteflow:stack ['$phi370.0', '$396call_method.15']
DEBUG:numba.core.byteflow:dispatch pc=400, inst=LOAD_FAST(arg=8, lineno=77)
DEBUG:numba.core.byteflow:stack ['$phi370.0']
DEBUG:numba.core.byteflow:dispatch pc=402, inst=LOAD_FAST(arg=2, lineno=77)
DEBUG:numba.core.byteflow:stack ['$phi370.0', '$s400.16']
DEBUG:numba.core.byteflow:dispatch pc=404, inst=COMPARE_OP(arg=4, lineno=77)
DEBUG:numba.core.byteflow:stack ['$phi370.0', '$s400.16', '$threshold402.17']
DEBUG:numba.core.byteflow:dispatch pc=406, inst=POP_JUMP_IF_FALSE(arg=444, lineno=77)
DEBUG:numba.core.byteflow:stack ['$phi370.0', '$404compare_op.18']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=410, stack=('$phi370.0',), blockstack=(), npush=0), Edge(pc=444, stack=('$phi370.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=500 nstack_initial=0), State(pc_initial=508 nstack_initial=1), State(pc_initial=226 nstack_initial=1), State(pc_initial=226 nstack_initial=1), State(pc_initial=410 nstack_initial=1), State(pc_initial=444 nstack_initial=1)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=508 nstack_initial=1), State(pc_initial=226 nstack_initial=1), State(pc_initial=226 nstack_initial=1), State(pc_initial=410 nstack_initial=1), State(pc_initial=444 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi508.0']
DEBUG:numba.core.byteflow:dispatch pc=508, inst=FOR_ITER(arg=140, lineno=85)
DEBUG:numba.core.byteflow:stack ['$phi508.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=650, stack=(), blockstack=(), npush=0), Edge(pc=510, stack=('$phi508.0', '$508for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=226 nstack_initial=1), State(pc_initial=226 nstack_initial=1), State(pc_initial=410 nstack_initial=1), State(pc_initial=444 nstack_initial=1), State(pc_initial=650 nstack_initial=0), State(pc_initial=510 nstack_initial=2)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=226 nstack_initial=1), State(pc_initial=410 nstack_initial=1), State(pc_initial=444 nstack_initial=1), State(pc_initial=650 nstack_initial=0), State(pc_initial=510 nstack_initial=2)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=410 nstack_initial=1), State(pc_initial=444 nstack_initial=1), State(pc_initial=650 nstack_initial=0), State(pc_initial=510 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi410.0']
DEBUG:numba.core.byteflow:dispatch pc=410, inst=LOAD_FAST(arg=0, lineno=78)
DEBUG:numba.core.byteflow:stack ['$phi410.0']
DEBUG:numba.core.byteflow:dispatch pc=412, inst=LOAD_CONST(arg=3, lineno=78)
DEBUG:numba.core.byteflow:stack ['$phi410.0', '$X410.1']
DEBUG:numba.core.byteflow:dispatch pc=414, inst=LOAD_CONST(arg=3, lineno=78)
DEBUG:numba.core.byteflow:stack ['$phi410.0', '$X410.1', '$const412.2']
DEBUG:numba.core.byteflow:dispatch pc=416, inst=BUILD_SLICE(arg=2, lineno=78)
DEBUG:numba.core.byteflow:stack ['$phi410.0', '$X410.1', '$const412.2', '$const414.3']
DEBUG:numba.core.byteflow:dispatch pc=418, inst=LOAD_FAST(arg=7, lineno=78)
DEBUG:numba.core.byteflow:stack ['$phi410.0', '$X410.1', '$416build_slice.5']
DEBUG:numba.core.byteflow:dispatch pc=420, inst=BUILD_TUPLE(arg=2, lineno=78)
DEBUG:numba.core.byteflow:stack ['$phi410.0', '$X410.1', '$416build_slice.5', '$n418.6']
DEBUG:numba.core.byteflow:dispatch pc=422, inst=BINARY_SUBSCR(arg=None, lineno=78)
DEBUG:numba.core.byteflow:stack ['$phi410.0', '$X410.1', '$420build_tuple.7']
DEBUG:numba.core.byteflow:dispatch pc=424, inst=LOAD_FAST(arg=8, lineno=78)
DEBUG:numba.core.byteflow:stack ['$phi410.0', '$422binary_subscr.8']
DEBUG:numba.core.byteflow:dispatch pc=426, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=78)
DEBUG:numba.core.byteflow:stack ['$phi410.0', '$422binary_subscr.8', '$s424.9']
DEBUG:numba.core.byteflow:dispatch pc=428, inst=LOAD_FAST(arg=6, lineno=78)
DEBUG:numba.core.byteflow:stack ['$phi410.0', '$426binary_true_divide.10']
DEBUG:numba.core.byteflow:dispatch pc=430, inst=LOAD_CONST(arg=3, lineno=78)
DEBUG:numba.core.byteflow:stack ['$phi410.0', '$426binary_true_divide.10', '$X_norm428.11']
DEBUG:numba.core.byteflow:dispatch pc=432, inst=LOAD_CONST(arg=3, lineno=78)
DEBUG:numba.core.byteflow:stack ['$phi410.0', '$426binary_true_divide.10', '$X_norm428.11', '$const430.12']
DEBUG:numba.core.byteflow:dispatch pc=434, inst=BUILD_SLICE(arg=2, lineno=78)
DEBUG:numba.core.byteflow:stack ['$phi410.0', '$426binary_true_divide.10', '$X_norm428.11', '$const430.12', '$const432.13']
DEBUG:numba.core.byteflow:dispatch pc=436, inst=LOAD_FAST(arg=7, lineno=78)
DEBUG:numba.core.byteflow:stack ['$phi410.0', '$426binary_true_divide.10', '$X_norm428.11', '$434build_slice.15']
DEBUG:numba.core.byteflow:dispatch pc=438, inst=BUILD_TUPLE(arg=2, lineno=78)
DEBUG:numba.core.byteflow:stack ['$phi410.0', '$426binary_true_divide.10', '$X_norm428.11', '$434build_slice.15', '$n436.16']
DEBUG:numba.core.byteflow:dispatch pc=440, inst=STORE_SUBSCR(arg=None, lineno=78)
DEBUG:numba.core.byteflow:stack ['$phi410.0', '$426binary_true_divide.10', '$X_norm428.11', '$438build_tuple.17']
DEBUG:numba.core.byteflow:dispatch pc=442, inst=JUMP_FORWARD(arg=16, lineno=78)
DEBUG:numba.core.byteflow:stack ['$phi410.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=460, stack=('$phi410.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=444 nstack_initial=1), State(pc_initial=650 nstack_initial=0), State(pc_initial=510 nstack_initial=2), State(pc_initial=460 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi444.0']
DEBUG:numba.core.byteflow:dispatch pc=444, inst=LOAD_FAST(arg=3, lineno=80)
DEBUG:numba.core.byteflow:stack ['$phi444.0']
DEBUG:numba.core.byteflow:dispatch pc=446, inst=LOAD_FAST(arg=6, lineno=80)
DEBUG:numba.core.byteflow:stack ['$phi444.0', '$v444.1']
DEBUG:numba.core.byteflow:dispatch pc=448, inst=LOAD_CONST(arg=3, lineno=80)
DEBUG:numba.core.byteflow:stack ['$phi444.0', '$v444.1', '$X_norm446.2']
DEBUG:numba.core.byteflow:dispatch pc=450, inst=LOAD_CONST(arg=3, lineno=80)
DEBUG:numba.core.byteflow:stack ['$phi444.0', '$v444.1', '$X_norm446.2', '$const448.3']
DEBUG:numba.core.byteflow:dispatch pc=452, inst=BUILD_SLICE(arg=2, lineno=80)
DEBUG:numba.core.byteflow:stack ['$phi444.0', '$v444.1', '$X_norm446.2', '$const448.3', '$const450.4']
DEBUG:numba.core.byteflow:dispatch pc=454, inst=LOAD_FAST(arg=7, lineno=80)
DEBUG:numba.core.byteflow:stack ['$phi444.0', '$v444.1', '$X_norm446.2', '$452build_slice.6']
DEBUG:numba.core.byteflow:dispatch pc=456, inst=BUILD_TUPLE(arg=2, lineno=80)
DEBUG:numba.core.byteflow:stack ['$phi444.0', '$v444.1', '$X_norm446.2', '$452build_slice.6', '$n454.7']
DEBUG:numba.core.byteflow:dispatch pc=458, inst=STORE_SUBSCR(arg=None, lineno=80)
DEBUG:numba.core.byteflow:stack ['$phi444.0', '$v444.1', '$X_norm446.2', '$456build_tuple.8']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=460, stack=('$phi444.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=650 nstack_initial=0), State(pc_initial=510 nstack_initial=2), State(pc_initial=460 nstack_initial=1), State(pc_initial=460 nstack_initial=1)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=510 nstack_initial=2), State(pc_initial=460 nstack_initial=1), State(pc_initial=460 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi510.0', '$phi510.1']
DEBUG:numba.core.byteflow:dispatch pc=510, inst=STORE_FAST(arg=7, lineno=85)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$phi510.1']
DEBUG:numba.core.byteflow:dispatch pc=512, inst=LOAD_GLOBAL(arg=1, lineno=86)
DEBUG:numba.core.byteflow:stack ['$phi510.0']
DEBUG:numba.core.byteflow:dispatch pc=514, inst=LOAD_METHOD(arg=6, lineno=86)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$512load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=516, inst=LOAD_FAST(arg=0, lineno=86)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$514load_method.3']
DEBUG:numba.core.byteflow:dispatch pc=518, inst=LOAD_CONST(arg=3, lineno=86)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$514load_method.3', '$X516.4']
DEBUG:numba.core.byteflow:dispatch pc=520, inst=LOAD_CONST(arg=3, lineno=86)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$514load_method.3', '$X516.4', '$const518.5']
DEBUG:numba.core.byteflow:dispatch pc=522, inst=BUILD_SLICE(arg=2, lineno=86)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$514load_method.3', '$X516.4', '$const518.5', '$const520.6']
DEBUG:numba.core.byteflow:dispatch pc=524, inst=LOAD_FAST(arg=7, lineno=86)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$514load_method.3', '$X516.4', '$522build_slice.8']
DEBUG:numba.core.byteflow:dispatch pc=526, inst=BUILD_TUPLE(arg=2, lineno=86)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$514load_method.3', '$X516.4', '$522build_slice.8', '$n524.9']
DEBUG:numba.core.byteflow:dispatch pc=528, inst=BINARY_SUBSCR(arg=None, lineno=86)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$514load_method.3', '$X516.4', '$526build_tuple.10']
DEBUG:numba.core.byteflow:dispatch pc=530, inst=CALL_METHOD(arg=1, lineno=86)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$514load_method.3', '$528binary_subscr.11']
DEBUG:numba.core.byteflow:dispatch pc=532, inst=LOAD_FAST(arg=4, lineno=86)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$530call_method.12']
DEBUG:numba.core.byteflow:dispatch pc=534, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=86)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$530call_method.12', '$K532.13']
DEBUG:numba.core.byteflow:dispatch pc=536, inst=STORE_FAST(arg=9, lineno=86)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$534binary_true_divide.14']
DEBUG:numba.core.byteflow:dispatch pc=538, inst=LOAD_GLOBAL(arg=1, lineno=87)
DEBUG:numba.core.byteflow:stack ['$phi510.0']
DEBUG:numba.core.byteflow:dispatch pc=540, inst=LOAD_METHOD(arg=8, lineno=87)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$538load_global.15']
DEBUG:numba.core.byteflow:dispatch pc=542, inst=LOAD_GLOBAL(arg=1, lineno=87)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$540load_method.16']
DEBUG:numba.core.byteflow:dispatch pc=544, inst=LOAD_METHOD(arg=6, lineno=87)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$540load_method.16', '$542load_global.17']
DEBUG:numba.core.byteflow:dispatch pc=546, inst=LOAD_FAST(arg=0, lineno=87)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$540load_method.16', '$544load_method.18']
DEBUG:numba.core.byteflow:dispatch pc=548, inst=LOAD_CONST(arg=3, lineno=87)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$540load_method.16', '$544load_method.18', '$X546.19']
DEBUG:numba.core.byteflow:dispatch pc=550, inst=LOAD_CONST(arg=3, lineno=87)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$540load_method.16', '$544load_method.18', '$X546.19', '$const548.20']
DEBUG:numba.core.byteflow:dispatch pc=552, inst=BUILD_SLICE(arg=2, lineno=87)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$540load_method.16', '$544load_method.18', '$X546.19', '$const548.20', '$const550.21']
DEBUG:numba.core.byteflow:dispatch pc=554, inst=LOAD_FAST(arg=7, lineno=87)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$540load_method.16', '$544load_method.18', '$X546.19', '$552build_slice.23']
DEBUG:numba.core.byteflow:dispatch pc=556, inst=BUILD_TUPLE(arg=2, lineno=87)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$540load_method.16', '$544load_method.18', '$X546.19', '$552build_slice.23', '$n554.24']
DEBUG:numba.core.byteflow:dispatch pc=558, inst=BINARY_SUBSCR(arg=None, lineno=87)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$540load_method.16', '$544load_method.18', '$X546.19', '$556build_tuple.25']
DEBUG:numba.core.byteflow:dispatch pc=560, inst=LOAD_FAST(arg=9, lineno=87)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$540load_method.16', '$544load_method.18', '$558binary_subscr.26']
DEBUG:numba.core.byteflow:dispatch pc=562, inst=BINARY_SUBTRACT(arg=None, lineno=87)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$540load_method.16', '$544load_method.18', '$558binary_subscr.26', '$mu560.27']
DEBUG:numba.core.byteflow:dispatch pc=564, inst=LOAD_CONST(arg=6, lineno=87)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$540load_method.16', '$544load_method.18', '$562binary_subtract.28']
DEBUG:numba.core.byteflow:dispatch pc=566, inst=BINARY_POWER(arg=None, lineno=87)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$540load_method.16', '$544load_method.18', '$562binary_subtract.28', '$const564.29']
DEBUG:numba.core.byteflow:dispatch pc=568, inst=CALL_METHOD(arg=1, lineno=87)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$540load_method.16', '$544load_method.18', '$566binary_power.30']
DEBUG:numba.core.byteflow:dispatch pc=570, inst=LOAD_FAST(arg=4, lineno=87)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$540load_method.16', '$568call_method.31']
DEBUG:numba.core.byteflow:dispatch pc=572, inst=LOAD_CONST(arg=9, lineno=87)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$540load_method.16', '$568call_method.31', '$K570.32']
DEBUG:numba.core.byteflow:dispatch pc=574, inst=BINARY_SUBTRACT(arg=None, lineno=87)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$540load_method.16', '$568call_method.31', '$K570.32', '$const572.33']
DEBUG:numba.core.byteflow:dispatch pc=576, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=87)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$540load_method.16', '$568call_method.31', '$574binary_subtract.34']
DEBUG:numba.core.byteflow:dispatch pc=578, inst=CALL_METHOD(arg=1, lineno=87)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$540load_method.16', '$576binary_true_divide.35']
DEBUG:numba.core.byteflow:dispatch pc=580, inst=STORE_FAST(arg=10, lineno=87)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$578call_method.36']
DEBUG:numba.core.byteflow:dispatch pc=582, inst=LOAD_FAST(arg=10, lineno=88)
DEBUG:numba.core.byteflow:stack ['$phi510.0']
DEBUG:numba.core.byteflow:dispatch pc=584, inst=LOAD_FAST(arg=2, lineno=88)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$sigma582.37']
DEBUG:numba.core.byteflow:dispatch pc=586, inst=COMPARE_OP(arg=4, lineno=88)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$sigma582.37', '$threshold584.38']
DEBUG:numba.core.byteflow:dispatch pc=588, inst=POP_JUMP_IF_FALSE(arg=630, lineno=88)
DEBUG:numba.core.byteflow:stack ['$phi510.0', '$586compare_op.39']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=592, stack=('$phi510.0',), blockstack=(), npush=0), Edge(pc=630, stack=('$phi510.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=460 nstack_initial=1), State(pc_initial=460 nstack_initial=1), State(pc_initial=592 nstack_initial=1), State(pc_initial=630 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi460.0']
DEBUG:numba.core.byteflow:dispatch pc=460, inst=JUMP_ABSOLUTE(arg=368, lineno=80)
DEBUG:numba.core.byteflow:stack ['$phi460.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=368, stack=('$phi460.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=460 nstack_initial=1), State(pc_initial=592 nstack_initial=1), State(pc_initial=630 nstack_initial=1), State(pc_initial=368 nstack_initial=1)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=592 nstack_initial=1), State(pc_initial=630 nstack_initial=1), State(pc_initial=368 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi592.0']
DEBUG:numba.core.byteflow:dispatch pc=592, inst=LOAD_FAST(arg=0, lineno=89)
DEBUG:numba.core.byteflow:stack ['$phi592.0']
DEBUG:numba.core.byteflow:dispatch pc=594, inst=LOAD_CONST(arg=3, lineno=89)
DEBUG:numba.core.byteflow:stack ['$phi592.0', '$X592.1']
DEBUG:numba.core.byteflow:dispatch pc=596, inst=LOAD_CONST(arg=3, lineno=89)
DEBUG:numba.core.byteflow:stack ['$phi592.0', '$X592.1', '$const594.2']
DEBUG:numba.core.byteflow:dispatch pc=598, inst=BUILD_SLICE(arg=2, lineno=89)
DEBUG:numba.core.byteflow:stack ['$phi592.0', '$X592.1', '$const594.2', '$const596.3']
DEBUG:numba.core.byteflow:dispatch pc=600, inst=LOAD_FAST(arg=7, lineno=89)
DEBUG:numba.core.byteflow:stack ['$phi592.0', '$X592.1', '$598build_slice.5']
DEBUG:numba.core.byteflow:dispatch pc=602, inst=BUILD_TUPLE(arg=2, lineno=89)
DEBUG:numba.core.byteflow:stack ['$phi592.0', '$X592.1', '$598build_slice.5', '$n600.6']
DEBUG:numba.core.byteflow:dispatch pc=604, inst=BINARY_SUBSCR(arg=None, lineno=89)
DEBUG:numba.core.byteflow:stack ['$phi592.0', '$X592.1', '$602build_tuple.7']
DEBUG:numba.core.byteflow:dispatch pc=606, inst=LOAD_FAST(arg=9, lineno=89)
DEBUG:numba.core.byteflow:stack ['$phi592.0', '$604binary_subscr.8']
DEBUG:numba.core.byteflow:dispatch pc=608, inst=BINARY_SUBTRACT(arg=None, lineno=89)
DEBUG:numba.core.byteflow:stack ['$phi592.0', '$604binary_subscr.8', '$mu606.9']
DEBUG:numba.core.byteflow:dispatch pc=610, inst=LOAD_FAST(arg=10, lineno=89)
DEBUG:numba.core.byteflow:stack ['$phi592.0', '$608binary_subtract.10']
DEBUG:numba.core.byteflow:dispatch pc=612, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=89)
DEBUG:numba.core.byteflow:stack ['$phi592.0', '$608binary_subtract.10', '$sigma610.11']
DEBUG:numba.core.byteflow:dispatch pc=614, inst=LOAD_FAST(arg=6, lineno=89)
DEBUG:numba.core.byteflow:stack ['$phi592.0', '$612binary_true_divide.12']
DEBUG:numba.core.byteflow:dispatch pc=616, inst=LOAD_CONST(arg=3, lineno=89)
DEBUG:numba.core.byteflow:stack ['$phi592.0', '$612binary_true_divide.12', '$X_norm614.13']
DEBUG:numba.core.byteflow:dispatch pc=618, inst=LOAD_CONST(arg=3, lineno=89)
DEBUG:numba.core.byteflow:stack ['$phi592.0', '$612binary_true_divide.12', '$X_norm614.13', '$const616.14']
DEBUG:numba.core.byteflow:dispatch pc=620, inst=BUILD_SLICE(arg=2, lineno=89)
DEBUG:numba.core.byteflow:stack ['$phi592.0', '$612binary_true_divide.12', '$X_norm614.13', '$const616.14', '$const618.15']
DEBUG:numba.core.byteflow:dispatch pc=622, inst=LOAD_FAST(arg=7, lineno=89)
DEBUG:numba.core.byteflow:stack ['$phi592.0', '$612binary_true_divide.12', '$X_norm614.13', '$620build_slice.17']
DEBUG:numba.core.byteflow:dispatch pc=624, inst=BUILD_TUPLE(arg=2, lineno=89)
DEBUG:numba.core.byteflow:stack ['$phi592.0', '$612binary_true_divide.12', '$X_norm614.13', '$620build_slice.17', '$n622.18']
DEBUG:numba.core.byteflow:dispatch pc=626, inst=STORE_SUBSCR(arg=None, lineno=89)
DEBUG:numba.core.byteflow:stack ['$phi592.0', '$612binary_true_divide.12', '$X_norm614.13', '$624build_tuple.19']
DEBUG:numba.core.byteflow:dispatch pc=628, inst=JUMP_FORWARD(arg=16, lineno=89)
DEBUG:numba.core.byteflow:stack ['$phi592.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=646, stack=('$phi592.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=630 nstack_initial=1), State(pc_initial=368 nstack_initial=1), State(pc_initial=646 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi630.0']
DEBUG:numba.core.byteflow:dispatch pc=630, inst=LOAD_FAST(arg=3, lineno=91)
DEBUG:numba.core.byteflow:stack ['$phi630.0']
DEBUG:numba.core.byteflow:dispatch pc=632, inst=LOAD_FAST(arg=6, lineno=91)
DEBUG:numba.core.byteflow:stack ['$phi630.0', '$v630.1']
DEBUG:numba.core.byteflow:dispatch pc=634, inst=LOAD_CONST(arg=3, lineno=91)
DEBUG:numba.core.byteflow:stack ['$phi630.0', '$v630.1', '$X_norm632.2']
DEBUG:numba.core.byteflow:dispatch pc=636, inst=LOAD_CONST(arg=3, lineno=91)
DEBUG:numba.core.byteflow:stack ['$phi630.0', '$v630.1', '$X_norm632.2', '$const634.3']
DEBUG:numba.core.byteflow:dispatch pc=638, inst=BUILD_SLICE(arg=2, lineno=91)
DEBUG:numba.core.byteflow:stack ['$phi630.0', '$v630.1', '$X_norm632.2', '$const634.3', '$const636.4']
DEBUG:numba.core.byteflow:dispatch pc=640, inst=LOAD_FAST(arg=7, lineno=91)
DEBUG:numba.core.byteflow:stack ['$phi630.0', '$v630.1', '$X_norm632.2', '$638build_slice.6']
DEBUG:numba.core.byteflow:dispatch pc=642, inst=BUILD_TUPLE(arg=2, lineno=91)
DEBUG:numba.core.byteflow:stack ['$phi630.0', '$v630.1', '$X_norm632.2', '$638build_slice.6', '$n640.7']
DEBUG:numba.core.byteflow:dispatch pc=644, inst=STORE_SUBSCR(arg=None, lineno=91)
DEBUG:numba.core.byteflow:stack ['$phi630.0', '$v630.1', '$X_norm632.2', '$642build_tuple.8']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=646, stack=('$phi630.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=368 nstack_initial=1), State(pc_initial=646 nstack_initial=1), State(pc_initial=646 nstack_initial=1)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=646 nstack_initial=1), State(pc_initial=646 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi646.0']
DEBUG:numba.core.byteflow:dispatch pc=646, inst=JUMP_ABSOLUTE(arg=508, lineno=91)
DEBUG:numba.core.byteflow:stack ['$phi646.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=508, stack=('$phi646.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=646 nstack_initial=1), State(pc_initial=508 nstack_initial=1)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=508 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=0): set(),
             State(pc_initial=54 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=1): {'$phi82.0'},
             State(pc_initial=84 nstack_initial=2): {'$phi84.1'},
             State(pc_initial=122 nstack_initial=1): set(),
             State(pc_initial=156 nstack_initial=1): set(),
             State(pc_initial=174 nstack_initial=0): set(),
             State(pc_initial=184 nstack_initial=0): set(),
             State(pc_initial=192 nstack_initial=0): set(),
             State(pc_initial=218 nstack_initial=0): set(),
             State(pc_initial=226 nstack_initial=1): {'$phi226.0'},
             State(pc_initial=228 nstack_initial=2): {'$phi228.1'},
             State(pc_initial=272 nstack_initial=1): set(),
             State(pc_initial=306 nstack_initial=1): set(),
             State(pc_initial=324 nstack_initial=0): set(),
             State(pc_initial=334 nstack_initial=0): set(),
             State(pc_initial=344 nstack_initial=0): set(),
             State(pc_initial=360 nstack_initial=0): set(),
             State(pc_initial=368 nstack_initial=1): {'$phi368.0'},
             State(pc_initial=370 nstack_initial=2): {'$phi370.1'},
             State(pc_initial=410 nstack_initial=1): set(),
             State(pc_initial=444 nstack_initial=1): set(),
             State(pc_initial=460 nstack_initial=1): set(),
             State(pc_initial=464 nstack_initial=0): set(),
             State(pc_initial=474 nstack_initial=0): set(),
             State(pc_initial=484 nstack_initial=0): set(),
             State(pc_initial=500 nstack_initial=0): set(),
             State(pc_initial=508 nstack_initial=1): {'$phi508.0'},
             State(pc_initial=510 nstack_initial=2): {'$phi510.1'},
             State(pc_initial=592 nstack_initial=1): set(),
             State(pc_initial=630 nstack_initial=1): set(),
             State(pc_initial=646 nstack_initial=1): set(),
             State(pc_initial=650 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi226.0': State(pc_initial=218 nstack_initial=0),
 '$phi228.1': State(pc_initial=226 nstack_initial=1),
 '$phi368.0': State(pc_initial=360 nstack_initial=0),
 '$phi370.1': State(pc_initial=368 nstack_initial=1),
 '$phi508.0': State(pc_initial=500 nstack_initial=0),
 '$phi510.1': State(pc_initial=508 nstack_initial=1),
 '$phi82.0': State(pc_initial=74 nstack_initial=0),
 '$phi84.1': State(pc_initial=82 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi122.0': {('$phi84.0', State(pc_initial=84 nstack_initial=2))},
             '$phi156.0': {('$phi84.0', State(pc_initial=84 nstack_initial=2))},
             '$phi226.0': {('$224get_iter.3',
                            State(pc_initial=218 nstack_initial=0)),
                           ('$phi272.0',
                            State(pc_initial=272 nstack_initial=1)),
                           ('$phi306.0',
                            State(pc_initial=306 nstack_initial=1))},
             '$phi228.0': {('$phi226.0',
                            State(pc_initial=226 nstack_initial=1))},
             '$phi228.1': {('$226for_iter.2',
                            State(pc_initial=226 nstack_initial=1))},
             '$phi272.0': {('$phi228.0',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi306.0': {('$phi228.0',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi368.0': {('$366get_iter.3',
                            State(pc_initial=360 nstack_initial=0)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=1))},
             '$phi370.0': {('$phi368.0',
                            State(pc_initial=368 nstack_initial=1))},
             '$phi370.1': {('$368for_iter.2',
                            State(pc_initial=368 nstack_initial=1))},
             '$phi410.0': {('$phi370.0',
                            State(pc_initial=370 nstack_initial=2))},
             '$phi444.0': {('$phi370.0',
                            State(pc_initial=370 nstack_initial=2))},
             '$phi460.0': {('$phi410.0',
                            State(pc_initial=410 nstack_initial=1)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=1))},
             '$phi508.0': {('$506get_iter.3',
                            State(pc_initial=500 nstack_initial=0)),
                           ('$phi646.0',
                            State(pc_initial=646 nstack_initial=1))},
             '$phi510.0': {('$phi508.0',
                            State(pc_initial=508 nstack_initial=1))},
             '$phi510.1': {('$508for_iter.2',
                            State(pc_initial=508 nstack_initial=1))},
             '$phi592.0': {('$phi510.0',
                            State(pc_initial=510 nstack_initial=2))},
             '$phi630.0': {('$phi510.0',
                            State(pc_initial=510 nstack_initial=2))},
             '$phi646.0': {('$phi592.0',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi630.0',
                            State(pc_initial=630 nstack_initial=1))},
             '$phi82.0': {('$80get_iter.3',
                           State(pc_initial=74 nstack_initial=0)),
                          ('$phi122.0', State(pc_initial=122 nstack_initial=1)),
                          ('$phi156.0',
                           State(pc_initial=156 nstack_initial=1))},
             '$phi84.0': {('$phi82.0', State(pc_initial=82 nstack_initial=1))},
             '$phi84.1': {('$82for_iter.2',
                           State(pc_initial=82 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi122.0': {('$phi82.0', State(pc_initial=82 nstack_initial=1))},
             '$phi156.0': {('$phi82.0', State(pc_initial=82 nstack_initial=1))},
             '$phi226.0': {('$224get_iter.3',
                            State(pc_initial=218 nstack_initial=0)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi228.0': {('$224get_iter.3',
                            State(pc_initial=218 nstack_initial=0)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=2))},
             '$phi228.1': {('$226for_iter.2',
                            State(pc_initial=226 nstack_initial=1))},
             '$phi272.0': {('$224get_iter.3',
                            State(pc_initial=218 nstack_initial=0))},
             '$phi306.0': {('$224get_iter.3',
                            State(pc_initial=218 nstack_initial=0))},
             '$phi368.0': {('$366get_iter.3',
                            State(pc_initial=360 nstack_initial=0)),
                           ('$phi410.0',
                            State(pc_initial=410 nstack_initial=1)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=1))},
             '$phi370.0': {('$366get_iter.3',
                            State(pc_initial=360 nstack_initial=0)),
                           ('$phi410.0',
                            State(pc_initial=410 nstack_initial=1)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=1))},
             '$phi370.1': {('$368for_iter.2',
                            State(pc_initial=368 nstack_initial=1))},
             '$phi410.0': {('$366get_iter.3',
                            State(pc_initial=360 nstack_initial=0)),
                           ('$phi410.0',
                            State(pc_initial=410 nstack_initial=1)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=1))},
             '$phi444.0': {('$366get_iter.3',
                            State(pc_initial=360 nstack_initial=0)),
                           ('$phi410.0',
                            State(pc_initial=410 nstack_initial=1)),
                           ('$phi444.0',
                            State(pc_initial=444 nstack_initial=1))},
             '$phi460.0': {('$366get_iter.3',
                            State(pc_initial=360 nstack_initial=0))},
             '$phi508.0': {('$506get_iter.3',
                            State(pc_initial=500 nstack_initial=0)),
                           ('$phi592.0',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi630.0',
                            State(pc_initial=630 nstack_initial=1))},
             '$phi510.0': {('$506get_iter.3',
                            State(pc_initial=500 nstack_initial=0)),
                           ('$phi592.0',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi630.0',
                            State(pc_initial=630 nstack_initial=1))},
             '$phi510.1': {('$508for_iter.2',
                            State(pc_initial=508 nstack_initial=1))},
             '$phi592.0': {('$506get_iter.3',
                            State(pc_initial=500 nstack_initial=0)),
                           ('$phi592.0',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi630.0',
                            State(pc_initial=630 nstack_initial=1))},
             '$phi630.0': {('$506get_iter.3',
                            State(pc_initial=500 nstack_initial=0)),
                           ('$phi592.0',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi630.0',
                            State(pc_initial=630 nstack_initial=1))},
             '$phi646.0': {('$506get_iter.3',
                            State(pc_initial=500 nstack_initial=0))},
             '$phi82.0': {('$80get_iter.3',
                           State(pc_initial=74 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=1))},
             '$phi84.0': {('$80get_iter.3',
                           State(pc_initial=74 nstack_initial=0))},
             '$phi84.1': {('$82for_iter.2',
                           State(pc_initial=82 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi122.0': {('$80get_iter.3',
                            State(pc_initial=74 nstack_initial=0))},
             '$phi156.0': {('$80get_iter.3',
                            State(pc_initial=74 nstack_initial=0))},
             '$phi226.0': {('$224get_iter.3',
                            State(pc_initial=218 nstack_initial=0))},
             '$phi228.0': {('$224get_iter.3',
                            State(pc_initial=218 nstack_initial=0))},
             '$phi228.1': {('$226for_iter.2',
                            State(pc_initial=226 nstack_initial=1))},
             '$phi272.0': {('$224get_iter.3',
                            State(pc_initial=218 nstack_initial=0))},
             '$phi306.0': {('$224get_iter.3',
                            State(pc_initial=218 nstack_initial=0))},
             '$phi368.0': {('$366get_iter.3',
                            State(pc_initial=360 nstack_initial=0))},
             '$phi370.0': {('$366get_iter.3',
                            State(pc_initial=360 nstack_initial=0))},
             '$phi370.1': {('$368for_iter.2',
                            State(pc_initial=368 nstack_initial=1))},
             '$phi410.0': {('$366get_iter.3',
                            State(pc_initial=360 nstack_initial=0))},
             '$phi444.0': {('$366get_iter.3',
                            State(pc_initial=360 nstack_initial=0))},
             '$phi460.0': {('$366get_iter.3',
                            State(pc_initial=360 nstack_initial=0))},
             '$phi508.0': {('$506get_iter.3',
                            State(pc_initial=500 nstack_initial=0))},
             '$phi510.0': {('$506get_iter.3',
                            State(pc_initial=500 nstack_initial=0))},
             '$phi510.1': {('$508for_iter.2',
                            State(pc_initial=508 nstack_initial=1))},
             '$phi592.0': {('$506get_iter.3',
                            State(pc_initial=500 nstack_initial=0))},
             '$phi630.0': {('$506get_iter.3',
                            State(pc_initial=500 nstack_initial=0))},
             '$phi646.0': {('$506get_iter.3',
                            State(pc_initial=500 nstack_initial=0))},
             '$phi82.0': {('$80get_iter.3',
                           State(pc_initial=74 nstack_initial=0))},
             '$phi84.0': {('$80get_iter.3',
                           State(pc_initial=74 nstack_initial=0))},
             '$phi84.1': {('$82for_iter.2',
                           State(pc_initial=82 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi122.0': {('$80get_iter.3',
                            State(pc_initial=74 nstack_initial=0))},
             '$phi156.0': {('$80get_iter.3',
                            State(pc_initial=74 nstack_initial=0))},
             '$phi226.0': {('$224get_iter.3',
                            State(pc_initial=218 nstack_initial=0))},
             '$phi228.0': {('$224get_iter.3',
                            State(pc_initial=218 nstack_initial=0))},
             '$phi228.1': {('$226for_iter.2',
                            State(pc_initial=226 nstack_initial=1))},
             '$phi272.0': {('$224get_iter.3',
                            State(pc_initial=218 nstack_initial=0))},
             '$phi306.0': {('$224get_iter.3',
                            State(pc_initial=218 nstack_initial=0))},
             '$phi368.0': {('$366get_iter.3',
                            State(pc_initial=360 nstack_initial=0))},
             '$phi370.0': {('$366get_iter.3',
                            State(pc_initial=360 nstack_initial=0))},
             '$phi370.1': {('$368for_iter.2',
                            State(pc_initial=368 nstack_initial=1))},
             '$phi410.0': {('$366get_iter.3',
                            State(pc_initial=360 nstack_initial=0))},
             '$phi444.0': {('$366get_iter.3',
                            State(pc_initial=360 nstack_initial=0))},
             '$phi460.0': {('$366get_iter.3',
                            State(pc_initial=360 nstack_initial=0))},
             '$phi508.0': {('$506get_iter.3',
                            State(pc_initial=500 nstack_initial=0))},
             '$phi510.0': {('$506get_iter.3',
                            State(pc_initial=500 nstack_initial=0))},
             '$phi510.1': {('$508for_iter.2',
                            State(pc_initial=508 nstack_initial=1))},
             '$phi592.0': {('$506get_iter.3',
                            State(pc_initial=500 nstack_initial=0))},
             '$phi630.0': {('$506get_iter.3',
                            State(pc_initial=500 nstack_initial=0))},
             '$phi646.0': {('$506get_iter.3',
                            State(pc_initial=500 nstack_initial=0))},
             '$phi82.0': {('$80get_iter.3',
                           State(pc_initial=74 nstack_initial=0))},
             '$phi84.0': {('$80get_iter.3',
                           State(pc_initial=74 nstack_initial=0))},
             '$phi84.1': {('$82for_iter.2',
                           State(pc_initial=82 nstack_initial=1))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi226.0': {('$224get_iter.3', State(pc_initial=218 nstack_initial=0))},
 '$phi228.1': {('$226for_iter.2', State(pc_initial=226 nstack_initial=1))},
 '$phi368.0': {('$366get_iter.3', State(pc_initial=360 nstack_initial=0))},
 '$phi370.1': {('$368for_iter.2', State(pc_initial=368 nstack_initial=1))},
 '$phi508.0': {('$506get_iter.3', State(pc_initial=500 nstack_initial=0))},
 '$phi510.1': {('$508for_iter.2', State(pc_initial=508 nstack_initial=1))},
 '$phi82.0': {('$80get_iter.3', State(pc_initial=74 nstack_initial=0))},
 '$phi84.1': {('$82for_iter.2', State(pc_initial=82 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=74 nstack_initial=0): {'$phi82.0': '$80get_iter.3'},
             State(pc_initial=82 nstack_initial=1): {'$phi84.1': '$82for_iter.2'},
             State(pc_initial=218 nstack_initial=0): {'$phi226.0': '$224get_iter.3'},
             State(pc_initial=226 nstack_initial=1): {'$phi228.1': '$226for_iter.2'},
             State(pc_initial=360 nstack_initial=0): {'$phi368.0': '$366get_iter.3'},
             State(pc_initial=368 nstack_initial=1): {'$phi370.1': '$368for_iter.2'},
             State(pc_initial=500 nstack_initial=0): {'$phi508.0': '$506get_iter.3'},
             State(pc_initial=508 nstack_initial=1): {'$phi510.1': '$508for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$norm2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$norm2.0', 'rhs': '$const4.1', 'res': '$6contains_op.2'}), (8, {'pred': '$6contains_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$assertion_error10.0'}), (12, {'exc': '$assertion_error10.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$X14.0'}), (16, {'item': '$X14.0', 'res': '$16load_attr.1'}), (18, {'iterable': '$16load_attr.1', 'stores': ['$18unpack_sequence.2', '$18unpack_sequence.3'], 'tupleobj': '$18unpack_sequence.4'}), (20, {'value': '$18unpack_sequence.2'}), (22, {'value': '$18unpack_sequence.3'}), (24, {'res': '$24load_global.5'}), (26, {'item': '$24load_global.5', 'res': '$26load_method.6'}), (28, {'res': '$K28.7'}), (30, {'res': '$N30.8'}), (32, {'items': ['$K28.7', '$N30.8'], 'res': '$32build_tuple.9'}), (34, {'func': '$26load_method.6', 'args': ['$32build_tuple.9'], 'res': '$34call_method.10'}), (36, {'value': '$34call_method.10'}), (38, {'res': '$norm38.11'}), (40, {'res': '$const40.12'}), (42, {'lhs': '$norm38.11', 'rhs': '$const40.12', 'res': '$42compare_op.13'}), (44, {'pred': '$42compare_op.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: (), 174: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=46 nstack_initial=0):
AdaptBlockInfo(insts=((46, {'res': '$v46.0'}), (48, {'res': '$const48.1'}), (50, {'lhs': '$v46.0', 'rhs': '$const48.1', 'res': '$50is_op.2'}), (52, {'pred': '$50is_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 74: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$54load_global.0'}), (56, {'item': '$54load_global.0', 'res': '$56load_attr.1'}), (58, {'res': '$K58.2'}), (60, {'res': '$60load_global.3'}), (62, {'item': '$60load_global.3', 'res': '$62load_attr.4'}), (64, {'res': '$const64.5'}), (66, {'func': '$56load_attr.1', 'args': ['$K58.2', '$62load_attr.4'], 'names': '$const64.5', 'res': '$66call_function_kw.6'}), (68, {'res': '$K68.7'}), (70, {'lhs': '$66call_function_kw.6', 'rhs': '$K68.7', 'res': '$70binary_true_divide.8'}), (72, {'value': '$70binary_true_divide.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$74load_global.0'}), (76, {'res': '$N76.1'}), (78, {'func': '$74load_global.0', 'args': ['$N76.1'], 'res': '$78call_function.2'}), (80, {'value': '$78call_function.2', 'res': '$80get_iter.3'})), outgoing_phis={'$phi82.0': '$80get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: ('$80get_iter.3',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=82 nstack_initial=1):
AdaptBlockInfo(insts=((82, {'iterator': '$phi82.0', 'pair': '$82for_iter.1', 'indval': '$82for_iter.2', 'pred': '$82for_iter.3'}),), outgoing_phis={'$phi84.1': '$82for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={174: (), 84: ('$phi82.0', '$82for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=84 nstack_initial=2):
AdaptBlockInfo(insts=((84, {'value': '$phi84.1'}), (86, {'res': '$86load_global.2'}), (88, {'item': '$86load_global.2', 'res': '$88load_method.3'}), (90, {'res': '$90load_global.4'}), (92, {'item': '$90load_global.4', 'res': '$92load_method.5'}), (94, {'res': '$X94.6'}), (96, {'res': '$const96.7'}), (98, {'res': '$const98.8'}), (100, {'start': '$const96.7', 'stop': '$const98.8', 'step': None, 'res': '$100build_slice.10', 'slicevar': '$100build_slice.9'}), (102, {'res': '$n102.11'}), (104, {'items': ['$100build_slice.10', '$n102.11'], 'res': '$104build_tuple.12'}), (106, {'index': '$104build_tuple.12', 'target': '$X94.6', 'res': '$106binary_subscr.13'}), (108, {'func': '$92load_method.5', 'args': ['$106binary_subscr.13'], 'res': '$108call_method.14'}), (110, {'func': '$88load_method.3', 'args': ['$108call_method.14'], 'res': '$110call_method.15'}), (112, {'value': '$110call_method.15'}), (114, {'res': '$s114.16'}), (116, {'res': '$threshold116.17'}), (118, {'lhs': '$s114.16', 'rhs': '$threshold116.17', 'res': '$118compare_op.18'}), (120, {'pred': '$118compare_op.18'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={122: ('$phi84.0',), 156: ('$phi84.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=122 nstack_initial=1):
AdaptBlockInfo(insts=((122, {'res': '$X122.1'}), (124, {'res': '$const124.2'}), (126, {'res': '$const126.3'}), (128, {'start': '$const124.2', 'stop': '$const126.3', 'step': None, 'res': '$128build_slice.5', 'slicevar': '$128build_slice.4'}), (130, {'res': '$n130.6'}), (132, {'items': ['$128build_slice.5', '$n130.6'], 'res': '$132build_tuple.7'}), (134, {'index': '$132build_tuple.7', 'target': '$X122.1', 'res': '$134binary_subscr.8'}), (136, {'res': '$s136.9'}), (138, {'lhs': '$134binary_subscr.8', 'rhs': '$s136.9', 'res': '$138binary_true_divide.10'}), (140, {'res': '$X_norm140.11'}), (142, {'res': '$const142.12'}), (144, {'res': '$const144.13'}), (146, {'start': '$const142.12', 'stop': '$const144.13', 'step': None, 'res': '$146build_slice.15', 'slicevar': '$146build_slice.14'}), (148, {'res': '$n148.16'}), (150, {'items': ['$146build_slice.15', '$n148.16'], 'res': '$150build_tuple.17'}), (152, {'target': '$X_norm140.11', 'index': '$150build_tuple.17', 'value': '$138binary_true_divide.10'}), (154, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: ('$phi122.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=156 nstack_initial=1):
AdaptBlockInfo(insts=((156, {'res': '$v156.1'}), (158, {'res': '$X_norm158.2'}), (160, {'res': '$const160.3'}), (162, {'res': '$const162.4'}), (164, {'start': '$const160.3', 'stop': '$const162.4', 'step': None, 'res': '$164build_slice.6', 'slicevar': '$164build_slice.5'}), (166, {'res': '$n166.7'}), (168, {'items': ['$164build_slice.6', '$n166.7'], 'res': '$168build_tuple.8'}), (170, {'target': '$X_norm158.2', 'index': '$168build_tuple.8', 'value': '$v156.1'}), (172, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: ('$phi156.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=174 nstack_initial=0):
AdaptBlockInfo(insts=((174, {'res': '$norm174.0'}), (176, {'res': '$const176.1'}), (178, {'lhs': '$norm174.0', 'rhs': '$const176.1', 'res': '$178compare_op.2'}), (180, {'pred': '$178compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={184: (), 324: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=184 nstack_initial=0):
AdaptBlockInfo(insts=((184, {'res': '$v184.0'}), (186, {'res': '$const186.1'}), (188, {'lhs': '$v184.0', 'rhs': '$const186.1', 'res': '$188is_op.2'}), (190, {'pred': '$188is_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={192: (), 218: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=192 nstack_initial=0):
AdaptBlockInfo(insts=((192, {'res': '$192load_global.0'}), (194, {'item': '$192load_global.0', 'res': '$194load_attr.1'}), (196, {'res': '$K196.2'}), (198, {'res': '$198load_global.3'}), (200, {'item': '$198load_global.3', 'res': '$200load_attr.4'}), (202, {'res': '$const202.5'}), (204, {'func': '$194load_attr.1', 'args': ['$K196.2', '$200load_attr.4'], 'names': '$const202.5', 'res': '$204call_function_kw.6'}), (206, {'res': '$206load_global.7'}), (208, {'item': '$206load_global.7', 'res': '$208load_method.8'}), (210, {'res': '$K210.9'}), (212, {'func': '$208load_method.8', 'args': ['$K210.9'], 'res': '$212call_method.10'}), (214, {'lhs': '$204call_function_kw.6', 'rhs': '$212call_method.10', 'res': '$214binary_true_divide.11'}), (216, {'value': '$214binary_true_divide.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={218: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=218 nstack_initial=0):
AdaptBlockInfo(insts=((218, {'res': '$218load_global.0'}), (220, {'res': '$N220.1'}), (222, {'func': '$218load_global.0', 'args': ['$N220.1'], 'res': '$222call_function.2'}), (224, {'value': '$222call_function.2', 'res': '$224get_iter.3'})), outgoing_phis={'$phi226.0': '$224get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={226: ('$224get_iter.3',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=226 nstack_initial=1):
AdaptBlockInfo(insts=((226, {'iterator': '$phi226.0', 'pair': '$226for_iter.1', 'indval': '$226for_iter.2', 'pred': '$226for_iter.3'}),), outgoing_phis={'$phi228.1': '$226for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={324: (), 228: ('$phi226.0', '$226for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=228 nstack_initial=2):
AdaptBlockInfo(insts=((228, {'value': '$phi228.1'}), (230, {'res': '$230load_global.2'}), (232, {'item': '$230load_global.2', 'res': '$232load_method.3'}), (234, {'res': '$234load_global.4'}), (236, {'item': '$234load_global.4', 'res': '$236load_method.5'}), (238, {'res': '$X238.6'}), (240, {'res': '$const240.7'}), (242, {'res': '$const242.8'}), (244, {'start': '$const240.7', 'stop': '$const242.8', 'step': None, 'res': '$244build_slice.10', 'slicevar': '$244build_slice.9'}), (246, {'res': '$n246.11'}), (248, {'items': ['$244build_slice.10', '$n246.11'], 'res': '$248build_tuple.12'}), (250, {'index': '$248build_tuple.12', 'target': '$X238.6', 'res': '$250binary_subscr.13'}), (252, {'res': '$const252.14'}), (254, {'lhs': '$250binary_subscr.13', 'rhs': '$const252.14', 'res': '$254binary_power.15'}), (256, {'func': '$236load_method.5', 'args': ['$254binary_power.15'], 'res': '$256call_method.16'}), (258, {'func': '$232load_method.3', 'args': ['$256call_method.16'], 'res': '$258call_method.17'}), (260, {'value': '$258call_method.17'}), (262, {'res': '$s262.18'}), (264, {'res': '$threshold264.19'}), (266, {'lhs': '$s262.18', 'rhs': '$threshold264.19', 'res': '$266compare_op.20'}), (268, {'pred': '$266compare_op.20'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={272: ('$phi228.0',), 306: ('$phi228.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=272 nstack_initial=1):
AdaptBlockInfo(insts=((272, {'res': '$X272.1'}), (274, {'res': '$const274.2'}), (276, {'res': '$const276.3'}), (278, {'start': '$const274.2', 'stop': '$const276.3', 'step': None, 'res': '$278build_slice.5', 'slicevar': '$278build_slice.4'}), (280, {'res': '$n280.6'}), (282, {'items': ['$278build_slice.5', '$n280.6'], 'res': '$282build_tuple.7'}), (284, {'index': '$282build_tuple.7', 'target': '$X272.1', 'res': '$284binary_subscr.8'}), (286, {'res': '$s286.9'}), (288, {'lhs': '$284binary_subscr.8', 'rhs': '$s286.9', 'res': '$288binary_true_divide.10'}), (290, {'res': '$X_norm290.11'}), (292, {'res': '$const292.12'}), (294, {'res': '$const294.13'}), (296, {'start': '$const292.12', 'stop': '$const294.13', 'step': None, 'res': '$296build_slice.15', 'slicevar': '$296build_slice.14'}), (298, {'res': '$n298.16'}), (300, {'items': ['$296build_slice.15', '$n298.16'], 'res': '$300build_tuple.17'}), (302, {'target': '$X_norm290.11', 'index': '$300build_tuple.17', 'value': '$288binary_true_divide.10'}), (304, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={226: ('$phi272.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=306 nstack_initial=1):
AdaptBlockInfo(insts=((306, {'res': '$v306.1'}), (308, {'res': '$X_norm308.2'}), (310, {'res': '$const310.3'}), (312, {'res': '$const312.4'}), (314, {'start': '$const310.3', 'stop': '$const312.4', 'step': None, 'res': '$314build_slice.6', 'slicevar': '$314build_slice.5'}), (316, {'res': '$n316.7'}), (318, {'items': ['$314build_slice.6', '$n316.7'], 'res': '$318build_tuple.8'}), (320, {'target': '$X_norm308.2', 'index': '$318build_tuple.8', 'value': '$v306.1'}), (322, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={226: ('$phi306.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=324 nstack_initial=0):
AdaptBlockInfo(insts=((324, {'res': '$norm324.0'}), (326, {'res': '$const326.1'}), (328, {'lhs': '$norm324.0', 'rhs': '$const326.1', 'res': '$328compare_op.2'}), (330, {'pred': '$328compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={334: (), 464: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=334 nstack_initial=0):
AdaptBlockInfo(insts=((334, {'res': '$v334.0'}), (336, {'res': '$const336.1'}), (338, {'lhs': '$v334.0', 'rhs': '$const336.1', 'res': '$338is_op.2'}), (340, {'pred': '$338is_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={344: (), 360: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=344 nstack_initial=0):
AdaptBlockInfo(insts=((344, {'res': '$344load_global.0'}), (346, {'item': '$344load_global.0', 'res': '$346load_attr.1'}), (348, {'res': '$K348.2'}), (350, {'res': '$350load_global.3'}), (352, {'item': '$350load_global.3', 'res': '$352load_attr.4'}), (354, {'res': '$const354.5'}), (356, {'func': '$346load_attr.1', 'args': ['$K348.2', '$352load_attr.4'], 'names': '$const354.5', 'res': '$356call_function_kw.6'}), (358, {'value': '$356call_function_kw.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={360: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=360 nstack_initial=0):
AdaptBlockInfo(insts=((360, {'res': '$360load_global.0'}), (362, {'res': '$N362.1'}), (364, {'func': '$360load_global.0', 'args': ['$N362.1'], 'res': '$364call_function.2'}), (366, {'value': '$364call_function.2', 'res': '$366get_iter.3'})), outgoing_phis={'$phi368.0': '$366get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={368: ('$366get_iter.3',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=368 nstack_initial=1):
AdaptBlockInfo(insts=((368, {'iterator': '$phi368.0', 'pair': '$368for_iter.1', 'indval': '$368for_iter.2', 'pred': '$368for_iter.3'}),), outgoing_phis={'$phi370.1': '$368for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={464: (), 370: ('$phi368.0', '$368for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=370 nstack_initial=2):
AdaptBlockInfo(insts=((370, {'value': '$phi370.1'}), (372, {'res': '$372load_global.2'}), (374, {'item': '$372load_global.2', 'res': '$374load_method.3'}), (376, {'res': '$376load_global.4'}), (378, {'item': '$376load_global.4', 'res': '$378load_method.5'}), (380, {'res': '$X380.6'}), (382, {'res': '$const382.7'}), (384, {'res': '$const384.8'}), (386, {'start': '$const382.7', 'stop': '$const384.8', 'step': None, 'res': '$386build_slice.10', 'slicevar': '$386build_slice.9'}), (388, {'res': '$n388.11'}), (390, {'items': ['$386build_slice.10', '$n388.11'], 'res': '$390build_tuple.12'}), (392, {'index': '$390build_tuple.12', 'target': '$X380.6', 'res': '$392binary_subscr.13'}), (394, {'func': '$378load_method.5', 'args': ['$392binary_subscr.13'], 'res': '$394call_method.14'}), (396, {'func': '$374load_method.3', 'args': ['$394call_method.14'], 'res': '$396call_method.15'}), (398, {'value': '$396call_method.15'}), (400, {'res': '$s400.16'}), (402, {'res': '$threshold402.17'}), (404, {'lhs': '$s400.16', 'rhs': '$threshold402.17', 'res': '$404compare_op.18'}), (406, {'pred': '$404compare_op.18'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={410: ('$phi370.0',), 444: ('$phi370.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=410 nstack_initial=1):
AdaptBlockInfo(insts=((410, {'res': '$X410.1'}), (412, {'res': '$const412.2'}), (414, {'res': '$const414.3'}), (416, {'start': '$const412.2', 'stop': '$const414.3', 'step': None, 'res': '$416build_slice.5', 'slicevar': '$416build_slice.4'}), (418, {'res': '$n418.6'}), (420, {'items': ['$416build_slice.5', '$n418.6'], 'res': '$420build_tuple.7'}), (422, {'index': '$420build_tuple.7', 'target': '$X410.1', 'res': '$422binary_subscr.8'}), (424, {'res': '$s424.9'}), (426, {'lhs': '$422binary_subscr.8', 'rhs': '$s424.9', 'res': '$426binary_true_divide.10'}), (428, {'res': '$X_norm428.11'}), (430, {'res': '$const430.12'}), (432, {'res': '$const432.13'}), (434, {'start': '$const430.12', 'stop': '$const432.13', 'step': None, 'res': '$434build_slice.15', 'slicevar': '$434build_slice.14'}), (436, {'res': '$n436.16'}), (438, {'items': ['$434build_slice.15', '$n436.16'], 'res': '$438build_tuple.17'}), (440, {'target': '$X_norm428.11', 'index': '$438build_tuple.17', 'value': '$426binary_true_divide.10'}), (442, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={460: ('$phi410.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=444 nstack_initial=1):
AdaptBlockInfo(insts=((444, {'res': '$v444.1'}), (446, {'res': '$X_norm446.2'}), (448, {'res': '$const448.3'}), (450, {'res': '$const450.4'}), (452, {'start': '$const448.3', 'stop': '$const450.4', 'step': None, 'res': '$452build_slice.6', 'slicevar': '$452build_slice.5'}), (454, {'res': '$n454.7'}), (456, {'items': ['$452build_slice.6', '$n454.7'], 'res': '$456build_tuple.8'}), (458, {'target': '$X_norm446.2', 'index': '$456build_tuple.8', 'value': '$v444.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={460: ('$phi444.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=460 nstack_initial=1):
AdaptBlockInfo(insts=((460, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={368: ('$phi460.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=464 nstack_initial=0):
AdaptBlockInfo(insts=((464, {'res': '$norm464.0'}), (466, {'res': '$const466.1'}), (468, {'lhs': '$norm464.0', 'rhs': '$const466.1', 'res': '$468compare_op.2'}), (470, {'pred': '$468compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={474: (), 650: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=474 nstack_initial=0):
AdaptBlockInfo(insts=((474, {'res': '$v474.0'}), (476, {'res': '$const476.1'}), (478, {'lhs': '$v474.0', 'rhs': '$const476.1', 'res': '$478is_op.2'}), (480, {'pred': '$478is_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={484: (), 500: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=484 nstack_initial=0):
AdaptBlockInfo(insts=((484, {'res': '$484load_global.0'}), (486, {'item': '$484load_global.0', 'res': '$486load_attr.1'}), (488, {'res': '$K488.2'}), (490, {'res': '$490load_global.3'}), (492, {'item': '$490load_global.3', 'res': '$492load_attr.4'}), (494, {'res': '$const494.5'}), (496, {'func': '$486load_attr.1', 'args': ['$K488.2', '$492load_attr.4'], 'names': '$const494.5', 'res': '$496call_function_kw.6'}), (498, {'value': '$496call_function_kw.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={500: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=500 nstack_initial=0):
AdaptBlockInfo(insts=((500, {'res': '$500load_global.0'}), (502, {'res': '$N502.1'}), (504, {'func': '$500load_global.0', 'args': ['$N502.1'], 'res': '$504call_function.2'}), (506, {'value': '$504call_function.2', 'res': '$506get_iter.3'})), outgoing_phis={'$phi508.0': '$506get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={508: ('$506get_iter.3',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=508 nstack_initial=1):
AdaptBlockInfo(insts=((508, {'iterator': '$phi508.0', 'pair': '$508for_iter.1', 'indval': '$508for_iter.2', 'pred': '$508for_iter.3'}),), outgoing_phis={'$phi510.1': '$508for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={650: (), 510: ('$phi508.0', '$508for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=510 nstack_initial=2):
AdaptBlockInfo(insts=((510, {'value': '$phi510.1'}), (512, {'res': '$512load_global.2'}), (514, {'item': '$512load_global.2', 'res': '$514load_method.3'}), (516, {'res': '$X516.4'}), (518, {'res': '$const518.5'}), (520, {'res': '$const520.6'}), (522, {'start': '$const518.5', 'stop': '$const520.6', 'step': None, 'res': '$522build_slice.8', 'slicevar': '$522build_slice.7'}), (524, {'res': '$n524.9'}), (526, {'items': ['$522build_slice.8', '$n524.9'], 'res': '$526build_tuple.10'}), (528, {'index': '$526build_tuple.10', 'target': '$X516.4', 'res': '$528binary_subscr.11'}), (530, {'func': '$514load_method.3', 'args': ['$528binary_subscr.11'], 'res': '$530call_method.12'}), (532, {'res': '$K532.13'}), (534, {'lhs': '$530call_method.12', 'rhs': '$K532.13', 'res': '$534binary_true_divide.14'}), (536, {'value': '$534binary_true_divide.14'}), (538, {'res': '$538load_global.15'}), (540, {'item': '$538load_global.15', 'res': '$540load_method.16'}), (542, {'res': '$542load_global.17'}), (544, {'item': '$542load_global.17', 'res': '$544load_method.18'}), (546, {'res': '$X546.19'}), (548, {'res': '$const548.20'}), (550, {'res': '$const550.21'}), (552, {'start': '$const548.20', 'stop': '$const550.21', 'step': None, 'res': '$552build_slice.23', 'slicevar': '$552build_slice.22'}), (554, {'res': '$n554.24'}), (556, {'items': ['$552build_slice.23', '$n554.24'], 'res': '$556build_tuple.25'}), (558, {'index': '$556build_tuple.25', 'target': '$X546.19', 'res': '$558binary_subscr.26'}), (560, {'res': '$mu560.27'}), (562, {'lhs': '$558binary_subscr.26', 'rhs': '$mu560.27', 'res': '$562binary_subtract.28'}), (564, {'res': '$const564.29'}), (566, {'lhs': '$562binary_subtract.28', 'rhs': '$const564.29', 'res': '$566binary_power.30'}), (568, {'func': '$544load_method.18', 'args': ['$566binary_power.30'], 'res': '$568call_method.31'}), (570, {'res': '$K570.32'}), (572, {'res': '$const572.33'}), (574, {'lhs': '$K570.32', 'rhs': '$const572.33', 'res': '$574binary_subtract.34'}), (576, {'lhs': '$568call_method.31', 'rhs': '$574binary_subtract.34', 'res': '$576binary_true_divide.35'}), (578, {'func': '$540load_method.16', 'args': ['$576binary_true_divide.35'], 'res': '$578call_method.36'}), (580, {'value': '$578call_method.36'}), (582, {'res': '$sigma582.37'}), (584, {'res': '$threshold584.38'}), (586, {'lhs': '$sigma582.37', 'rhs': '$threshold584.38', 'res': '$586compare_op.39'}), (588, {'pred': '$586compare_op.39'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={592: ('$phi510.0',), 630: ('$phi510.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=592 nstack_initial=1):
AdaptBlockInfo(insts=((592, {'res': '$X592.1'}), (594, {'res': '$const594.2'}), (596, {'res': '$const596.3'}), (598, {'start': '$const594.2', 'stop': '$const596.3', 'step': None, 'res': '$598build_slice.5', 'slicevar': '$598build_slice.4'}), (600, {'res': '$n600.6'}), (602, {'items': ['$598build_slice.5', '$n600.6'], 'res': '$602build_tuple.7'}), (604, {'index': '$602build_tuple.7', 'target': '$X592.1', 'res': '$604binary_subscr.8'}), (606, {'res': '$mu606.9'}), (608, {'lhs': '$604binary_subscr.8', 'rhs': '$mu606.9', 'res': '$608binary_subtract.10'}), (610, {'res': '$sigma610.11'}), (612, {'lhs': '$608binary_subtract.10', 'rhs': '$sigma610.11', 'res': '$612binary_true_divide.12'}), (614, {'res': '$X_norm614.13'}), (616, {'res': '$const616.14'}), (618, {'res': '$const618.15'}), (620, {'start': '$const616.14', 'stop': '$const618.15', 'step': None, 'res': '$620build_slice.17', 'slicevar': '$620build_slice.16'}), (622, {'res': '$n622.18'}), (624, {'items': ['$620build_slice.17', '$n622.18'], 'res': '$624build_tuple.19'}), (626, {'target': '$X_norm614.13', 'index': '$624build_tuple.19', 'value': '$612binary_true_divide.12'}), (628, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={646: ('$phi592.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=630 nstack_initial=1):
AdaptBlockInfo(insts=((630, {'res': '$v630.1'}), (632, {'res': '$X_norm632.2'}), (634, {'res': '$const634.3'}), (636, {'res': '$const636.4'}), (638, {'start': '$const634.3', 'stop': '$const636.4', 'step': None, 'res': '$638build_slice.6', 'slicevar': '$638build_slice.5'}), (640, {'res': '$n640.7'}), (642, {'items': ['$638build_slice.6', '$n640.7'], 'res': '$642build_tuple.8'}), (644, {'target': '$X_norm632.2', 'index': '$642build_tuple.8', 'value': '$v630.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={646: ('$phi630.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=646 nstack_initial=1):
AdaptBlockInfo(insts=((646, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={508: ('$phi646.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=650 nstack_initial=0):
AdaptBlockInfo(insts=((650, {'res': '$X_norm650.0'}), (652, {'retval': '$X_norm650.0', 'castval': '$652return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    X = arg(0, name=X)                       ['X']
    norm = arg(1, name=norm)                 ['norm']
    threshold = arg(2, name=threshold)       ['threshold']
    v = arg(3, name=v)                       ['v']
    $const_1 = const(str, 1)                 ['$const_1']
    $const_2 = const(str, 2)                 ['$const_2']
    $const_max = const(str, max)             ['$const_max']
    $const_z = const(str, z)                 ['$const_z']
    $const4.1 = build_tuple(items=[Var($const_1, c3s1_post_processing.py:47), Var($const_2, c3s1_post_processing.py:47), Var($const_max, c3s1_post_processing.py:47), Var($const_z, c3s1_post_processing.py:47)]) ['$const4.1', '$const_1', '$const_2', '$const_max', '$const_z']
    $6contains_op.2 = norm in $const4.1      ['$6contains_op.2', '$const4.1', 'norm']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6contains_op.2, func=bool8, args=(Var($6contains_op.2, c3s1_post_processing.py:47),), kws=(), vararg=None, target=None) ['$6contains_op.2', '$8pred', 'bool8']
    branch $8pred, 14, 10                    ['$8pred']
label 10:
    $assertion_error10.0 = global(AssertionError: <class 'AssertionError'>) ['$assertion_error10.0']
    raise $assertion_error10.0               ['$assertion_error10.0']
label 14:
    $16load_attr.1 = getattr(value=X, attr=shape) ['$16load_attr.1', 'X']
    $18unpack_sequence.4 = exhaust_iter(value=$16load_attr.1, count=2) ['$16load_attr.1', '$18unpack_sequence.4']
    $18unpack_sequence.2 = static_getitem(value=$18unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$18unpack_sequence.2', '$18unpack_sequence.4']
    $18unpack_sequence.3 = static_getitem(value=$18unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$18unpack_sequence.3', '$18unpack_sequence.4']
    K = $18unpack_sequence.2                 ['$18unpack_sequence.2', 'K']
    N = $18unpack_sequence.3                 ['$18unpack_sequence.3', 'N']
    $24load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$24load_global.5']
    $26load_method.6 = getattr(value=$24load_global.5, attr=zeros) ['$24load_global.5', '$26load_method.6']
    $32build_tuple.9 = build_tuple(items=[Var(K, c3s1_post_processing.py:49), Var(N, c3s1_post_processing.py:49)]) ['$32build_tuple.9', 'K', 'N']
    X_norm = call $26load_method.6($32build_tuple.9, func=$26load_method.6, args=[Var($32build_tuple.9, c3s1_post_processing.py:50)], kws=(), vararg=None, target=None) ['$26load_method.6', '$32build_tuple.9', 'X_norm']
    $const40.12 = const(str, 1)              ['$const40.12']
    $42compare_op.13 = norm == $const40.12   ['$42compare_op.13', '$const40.12', 'norm']
    bool44 = global(bool: <class 'bool'>)    ['bool44']
    $44pred = call bool44($42compare_op.13, func=bool44, args=(Var($42compare_op.13, c3s1_post_processing.py:52),), kws=(), vararg=None, target=None) ['$42compare_op.13', '$44pred', 'bool44']
    branch $44pred, 46, 174                  ['$44pred']
label 46:
    $const48.1 = const(NoneType, None)       ['$const48.1']
    $50is_op.2 = v is $const48.1             ['$50is_op.2', '$const48.1', 'v']
    bool52 = global(bool: <class 'bool'>)    ['bool52']
    $52pred = call bool52($50is_op.2, func=bool52, args=(Var($50is_op.2, c3s1_post_processing.py:53),), kws=(), vararg=None, target=None) ['$50is_op.2', '$52pred', 'bool52']
    branch $52pred, 54, 74                   ['$52pred']
label 54:
    $54load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$54load_global.0']
    $56load_attr.1 = getattr(value=$54load_global.0, attr=ones) ['$54load_global.0', '$56load_attr.1']
    $60load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$60load_global.3']
    $62load_attr.4 = getattr(value=$60load_global.3, attr=float64) ['$60load_global.3', '$62load_attr.4']
    $66call_function_kw.6 = call $56load_attr.1(K, func=$56load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($62load_attr.4, c3s1_post_processing.py:54))], vararg=None, target=None) ['$56load_attr.1', '$62load_attr.4', '$66call_function_kw.6', 'K']
    v = $66call_function_kw.6 / K            ['$66call_function_kw.6', 'K', 'v']
    jump 74                                  []
label 74:
    $74load_global.0 = global(range: <class 'range'>) ['$74load_global.0']
    $78call_function.2 = call $74load_global.0(N, func=$74load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None) ['$74load_global.0', '$78call_function.2', 'N']
    $80get_iter.3 = getiter(value=$78call_function.2) ['$78call_function.2', '$80get_iter.3']
    $phi82.0 = $80get_iter.3                 ['$80get_iter.3', '$phi82.0']
    jump 82                                  []
label 82:
    $82for_iter.1 = iternext(value=$phi82.0) ['$82for_iter.1', '$phi82.0']
    $82for_iter.2 = pair_first(value=$82for_iter.1) ['$82for_iter.1', '$82for_iter.2']
    $82for_iter.3 = pair_second(value=$82for_iter.1) ['$82for_iter.1', '$82for_iter.3']
    $phi84.1 = $82for_iter.2                 ['$82for_iter.2', '$phi84.1']
    branch $82for_iter.3, 84, 174            ['$82for_iter.3']
label 84:
    n = $phi84.1                             ['$phi84.1', 'n']
    $86load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$86load_global.2']
    $88load_method.3 = getattr(value=$86load_global.2, attr=sum) ['$86load_global.2', '$88load_method.3']
    $90load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$90load_global.4']
    $92load_method.5 = getattr(value=$90load_global.4, attr=abs) ['$90load_global.4', '$92load_method.5']
    $const96.7 = const(NoneType, None)       ['$const96.7']
    $const98.8 = const(NoneType, None)       ['$const98.8']
    $100build_slice.9 = global(slice: <class 'slice'>) ['$100build_slice.9']
    $100build_slice.10 = call $100build_slice.9($const96.7, $const98.8, func=$100build_slice.9, args=(Var($const96.7, c3s1_post_processing.py:56), Var($const98.8, c3s1_post_processing.py:56)), kws=(), vararg=None, target=None) ['$100build_slice.10', '$100build_slice.9', '$const96.7', '$const98.8']
    $104build_tuple.12 = build_tuple(items=[Var($100build_slice.10, c3s1_post_processing.py:56), Var(n, c3s1_post_processing.py:55)]) ['$100build_slice.10', '$104build_tuple.12', 'n']
    $106binary_subscr.13 = getitem(value=X, index=$104build_tuple.12, fn=<built-in function getitem>) ['$104build_tuple.12', '$106binary_subscr.13', 'X']
    $108call_method.14 = call $92load_method.5($106binary_subscr.13, func=$92load_method.5, args=[Var($106binary_subscr.13, c3s1_post_processing.py:56)], kws=(), vararg=None, target=None) ['$106binary_subscr.13', '$108call_method.14', '$92load_method.5']
    s = call $88load_method.3($108call_method.14, func=$88load_method.3, args=[Var($108call_method.14, c3s1_post_processing.py:56)], kws=(), vararg=None, target=None) ['$108call_method.14', '$88load_method.3', 's']
    $118compare_op.18 = s > threshold        ['$118compare_op.18', 's', 'threshold']
    bool120 = global(bool: <class 'bool'>)   ['bool120']
    $120pred = call bool120($118compare_op.18, func=bool120, args=(Var($118compare_op.18, c3s1_post_processing.py:57),), kws=(), vararg=None, target=None) ['$118compare_op.18', '$120pred', 'bool120']
    branch $120pred, 122, 156                ['$120pred']
label 122:
    $const124.2 = const(NoneType, None)      ['$const124.2']
    $const126.3 = const(NoneType, None)      ['$const126.3']
    $128build_slice.4 = global(slice: <class 'slice'>) ['$128build_slice.4']
    $128build_slice.5 = call $128build_slice.4($const124.2, $const126.3, func=$128build_slice.4, args=(Var($const124.2, c3s1_post_processing.py:58), Var($const126.3, c3s1_post_processing.py:58)), kws=(), vararg=None, target=None) ['$128build_slice.4', '$128build_slice.5', '$const124.2', '$const126.3']
    $132build_tuple.7 = build_tuple(items=[Var($128build_slice.5, c3s1_post_processing.py:58), Var(n, c3s1_post_processing.py:55)]) ['$128build_slice.5', '$132build_tuple.7', 'n']
    $134binary_subscr.8 = getitem(value=X, index=$132build_tuple.7, fn=<built-in function getitem>) ['$132build_tuple.7', '$134binary_subscr.8', 'X']
    $138binary_true_divide.10 = $134binary_subscr.8 / s ['$134binary_subscr.8', '$138binary_true_divide.10', 's']
    $const142.12 = const(NoneType, None)     ['$const142.12']
    $const144.13 = const(NoneType, None)     ['$const144.13']
    $146build_slice.14 = global(slice: <class 'slice'>) ['$146build_slice.14']
    $146build_slice.15 = call $146build_slice.14($const142.12, $const144.13, func=$146build_slice.14, args=(Var($const142.12, c3s1_post_processing.py:58), Var($const144.13, c3s1_post_processing.py:58)), kws=(), vararg=None, target=None) ['$146build_slice.14', '$146build_slice.15', '$const142.12', '$const144.13']
    $150build_tuple.17 = build_tuple(items=[Var($146build_slice.15, c3s1_post_processing.py:58), Var(n, c3s1_post_processing.py:55)]) ['$146build_slice.15', '$150build_tuple.17', 'n']
    X_norm[$150build_tuple.17] = $138binary_true_divide.10 ['$138binary_true_divide.10', '$150build_tuple.17', 'X_norm']
    jump 82                                  []
label 156:
    $const160.3 = const(NoneType, None)      ['$const160.3']
    $const162.4 = const(NoneType, None)      ['$const162.4']
    $164build_slice.5 = global(slice: <class 'slice'>) ['$164build_slice.5']
    $164build_slice.6 = call $164build_slice.5($const160.3, $const162.4, func=$164build_slice.5, args=(Var($const160.3, c3s1_post_processing.py:60), Var($const162.4, c3s1_post_processing.py:60)), kws=(), vararg=None, target=None) ['$164build_slice.5', '$164build_slice.6', '$const160.3', '$const162.4']
    $168build_tuple.8 = build_tuple(items=[Var($164build_slice.6, c3s1_post_processing.py:60), Var(n, c3s1_post_processing.py:55)]) ['$164build_slice.6', '$168build_tuple.8', 'n']
    X_norm[$168build_tuple.8] = v            ['$168build_tuple.8', 'X_norm', 'v']
    jump 82                                  []
label 174:
    $const176.1 = const(str, 2)              ['$const176.1']
    $178compare_op.2 = norm == $const176.1   ['$178compare_op.2', '$const176.1', 'norm']
    bool180 = global(bool: <class 'bool'>)   ['bool180']
    $180pred = call bool180($178compare_op.2, func=bool180, args=(Var($178compare_op.2, c3s1_post_processing.py:62),), kws=(), vararg=None, target=None) ['$178compare_op.2', '$180pred', 'bool180']
    branch $180pred, 184, 324                ['$180pred']
label 184:
    $const186.1 = const(NoneType, None)      ['$const186.1']
    $188is_op.2 = v is $const186.1           ['$188is_op.2', '$const186.1', 'v']
    bool190 = global(bool: <class 'bool'>)   ['bool190']
    $190pred = call bool190($188is_op.2, func=bool190, args=(Var($188is_op.2, c3s1_post_processing.py:63),), kws=(), vararg=None, target=None) ['$188is_op.2', '$190pred', 'bool190']
    branch $190pred, 192, 218                ['$190pred']
label 192:
    $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$192load_global.0']
    $194load_attr.1 = getattr(value=$192load_global.0, attr=ones) ['$192load_global.0', '$194load_attr.1']
    $198load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$198load_global.3']
    $200load_attr.4 = getattr(value=$198load_global.3, attr=float64) ['$198load_global.3', '$200load_attr.4']
    $204call_function_kw.6 = call $194load_attr.1(K, func=$194load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($200load_attr.4, c3s1_post_processing.py:64))], vararg=None, target=None) ['$194load_attr.1', '$200load_attr.4', '$204call_function_kw.6', 'K']
    $206load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$206load_global.7']
    $208load_method.8 = getattr(value=$206load_global.7, attr=sqrt) ['$206load_global.7', '$208load_method.8']
    $212call_method.10 = call $208load_method.8(K, func=$208load_method.8, args=[Var(K, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None) ['$208load_method.8', '$212call_method.10', 'K']
    v = $204call_function_kw.6 / $212call_method.10 ['$204call_function_kw.6', '$212call_method.10', 'v']
    jump 218                                 []
label 218:
    $218load_global.0 = global(range: <class 'range'>) ['$218load_global.0']
    $222call_function.2 = call $218load_global.0(N, func=$218load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None) ['$218load_global.0', '$222call_function.2', 'N']
    $224get_iter.3 = getiter(value=$222call_function.2) ['$222call_function.2', '$224get_iter.3']
    $phi226.0 = $224get_iter.3               ['$224get_iter.3', '$phi226.0']
    jump 226                                 []
label 226:
    $226for_iter.1 = iternext(value=$phi226.0) ['$226for_iter.1', '$phi226.0']
    $226for_iter.2 = pair_first(value=$226for_iter.1) ['$226for_iter.1', '$226for_iter.2']
    $226for_iter.3 = pair_second(value=$226for_iter.1) ['$226for_iter.1', '$226for_iter.3']
    $phi228.1 = $226for_iter.2               ['$226for_iter.2', '$phi228.1']
    branch $226for_iter.3, 228, 324          ['$226for_iter.3']
label 228:
    n = $phi228.1                            ['$phi228.1', 'n']
    $230load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$230load_global.2']
    $232load_method.3 = getattr(value=$230load_global.2, attr=sqrt) ['$230load_global.2', '$232load_method.3']
    $234load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$234load_global.4']
    $236load_method.5 = getattr(value=$234load_global.4, attr=sum) ['$234load_global.4', '$236load_method.5']
    $const240.7 = const(NoneType, None)      ['$const240.7']
    $const242.8 = const(NoneType, None)      ['$const242.8']
    $244build_slice.9 = global(slice: <class 'slice'>) ['$244build_slice.9']
    $244build_slice.10 = call $244build_slice.9($const240.7, $const242.8, func=$244build_slice.9, args=(Var($const240.7, c3s1_post_processing.py:66), Var($const242.8, c3s1_post_processing.py:66)), kws=(), vararg=None, target=None) ['$244build_slice.10', '$244build_slice.9', '$const240.7', '$const242.8']
    $248build_tuple.12 = build_tuple(items=[Var($244build_slice.10, c3s1_post_processing.py:66), Var(n, c3s1_post_processing.py:55)]) ['$244build_slice.10', '$248build_tuple.12', 'n']
    $250binary_subscr.13 = getitem(value=X, index=$248build_tuple.12, fn=<built-in function getitem>) ['$248build_tuple.12', '$250binary_subscr.13', 'X']
    $const252.14 = const(int, 2)             ['$const252.14']
    $254binary_power.15 = $250binary_subscr.13 ** $const252.14 ['$250binary_subscr.13', '$254binary_power.15', '$const252.14']
    $256call_method.16 = call $236load_method.5($254binary_power.15, func=$236load_method.5, args=[Var($254binary_power.15, c3s1_post_processing.py:66)], kws=(), vararg=None, target=None) ['$236load_method.5', '$254binary_power.15', '$256call_method.16']
    s = call $232load_method.3($256call_method.16, func=$232load_method.3, args=[Var($256call_method.16, c3s1_post_processing.py:66)], kws=(), vararg=None, target=None) ['$232load_method.3', '$256call_method.16', 's']
    $266compare_op.20 = s > threshold        ['$266compare_op.20', 's', 'threshold']
    bool268 = global(bool: <class 'bool'>)   ['bool268']
    $268pred = call bool268($266compare_op.20, func=bool268, args=(Var($266compare_op.20, c3s1_post_processing.py:67),), kws=(), vararg=None, target=None) ['$266compare_op.20', '$268pred', 'bool268']
    branch $268pred, 272, 306                ['$268pred']
label 272:
    $const274.2 = const(NoneType, None)      ['$const274.2']
    $const276.3 = const(NoneType, None)      ['$const276.3']
    $278build_slice.4 = global(slice: <class 'slice'>) ['$278build_slice.4']
    $278build_slice.5 = call $278build_slice.4($const274.2, $const276.3, func=$278build_slice.4, args=(Var($const274.2, c3s1_post_processing.py:68), Var($const276.3, c3s1_post_processing.py:68)), kws=(), vararg=None, target=None) ['$278build_slice.4', '$278build_slice.5', '$const274.2', '$const276.3']
    $282build_tuple.7 = build_tuple(items=[Var($278build_slice.5, c3s1_post_processing.py:68), Var(n, c3s1_post_processing.py:55)]) ['$278build_slice.5', '$282build_tuple.7', 'n']
    $284binary_subscr.8 = getitem(value=X, index=$282build_tuple.7, fn=<built-in function getitem>) ['$282build_tuple.7', '$284binary_subscr.8', 'X']
    $288binary_true_divide.10 = $284binary_subscr.8 / s ['$284binary_subscr.8', '$288binary_true_divide.10', 's']
    $const292.12 = const(NoneType, None)     ['$const292.12']
    $const294.13 = const(NoneType, None)     ['$const294.13']
    $296build_slice.14 = global(slice: <class 'slice'>) ['$296build_slice.14']
    $296build_slice.15 = call $296build_slice.14($const292.12, $const294.13, func=$296build_slice.14, args=(Var($const292.12, c3s1_post_processing.py:68), Var($const294.13, c3s1_post_processing.py:68)), kws=(), vararg=None, target=None) ['$296build_slice.14', '$296build_slice.15', '$const292.12', '$const294.13']
    $300build_tuple.17 = build_tuple(items=[Var($296build_slice.15, c3s1_post_processing.py:68), Var(n, c3s1_post_processing.py:55)]) ['$296build_slice.15', '$300build_tuple.17', 'n']
    X_norm[$300build_tuple.17] = $288binary_true_divide.10 ['$288binary_true_divide.10', '$300build_tuple.17', 'X_norm']
    jump 226                                 []
label 306:
    $const310.3 = const(NoneType, None)      ['$const310.3']
    $const312.4 = const(NoneType, None)      ['$const312.4']
    $314build_slice.5 = global(slice: <class 'slice'>) ['$314build_slice.5']
    $314build_slice.6 = call $314build_slice.5($const310.3, $const312.4, func=$314build_slice.5, args=(Var($const310.3, c3s1_post_processing.py:70), Var($const312.4, c3s1_post_processing.py:70)), kws=(), vararg=None, target=None) ['$314build_slice.5', '$314build_slice.6', '$const310.3', '$const312.4']
    $318build_tuple.8 = build_tuple(items=[Var($314build_slice.6, c3s1_post_processing.py:70), Var(n, c3s1_post_processing.py:55)]) ['$314build_slice.6', '$318build_tuple.8', 'n']
    X_norm[$318build_tuple.8] = v            ['$318build_tuple.8', 'X_norm', 'v']
    jump 226                                 []
label 324:
    $const326.1 = const(str, max)            ['$const326.1']
    $328compare_op.2 = norm == $const326.1   ['$328compare_op.2', '$const326.1', 'norm']
    bool330 = global(bool: <class 'bool'>)   ['bool330']
    $330pred = call bool330($328compare_op.2, func=bool330, args=(Var($328compare_op.2, c3s1_post_processing.py:72),), kws=(), vararg=None, target=None) ['$328compare_op.2', '$330pred', 'bool330']
    branch $330pred, 334, 464                ['$330pred']
label 334:
    $const336.1 = const(NoneType, None)      ['$const336.1']
    $338is_op.2 = v is $const336.1           ['$338is_op.2', '$const336.1', 'v']
    bool340 = global(bool: <class 'bool'>)   ['bool340']
    $340pred = call bool340($338is_op.2, func=bool340, args=(Var($338is_op.2, c3s1_post_processing.py:73),), kws=(), vararg=None, target=None) ['$338is_op.2', '$340pred', 'bool340']
    branch $340pred, 344, 360                ['$340pred']
label 344:
    $344load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$344load_global.0']
    $346load_attr.1 = getattr(value=$344load_global.0, attr=ones) ['$344load_global.0', '$346load_attr.1']
    $350load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$350load_global.3']
    $352load_attr.4 = getattr(value=$350load_global.3, attr=float64) ['$350load_global.3', '$352load_attr.4']
    v = call $346load_attr.1(K, func=$346load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($352load_attr.4, c3s1_post_processing.py:74))], vararg=None, target=None) ['$346load_attr.1', '$352load_attr.4', 'K', 'v']
    jump 360                                 []
label 360:
    $360load_global.0 = global(range: <class 'range'>) ['$360load_global.0']
    $364call_function.2 = call $360load_global.0(N, func=$360load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None) ['$360load_global.0', '$364call_function.2', 'N']
    $366get_iter.3 = getiter(value=$364call_function.2) ['$364call_function.2', '$366get_iter.3']
    $phi368.0 = $366get_iter.3               ['$366get_iter.3', '$phi368.0']
    jump 368                                 []
label 368:
    $368for_iter.1 = iternext(value=$phi368.0) ['$368for_iter.1', '$phi368.0']
    $368for_iter.2 = pair_first(value=$368for_iter.1) ['$368for_iter.1', '$368for_iter.2']
    $368for_iter.3 = pair_second(value=$368for_iter.1) ['$368for_iter.1', '$368for_iter.3']
    $phi370.1 = $368for_iter.2               ['$368for_iter.2', '$phi370.1']
    branch $368for_iter.3, 370, 464          ['$368for_iter.3']
label 370:
    n = $phi370.1                            ['$phi370.1', 'n']
    $372load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$372load_global.2']
    $374load_method.3 = getattr(value=$372load_global.2, attr=max) ['$372load_global.2', '$374load_method.3']
    $376load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$376load_global.4']
    $378load_method.5 = getattr(value=$376load_global.4, attr=abs) ['$376load_global.4', '$378load_method.5']
    $const382.7 = const(NoneType, None)      ['$const382.7']
    $const384.8 = const(NoneType, None)      ['$const384.8']
    $386build_slice.9 = global(slice: <class 'slice'>) ['$386build_slice.9']
    $386build_slice.10 = call $386build_slice.9($const382.7, $const384.8, func=$386build_slice.9, args=(Var($const382.7, c3s1_post_processing.py:76), Var($const384.8, c3s1_post_processing.py:76)), kws=(), vararg=None, target=None) ['$386build_slice.10', '$386build_slice.9', '$const382.7', '$const384.8']
    $390build_tuple.12 = build_tuple(items=[Var($386build_slice.10, c3s1_post_processing.py:76), Var(n, c3s1_post_processing.py:55)]) ['$386build_slice.10', '$390build_tuple.12', 'n']
    $392binary_subscr.13 = getitem(value=X, index=$390build_tuple.12, fn=<built-in function getitem>) ['$390build_tuple.12', '$392binary_subscr.13', 'X']
    $394call_method.14 = call $378load_method.5($392binary_subscr.13, func=$378load_method.5, args=[Var($392binary_subscr.13, c3s1_post_processing.py:76)], kws=(), vararg=None, target=None) ['$378load_method.5', '$392binary_subscr.13', '$394call_method.14']
    s = call $374load_method.3($394call_method.14, func=$374load_method.3, args=[Var($394call_method.14, c3s1_post_processing.py:76)], kws=(), vararg=None, target=None) ['$374load_method.3', '$394call_method.14', 's']
    $404compare_op.18 = s > threshold        ['$404compare_op.18', 's', 'threshold']
    bool406 = global(bool: <class 'bool'>)   ['bool406']
    $406pred = call bool406($404compare_op.18, func=bool406, args=(Var($404compare_op.18, c3s1_post_processing.py:77),), kws=(), vararg=None, target=None) ['$404compare_op.18', '$406pred', 'bool406']
    branch $406pred, 410, 444                ['$406pred']
label 410:
    $const412.2 = const(NoneType, None)      ['$const412.2']
    $const414.3 = const(NoneType, None)      ['$const414.3']
    $416build_slice.4 = global(slice: <class 'slice'>) ['$416build_slice.4']
    $416build_slice.5 = call $416build_slice.4($const412.2, $const414.3, func=$416build_slice.4, args=(Var($const412.2, c3s1_post_processing.py:78), Var($const414.3, c3s1_post_processing.py:78)), kws=(), vararg=None, target=None) ['$416build_slice.4', '$416build_slice.5', '$const412.2', '$const414.3']
    $420build_tuple.7 = build_tuple(items=[Var($416build_slice.5, c3s1_post_processing.py:78), Var(n, c3s1_post_processing.py:55)]) ['$416build_slice.5', '$420build_tuple.7', 'n']
    $422binary_subscr.8 = getitem(value=X, index=$420build_tuple.7, fn=<built-in function getitem>) ['$420build_tuple.7', '$422binary_subscr.8', 'X']
    $426binary_true_divide.10 = $422binary_subscr.8 / s ['$422binary_subscr.8', '$426binary_true_divide.10', 's']
    $const430.12 = const(NoneType, None)     ['$const430.12']
    $const432.13 = const(NoneType, None)     ['$const432.13']
    $434build_slice.14 = global(slice: <class 'slice'>) ['$434build_slice.14']
    $434build_slice.15 = call $434build_slice.14($const430.12, $const432.13, func=$434build_slice.14, args=(Var($const430.12, c3s1_post_processing.py:78), Var($const432.13, c3s1_post_processing.py:78)), kws=(), vararg=None, target=None) ['$434build_slice.14', '$434build_slice.15', '$const430.12', '$const432.13']
    $438build_tuple.17 = build_tuple(items=[Var($434build_slice.15, c3s1_post_processing.py:78), Var(n, c3s1_post_processing.py:55)]) ['$434build_slice.15', '$438build_tuple.17', 'n']
    X_norm[$438build_tuple.17] = $426binary_true_divide.10 ['$426binary_true_divide.10', '$438build_tuple.17', 'X_norm']
    jump 460                                 []
label 444:
    $const448.3 = const(NoneType, None)      ['$const448.3']
    $const450.4 = const(NoneType, None)      ['$const450.4']
    $452build_slice.5 = global(slice: <class 'slice'>) ['$452build_slice.5']
    $452build_slice.6 = call $452build_slice.5($const448.3, $const450.4, func=$452build_slice.5, args=(Var($const448.3, c3s1_post_processing.py:80), Var($const450.4, c3s1_post_processing.py:80)), kws=(), vararg=None, target=None) ['$452build_slice.5', '$452build_slice.6', '$const448.3', '$const450.4']
    $456build_tuple.8 = build_tuple(items=[Var($452build_slice.6, c3s1_post_processing.py:80), Var(n, c3s1_post_processing.py:55)]) ['$452build_slice.6', '$456build_tuple.8', 'n']
    X_norm[$456build_tuple.8] = v            ['$456build_tuple.8', 'X_norm', 'v']
    jump 460                                 []
label 460:
    jump 368                                 []
label 464:
    $const466.1 = const(str, z)              ['$const466.1']
    $468compare_op.2 = norm == $const466.1   ['$468compare_op.2', '$const466.1', 'norm']
    bool470 = global(bool: <class 'bool'>)   ['bool470']
    $470pred = call bool470($468compare_op.2, func=bool470, args=(Var($468compare_op.2, c3s1_post_processing.py:82),), kws=(), vararg=None, target=None) ['$468compare_op.2', '$470pred', 'bool470']
    branch $470pred, 474, 650                ['$470pred']
label 474:
    $const476.1 = const(NoneType, None)      ['$const476.1']
    $478is_op.2 = v is $const476.1           ['$478is_op.2', '$const476.1', 'v']
    bool480 = global(bool: <class 'bool'>)   ['bool480']
    $480pred = call bool480($478is_op.2, func=bool480, args=(Var($478is_op.2, c3s1_post_processing.py:83),), kws=(), vararg=None, target=None) ['$478is_op.2', '$480pred', 'bool480']
    branch $480pred, 484, 500                ['$480pred']
label 484:
    $484load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$484load_global.0']
    $486load_attr.1 = getattr(value=$484load_global.0, attr=zeros) ['$484load_global.0', '$486load_attr.1']
    $490load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$490load_global.3']
    $492load_attr.4 = getattr(value=$490load_global.3, attr=float64) ['$490load_global.3', '$492load_attr.4']
    v = call $486load_attr.1(K, func=$486load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($492load_attr.4, c3s1_post_processing.py:84))], vararg=None, target=None) ['$486load_attr.1', '$492load_attr.4', 'K', 'v']
    jump 500                                 []
label 500:
    $500load_global.0 = global(range: <class 'range'>) ['$500load_global.0']
    $504call_function.2 = call $500load_global.0(N, func=$500load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None) ['$500load_global.0', '$504call_function.2', 'N']
    $506get_iter.3 = getiter(value=$504call_function.2) ['$504call_function.2', '$506get_iter.3']
    $phi508.0 = $506get_iter.3               ['$506get_iter.3', '$phi508.0']
    jump 508                                 []
label 508:
    $508for_iter.1 = iternext(value=$phi508.0) ['$508for_iter.1', '$phi508.0']
    $508for_iter.2 = pair_first(value=$508for_iter.1) ['$508for_iter.1', '$508for_iter.2']
    $508for_iter.3 = pair_second(value=$508for_iter.1) ['$508for_iter.1', '$508for_iter.3']
    $phi510.1 = $508for_iter.2               ['$508for_iter.2', '$phi510.1']
    branch $508for_iter.3, 510, 650          ['$508for_iter.3']
label 510:
    n = $phi510.1                            ['$phi510.1', 'n']
    $512load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$512load_global.2']
    $514load_method.3 = getattr(value=$512load_global.2, attr=sum) ['$512load_global.2', '$514load_method.3']
    $const518.5 = const(NoneType, None)      ['$const518.5']
    $const520.6 = const(NoneType, None)      ['$const520.6']
    $522build_slice.7 = global(slice: <class 'slice'>) ['$522build_slice.7']
    $522build_slice.8 = call $522build_slice.7($const518.5, $const520.6, func=$522build_slice.7, args=(Var($const518.5, c3s1_post_processing.py:86), Var($const520.6, c3s1_post_processing.py:86)), kws=(), vararg=None, target=None) ['$522build_slice.7', '$522build_slice.8', '$const518.5', '$const520.6']
    $526build_tuple.10 = build_tuple(items=[Var($522build_slice.8, c3s1_post_processing.py:86), Var(n, c3s1_post_processing.py:55)]) ['$522build_slice.8', '$526build_tuple.10', 'n']
    $528binary_subscr.11 = getitem(value=X, index=$526build_tuple.10, fn=<built-in function getitem>) ['$526build_tuple.10', '$528binary_subscr.11', 'X']
    $530call_method.12 = call $514load_method.3($528binary_subscr.11, func=$514load_method.3, args=[Var($528binary_subscr.11, c3s1_post_processing.py:86)], kws=(), vararg=None, target=None) ['$514load_method.3', '$528binary_subscr.11', '$530call_method.12']
    mu = $530call_method.12 / K              ['$530call_method.12', 'K', 'mu']
    $538load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$538load_global.15']
    $540load_method.16 = getattr(value=$538load_global.15, attr=sqrt) ['$538load_global.15', '$540load_method.16']
    $542load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$542load_global.17']
    $544load_method.18 = getattr(value=$542load_global.17, attr=sum) ['$542load_global.17', '$544load_method.18']
    $const548.20 = const(NoneType, None)     ['$const548.20']
    $const550.21 = const(NoneType, None)     ['$const550.21']
    $552build_slice.22 = global(slice: <class 'slice'>) ['$552build_slice.22']
    $552build_slice.23 = call $552build_slice.22($const548.20, $const550.21, func=$552build_slice.22, args=(Var($const548.20, c3s1_post_processing.py:87), Var($const550.21, c3s1_post_processing.py:87)), kws=(), vararg=None, target=None) ['$552build_slice.22', '$552build_slice.23', '$const548.20', '$const550.21']
    $556build_tuple.25 = build_tuple(items=[Var($552build_slice.23, c3s1_post_processing.py:87), Var(n, c3s1_post_processing.py:55)]) ['$552build_slice.23', '$556build_tuple.25', 'n']
    $558binary_subscr.26 = getitem(value=X, index=$556build_tuple.25, fn=<built-in function getitem>) ['$556build_tuple.25', '$558binary_subscr.26', 'X']
    $562binary_subtract.28 = $558binary_subscr.26 - mu ['$558binary_subscr.26', '$562binary_subtract.28', 'mu']
    $const564.29 = const(int, 2)             ['$const564.29']
    $566binary_power.30 = $562binary_subtract.28 ** $const564.29 ['$562binary_subtract.28', '$566binary_power.30', '$const564.29']
    $568call_method.31 = call $544load_method.18($566binary_power.30, func=$544load_method.18, args=[Var($566binary_power.30, c3s1_post_processing.py:87)], kws=(), vararg=None, target=None) ['$544load_method.18', '$566binary_power.30', '$568call_method.31']
    $const572.33 = const(int, 1)             ['$const572.33']
    $574binary_subtract.34 = K - $const572.33 ['$574binary_subtract.34', '$const572.33', 'K']
    $576binary_true_divide.35 = $568call_method.31 / $574binary_subtract.34 ['$568call_method.31', '$574binary_subtract.34', '$576binary_true_divide.35']
    sigma = call $540load_method.16($576binary_true_divide.35, func=$540load_method.16, args=[Var($576binary_true_divide.35, c3s1_post_processing.py:87)], kws=(), vararg=None, target=None) ['$540load_method.16', '$576binary_true_divide.35', 'sigma']
    $586compare_op.39 = sigma > threshold    ['$586compare_op.39', 'sigma', 'threshold']
    bool588 = global(bool: <class 'bool'>)   ['bool588']
    $588pred = call bool588($586compare_op.39, func=bool588, args=(Var($586compare_op.39, c3s1_post_processing.py:88),), kws=(), vararg=None, target=None) ['$586compare_op.39', '$588pred', 'bool588']
    branch $588pred, 592, 630                ['$588pred']
label 592:
    $const594.2 = const(NoneType, None)      ['$const594.2']
    $const596.3 = const(NoneType, None)      ['$const596.3']
    $598build_slice.4 = global(slice: <class 'slice'>) ['$598build_slice.4']
    $598build_slice.5 = call $598build_slice.4($const594.2, $const596.3, func=$598build_slice.4, args=(Var($const594.2, c3s1_post_processing.py:89), Var($const596.3, c3s1_post_processing.py:89)), kws=(), vararg=None, target=None) ['$598build_slice.4', '$598build_slice.5', '$const594.2', '$const596.3']
    $602build_tuple.7 = build_tuple(items=[Var($598build_slice.5, c3s1_post_processing.py:89), Var(n, c3s1_post_processing.py:55)]) ['$598build_slice.5', '$602build_tuple.7', 'n']
    $604binary_subscr.8 = getitem(value=X, index=$602build_tuple.7, fn=<built-in function getitem>) ['$602build_tuple.7', '$604binary_subscr.8', 'X']
    $608binary_subtract.10 = $604binary_subscr.8 - mu ['$604binary_subscr.8', '$608binary_subtract.10', 'mu']
    $612binary_true_divide.12 = $608binary_subtract.10 / sigma ['$608binary_subtract.10', '$612binary_true_divide.12', 'sigma']
    $const616.14 = const(NoneType, None)     ['$const616.14']
    $const618.15 = const(NoneType, None)     ['$const618.15']
    $620build_slice.16 = global(slice: <class 'slice'>) ['$620build_slice.16']
    $620build_slice.17 = call $620build_slice.16($const616.14, $const618.15, func=$620build_slice.16, args=(Var($const616.14, c3s1_post_processing.py:89), Var($const618.15, c3s1_post_processing.py:89)), kws=(), vararg=None, target=None) ['$620build_slice.16', '$620build_slice.17', '$const616.14', '$const618.15']
    $624build_tuple.19 = build_tuple(items=[Var($620build_slice.17, c3s1_post_processing.py:89), Var(n, c3s1_post_processing.py:55)]) ['$620build_slice.17', '$624build_tuple.19', 'n']
    X_norm[$624build_tuple.19] = $612binary_true_divide.12 ['$612binary_true_divide.12', '$624build_tuple.19', 'X_norm']
    jump 646                                 []
label 630:
    $const634.3 = const(NoneType, None)      ['$const634.3']
    $const636.4 = const(NoneType, None)      ['$const636.4']
    $638build_slice.5 = global(slice: <class 'slice'>) ['$638build_slice.5']
    $638build_slice.6 = call $638build_slice.5($const634.3, $const636.4, func=$638build_slice.5, args=(Var($const634.3, c3s1_post_processing.py:91), Var($const636.4, c3s1_post_processing.py:91)), kws=(), vararg=None, target=None) ['$638build_slice.5', '$638build_slice.6', '$const634.3', '$const636.4']
    $642build_tuple.8 = build_tuple(items=[Var($638build_slice.6, c3s1_post_processing.py:91), Var(n, c3s1_post_processing.py:55)]) ['$638build_slice.6', '$642build_tuple.8', 'n']
    X_norm[$642build_tuple.8] = v            ['$642build_tuple.8', 'X_norm', 'v']
    jump 646                                 []
label 646:
    jump 508                                 []
label 650:
    $652return_value.1 = cast(value=X_norm)  ['$652return_value.1', 'X_norm']
    return $652return_value.1                ['$652return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: X = arg(0, name=X)
DEBUG:numba.core.ssa:on stmt: norm = arg(1, name=norm)
DEBUG:numba.core.ssa:on stmt: threshold = arg(2, name=threshold)
DEBUG:numba.core.ssa:on stmt: v = arg(3, name=v)
DEBUG:numba.core.ssa:on stmt: $const_1 = const(str, 1)
DEBUG:numba.core.ssa:on stmt: $const_2 = const(str, 2)
DEBUG:numba.core.ssa:on stmt: $const_max = const(str, max)
DEBUG:numba.core.ssa:on stmt: $const_z = const(str, z)
DEBUG:numba.core.ssa:on stmt: $const4.1 = build_tuple(items=[Var($const_1, c3s1_post_processing.py:47), Var($const_2, c3s1_post_processing.py:47), Var($const_max, c3s1_post_processing.py:47), Var($const_z, c3s1_post_processing.py:47)])
DEBUG:numba.core.ssa:on stmt: $6contains_op.2 = norm in $const4.1
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6contains_op.2, func=bool8, args=(Var($6contains_op.2, c3s1_post_processing.py:47),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 14, 10
DEBUG:numba.core.ssa:==== SSA block analysis pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $assertion_error10.0 = global(AssertionError: <class 'AssertionError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'AssertionError'>
DEBUG:numba.core.ssa:==== SSA block analysis pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $16load_attr.1 = getattr(value=X, attr=shape)
DEBUG:numba.core.ssa:on stmt: $18unpack_sequence.4 = exhaust_iter(value=$16load_attr.1, count=2)
DEBUG:numba.core.ssa:on stmt: $18unpack_sequence.2 = static_getitem(value=$18unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $18unpack_sequence.3 = static_getitem(value=$18unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: K = $18unpack_sequence.2
DEBUG:numba.core.ssa:on stmt: N = $18unpack_sequence.3
DEBUG:numba.core.ssa:on stmt: $24load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $26load_method.6 = getattr(value=$24load_global.5, attr=zeros)
DEBUG:numba.core.ssa:on stmt: $32build_tuple.9 = build_tuple(items=[Var(K, c3s1_post_processing.py:49), Var(N, c3s1_post_processing.py:49)])
DEBUG:numba.core.ssa:on stmt: X_norm = call $26load_method.6($32build_tuple.9, func=$26load_method.6, args=[Var($32build_tuple.9, c3s1_post_processing.py:50)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const40.12 = const(str, 1)
DEBUG:numba.core.ssa:on stmt: $42compare_op.13 = norm == $const40.12
DEBUG:numba.core.ssa:on stmt: bool44 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $44pred = call bool44($42compare_op.13, func=bool44, args=(Var($42compare_op.13, c3s1_post_processing.py:52),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $44pred, 46, 174
DEBUG:numba.core.ssa:==== SSA block analysis pass on 46
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $const48.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $50is_op.2 = v is $const48.1
DEBUG:numba.core.ssa:on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $52pred = call bool52($50is_op.2, func=bool52, args=(Var($50is_op.2, c3s1_post_processing.py:53),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $52pred, 54, 74
DEBUG:numba.core.ssa:==== SSA block analysis pass on 54
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $54load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $56load_attr.1 = getattr(value=$54load_global.0, attr=ones)
DEBUG:numba.core.ssa:on stmt: $60load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $62load_attr.4 = getattr(value=$60load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: $66call_function_kw.6 = call $56load_attr.1(K, func=$56load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($62load_attr.4, c3s1_post_processing.py:54))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: v = $66call_function_kw.6 / K
DEBUG:numba.core.ssa:on stmt: jump 74
DEBUG:numba.core.ssa:==== SSA block analysis pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $78call_function.2 = call $74load_global.0(N, func=$74load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $80get_iter.3 = getiter(value=$78call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi82.0 = $80get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 82
DEBUG:numba.core.ssa:==== SSA block analysis pass on 82
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $82for_iter.1 = iternext(value=$phi82.0)
DEBUG:numba.core.ssa:on stmt: $82for_iter.2 = pair_first(value=$82for_iter.1)
DEBUG:numba.core.ssa:on stmt: $82for_iter.3 = pair_second(value=$82for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi84.1 = $82for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $82for_iter.3, 84, 174
DEBUG:numba.core.ssa:==== SSA block analysis pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: n = $phi84.1
DEBUG:numba.core.ssa:on stmt: $86load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $88load_method.3 = getattr(value=$86load_global.2, attr=sum)
DEBUG:numba.core.ssa:on stmt: $90load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=abs)
DEBUG:numba.core.ssa:on stmt: $const96.7 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const98.8 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $100build_slice.9 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $100build_slice.10 = call $100build_slice.9($const96.7, $const98.8, func=$100build_slice.9, args=(Var($const96.7, c3s1_post_processing.py:56), Var($const98.8, c3s1_post_processing.py:56)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $104build_tuple.12 = build_tuple(items=[Var($100build_slice.10, c3s1_post_processing.py:56), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $106binary_subscr.13 = getitem(value=X, index=$104build_tuple.12, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $108call_method.14 = call $92load_method.5($106binary_subscr.13, func=$92load_method.5, args=[Var($106binary_subscr.13, c3s1_post_processing.py:56)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: s = call $88load_method.3($108call_method.14, func=$88load_method.3, args=[Var($108call_method.14, c3s1_post_processing.py:56)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $118compare_op.18 = s > threshold
DEBUG:numba.core.ssa:on stmt: bool120 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $120pred = call bool120($118compare_op.18, func=bool120, args=(Var($118compare_op.18, c3s1_post_processing.py:57),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $120pred, 122, 156
DEBUG:numba.core.ssa:==== SSA block analysis pass on 122
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $const124.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const126.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $128build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $128build_slice.5 = call $128build_slice.4($const124.2, $const126.3, func=$128build_slice.4, args=(Var($const124.2, c3s1_post_processing.py:58), Var($const126.3, c3s1_post_processing.py:58)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $132build_tuple.7 = build_tuple(items=[Var($128build_slice.5, c3s1_post_processing.py:58), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $134binary_subscr.8 = getitem(value=X, index=$132build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $138binary_true_divide.10 = $134binary_subscr.8 / s
DEBUG:numba.core.ssa:on stmt: $const142.12 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const144.13 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $146build_slice.14 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $146build_slice.15 = call $146build_slice.14($const142.12, $const144.13, func=$146build_slice.14, args=(Var($const142.12, c3s1_post_processing.py:58), Var($const144.13, c3s1_post_processing.py:58)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $150build_tuple.17 = build_tuple(items=[Var($146build_slice.15, c3s1_post_processing.py:58), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$150build_tuple.17] = $138binary_true_divide.10
DEBUG:numba.core.ssa:on stmt: jump 652
DEBUG:numba.core.ssa:==== SSA block analysis pass on 156
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $const160.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const162.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $164build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $164build_slice.6 = call $164build_slice.5($const160.3, $const162.4, func=$164build_slice.5, args=(Var($const160.3, c3s1_post_processing.py:60), Var($const162.4, c3s1_post_processing.py:60)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $168build_tuple.8 = build_tuple(items=[Var($164build_slice.6, c3s1_post_processing.py:60), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$168build_tuple.8] = v
DEBUG:numba.core.ssa:on stmt: jump 652
DEBUG:numba.core.ssa:==== SSA block analysis pass on 174
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $const176.1 = const(str, 2)
DEBUG:numba.core.ssa:on stmt: $178compare_op.2 = norm == $const176.1
DEBUG:numba.core.ssa:on stmt: bool180 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $180pred = call bool180($178compare_op.2, func=bool180, args=(Var($178compare_op.2, c3s1_post_processing.py:62),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $180pred, 184, 324
DEBUG:numba.core.ssa:==== SSA block analysis pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $const186.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $188is_op.2 = v is $const186.1
DEBUG:numba.core.ssa:on stmt: bool190 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $190pred = call bool190($188is_op.2, func=bool190, args=(Var($188is_op.2, c3s1_post_processing.py:63),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $190pred, 192, 218
DEBUG:numba.core.ssa:==== SSA block analysis pass on 192
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $194load_attr.1 = getattr(value=$192load_global.0, attr=ones)
DEBUG:numba.core.ssa:on stmt: $198load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $200load_attr.4 = getattr(value=$198load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: $204call_function_kw.6 = call $194load_attr.1(K, func=$194load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($200load_attr.4, c3s1_post_processing.py:64))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $206load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $208load_method.8 = getattr(value=$206load_global.7, attr=sqrt)
DEBUG:numba.core.ssa:on stmt: $212call_method.10 = call $208load_method.8(K, func=$208load_method.8, args=[Var(K, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: v = $204call_function_kw.6 / $212call_method.10
DEBUG:numba.core.ssa:on stmt: jump 218
DEBUG:numba.core.ssa:==== SSA block analysis pass on 218
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $218load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $222call_function.2 = call $218load_global.0(N, func=$218load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $224get_iter.3 = getiter(value=$222call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi226.0 = $224get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 226
DEBUG:numba.core.ssa:==== SSA block analysis pass on 226
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $226for_iter.1 = iternext(value=$phi226.0)
DEBUG:numba.core.ssa:on stmt: $226for_iter.2 = pair_first(value=$226for_iter.1)
DEBUG:numba.core.ssa:on stmt: $226for_iter.3 = pair_second(value=$226for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi228.1 = $226for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $226for_iter.3, 228, 324
DEBUG:numba.core.ssa:==== SSA block analysis pass on 228
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: n = $phi228.1
DEBUG:numba.core.ssa:on stmt: $230load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $232load_method.3 = getattr(value=$230load_global.2, attr=sqrt)
DEBUG:numba.core.ssa:on stmt: $234load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $236load_method.5 = getattr(value=$234load_global.4, attr=sum)
DEBUG:numba.core.ssa:on stmt: $const240.7 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const242.8 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $244build_slice.9 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $244build_slice.10 = call $244build_slice.9($const240.7, $const242.8, func=$244build_slice.9, args=(Var($const240.7, c3s1_post_processing.py:66), Var($const242.8, c3s1_post_processing.py:66)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $248build_tuple.12 = build_tuple(items=[Var($244build_slice.10, c3s1_post_processing.py:66), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $250binary_subscr.13 = getitem(value=X, index=$248build_tuple.12, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const252.14 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $254binary_power.15 = $250binary_subscr.13 ** $const252.14
DEBUG:numba.core.ssa:on stmt: $256call_method.16 = call $236load_method.5($254binary_power.15, func=$236load_method.5, args=[Var($254binary_power.15, c3s1_post_processing.py:66)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: s = call $232load_method.3($256call_method.16, func=$232load_method.3, args=[Var($256call_method.16, c3s1_post_processing.py:66)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $266compare_op.20 = s > threshold
DEBUG:numba.core.ssa:on stmt: bool268 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $268pred = call bool268($266compare_op.20, func=bool268, args=(Var($266compare_op.20, c3s1_post_processing.py:67),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $268pred, 272, 306
DEBUG:numba.core.ssa:==== SSA block analysis pass on 272
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $const274.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const276.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $278build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $278build_slice.5 = call $278build_slice.4($const274.2, $const276.3, func=$278build_slice.4, args=(Var($const274.2, c3s1_post_processing.py:68), Var($const276.3, c3s1_post_processing.py:68)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $282build_tuple.7 = build_tuple(items=[Var($278build_slice.5, c3s1_post_processing.py:68), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $284binary_subscr.8 = getitem(value=X, index=$282build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $288binary_true_divide.10 = $284binary_subscr.8 / s
DEBUG:numba.core.ssa:on stmt: $const292.12 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const294.13 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $296build_slice.14 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $296build_slice.15 = call $296build_slice.14($const292.12, $const294.13, func=$296build_slice.14, args=(Var($const292.12, c3s1_post_processing.py:68), Var($const294.13, c3s1_post_processing.py:68)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $300build_tuple.17 = build_tuple(items=[Var($296build_slice.15, c3s1_post_processing.py:68), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$300build_tuple.17] = $288binary_true_divide.10
DEBUG:numba.core.ssa:on stmt: jump 651
DEBUG:numba.core.ssa:==== SSA block analysis pass on 306
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $const310.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const312.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $314build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $314build_slice.6 = call $314build_slice.5($const310.3, $const312.4, func=$314build_slice.5, args=(Var($const310.3, c3s1_post_processing.py:70), Var($const312.4, c3s1_post_processing.py:70)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $318build_tuple.8 = build_tuple(items=[Var($314build_slice.6, c3s1_post_processing.py:70), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$318build_tuple.8] = v
DEBUG:numba.core.ssa:on stmt: jump 651
DEBUG:numba.core.ssa:==== SSA block analysis pass on 324
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $const326.1 = const(str, max)
DEBUG:numba.core.ssa:on stmt: $328compare_op.2 = norm == $const326.1
DEBUG:numba.core.ssa:on stmt: bool330 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $330pred = call bool330($328compare_op.2, func=bool330, args=(Var($328compare_op.2, c3s1_post_processing.py:72),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $330pred, 334, 464
DEBUG:numba.core.ssa:==== SSA block analysis pass on 334
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $const336.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $338is_op.2 = v is $const336.1
DEBUG:numba.core.ssa:on stmt: bool340 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $340pred = call bool340($338is_op.2, func=bool340, args=(Var($338is_op.2, c3s1_post_processing.py:73),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $340pred, 344, 360
DEBUG:numba.core.ssa:==== SSA block analysis pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $344load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $346load_attr.1 = getattr(value=$344load_global.0, attr=ones)
DEBUG:numba.core.ssa:on stmt: $350load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $352load_attr.4 = getattr(value=$350load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: v = call $346load_attr.1(K, func=$346load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($352load_attr.4, c3s1_post_processing.py:74))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 360
DEBUG:numba.core.ssa:==== SSA block analysis pass on 360
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $360load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $364call_function.2 = call $360load_global.0(N, func=$360load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $366get_iter.3 = getiter(value=$364call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi368.0 = $366get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 368
DEBUG:numba.core.ssa:==== SSA block analysis pass on 368
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $368for_iter.1 = iternext(value=$phi368.0)
DEBUG:numba.core.ssa:on stmt: $368for_iter.2 = pair_first(value=$368for_iter.1)
DEBUG:numba.core.ssa:on stmt: $368for_iter.3 = pair_second(value=$368for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi370.1 = $368for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $368for_iter.3, 370, 464
DEBUG:numba.core.ssa:==== SSA block analysis pass on 370
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: n = $phi370.1
DEBUG:numba.core.ssa:on stmt: $372load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $374load_method.3 = getattr(value=$372load_global.2, attr=max)
DEBUG:numba.core.ssa:on stmt: $376load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $378load_method.5 = getattr(value=$376load_global.4, attr=abs)
DEBUG:numba.core.ssa:on stmt: $const382.7 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const384.8 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $386build_slice.9 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $386build_slice.10 = call $386build_slice.9($const382.7, $const384.8, func=$386build_slice.9, args=(Var($const382.7, c3s1_post_processing.py:76), Var($const384.8, c3s1_post_processing.py:76)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390build_tuple.12 = build_tuple(items=[Var($386build_slice.10, c3s1_post_processing.py:76), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $392binary_subscr.13 = getitem(value=X, index=$390build_tuple.12, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $394call_method.14 = call $378load_method.5($392binary_subscr.13, func=$378load_method.5, args=[Var($392binary_subscr.13, c3s1_post_processing.py:76)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: s = call $374load_method.3($394call_method.14, func=$374load_method.3, args=[Var($394call_method.14, c3s1_post_processing.py:76)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $404compare_op.18 = s > threshold
DEBUG:numba.core.ssa:on stmt: bool406 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $406pred = call bool406($404compare_op.18, func=bool406, args=(Var($404compare_op.18, c3s1_post_processing.py:77),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $406pred, 410, 444
DEBUG:numba.core.ssa:==== SSA block analysis pass on 410
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $const412.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const414.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $416build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $416build_slice.5 = call $416build_slice.4($const412.2, $const414.3, func=$416build_slice.4, args=(Var($const412.2, c3s1_post_processing.py:78), Var($const414.3, c3s1_post_processing.py:78)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $420build_tuple.7 = build_tuple(items=[Var($416build_slice.5, c3s1_post_processing.py:78), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $422binary_subscr.8 = getitem(value=X, index=$420build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $426binary_true_divide.10 = $422binary_subscr.8 / s
DEBUG:numba.core.ssa:on stmt: $const430.12 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const432.13 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $434build_slice.14 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $434build_slice.15 = call $434build_slice.14($const430.12, $const432.13, func=$434build_slice.14, args=(Var($const430.12, c3s1_post_processing.py:78), Var($const432.13, c3s1_post_processing.py:78)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $438build_tuple.17 = build_tuple(items=[Var($434build_slice.15, c3s1_post_processing.py:78), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$438build_tuple.17] = $426binary_true_divide.10
DEBUG:numba.core.ssa:on stmt: jump 460
DEBUG:numba.core.ssa:==== SSA block analysis pass on 444
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $const448.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const450.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $452build_slice.6 = call $452build_slice.5($const448.3, $const450.4, func=$452build_slice.5, args=(Var($const448.3, c3s1_post_processing.py:80), Var($const450.4, c3s1_post_processing.py:80)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $456build_tuple.8 = build_tuple(items=[Var($452build_slice.6, c3s1_post_processing.py:80), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$456build_tuple.8] = v
DEBUG:numba.core.ssa:on stmt: jump 460
DEBUG:numba.core.ssa:==== SSA block analysis pass on 460
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: jump 368
DEBUG:numba.core.ssa:==== SSA block analysis pass on 464
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $const466.1 = const(str, z)
DEBUG:numba.core.ssa:on stmt: $468compare_op.2 = norm == $const466.1
DEBUG:numba.core.ssa:on stmt: bool470 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $470pred = call bool470($468compare_op.2, func=bool470, args=(Var($468compare_op.2, c3s1_post_processing.py:82),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $470pred, 474, 650
DEBUG:numba.core.ssa:==== SSA block analysis pass on 474
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $const476.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $478is_op.2 = v is $const476.1
DEBUG:numba.core.ssa:on stmt: bool480 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $480pred = call bool480($478is_op.2, func=bool480, args=(Var($478is_op.2, c3s1_post_processing.py:83),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $480pred, 484, 500
DEBUG:numba.core.ssa:==== SSA block analysis pass on 484
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $484load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $486load_attr.1 = getattr(value=$484load_global.0, attr=zeros)
DEBUG:numba.core.ssa:on stmt: $490load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $492load_attr.4 = getattr(value=$490load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: v = call $486load_attr.1(K, func=$486load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($492load_attr.4, c3s1_post_processing.py:84))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 500
DEBUG:numba.core.ssa:==== SSA block analysis pass on 500
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $500load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $504call_function.2 = call $500load_global.0(N, func=$500load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $506get_iter.3 = getiter(value=$504call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi508.0 = $506get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 508
DEBUG:numba.core.ssa:==== SSA block analysis pass on 508
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $508for_iter.1 = iternext(value=$phi508.0)
DEBUG:numba.core.ssa:on stmt: $508for_iter.2 = pair_first(value=$508for_iter.1)
DEBUG:numba.core.ssa:on stmt: $508for_iter.3 = pair_second(value=$508for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi510.1 = $508for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $508for_iter.3, 510, 650
DEBUG:numba.core.ssa:==== SSA block analysis pass on 510
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: n = $phi510.1
DEBUG:numba.core.ssa:on stmt: $512load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $514load_method.3 = getattr(value=$512load_global.2, attr=sum)
DEBUG:numba.core.ssa:on stmt: $const518.5 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const520.6 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $522build_slice.7 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $522build_slice.8 = call $522build_slice.7($const518.5, $const520.6, func=$522build_slice.7, args=(Var($const518.5, c3s1_post_processing.py:86), Var($const520.6, c3s1_post_processing.py:86)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $526build_tuple.10 = build_tuple(items=[Var($522build_slice.8, c3s1_post_processing.py:86), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $528binary_subscr.11 = getitem(value=X, index=$526build_tuple.10, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $530call_method.12 = call $514load_method.3($528binary_subscr.11, func=$514load_method.3, args=[Var($528binary_subscr.11, c3s1_post_processing.py:86)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: mu = $530call_method.12 / K
DEBUG:numba.core.ssa:on stmt: $538load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $540load_method.16 = getattr(value=$538load_global.15, attr=sqrt)
DEBUG:numba.core.ssa:on stmt: $542load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $544load_method.18 = getattr(value=$542load_global.17, attr=sum)
DEBUG:numba.core.ssa:on stmt: $const548.20 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const550.21 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $552build_slice.22 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $552build_slice.23 = call $552build_slice.22($const548.20, $const550.21, func=$552build_slice.22, args=(Var($const548.20, c3s1_post_processing.py:87), Var($const550.21, c3s1_post_processing.py:87)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $556build_tuple.25 = build_tuple(items=[Var($552build_slice.23, c3s1_post_processing.py:87), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $558binary_subscr.26 = getitem(value=X, index=$556build_tuple.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $562binary_subtract.28 = $558binary_subscr.26 - mu
DEBUG:numba.core.ssa:on stmt: $const564.29 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $566binary_power.30 = $562binary_subtract.28 ** $const564.29
DEBUG:numba.core.ssa:on stmt: $568call_method.31 = call $544load_method.18($566binary_power.30, func=$544load_method.18, args=[Var($566binary_power.30, c3s1_post_processing.py:87)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const572.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $574binary_subtract.34 = K - $const572.33
DEBUG:numba.core.ssa:on stmt: $576binary_true_divide.35 = $568call_method.31 / $574binary_subtract.34
DEBUG:numba.core.ssa:on stmt: sigma = call $540load_method.16($576binary_true_divide.35, func=$540load_method.16, args=[Var($576binary_true_divide.35, c3s1_post_processing.py:87)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $586compare_op.39 = sigma > threshold
DEBUG:numba.core.ssa:on stmt: bool588 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $588pred = call bool588($586compare_op.39, func=bool588, args=(Var($586compare_op.39, c3s1_post_processing.py:88),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $588pred, 592, 630
DEBUG:numba.core.ssa:==== SSA block analysis pass on 592
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $const594.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const596.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $598build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $598build_slice.5 = call $598build_slice.4($const594.2, $const596.3, func=$598build_slice.4, args=(Var($const594.2, c3s1_post_processing.py:89), Var($const596.3, c3s1_post_processing.py:89)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $602build_tuple.7 = build_tuple(items=[Var($598build_slice.5, c3s1_post_processing.py:89), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $604binary_subscr.8 = getitem(value=X, index=$602build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $608binary_subtract.10 = $604binary_subscr.8 - mu
DEBUG:numba.core.ssa:on stmt: $612binary_true_divide.12 = $608binary_subtract.10 / sigma
DEBUG:numba.core.ssa:on stmt: $const616.14 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const618.15 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $620build_slice.16 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $620build_slice.17 = call $620build_slice.16($const616.14, $const618.15, func=$620build_slice.16, args=(Var($const616.14, c3s1_post_processing.py:89), Var($const618.15, c3s1_post_processing.py:89)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $624build_tuple.19 = build_tuple(items=[Var($620build_slice.17, c3s1_post_processing.py:89), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$624build_tuple.19] = $612binary_true_divide.12
DEBUG:numba.core.ssa:on stmt: jump 646
DEBUG:numba.core.ssa:==== SSA block analysis pass on 630
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $const634.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const636.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $638build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $638build_slice.6 = call $638build_slice.5($const634.3, $const636.4, func=$638build_slice.5, args=(Var($const634.3, c3s1_post_processing.py:91), Var($const636.4, c3s1_post_processing.py:91)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $642build_tuple.8 = build_tuple(items=[Var($638build_slice.6, c3s1_post_processing.py:91), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$642build_tuple.8] = v
DEBUG:numba.core.ssa:on stmt: jump 646
DEBUG:numba.core.ssa:==== SSA block analysis pass on 646
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: jump 508
DEBUG:numba.core.ssa:==== SSA block analysis pass on 650
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: $652return_value.1 = cast(value=X_norm)
DEBUG:numba.core.ssa:on stmt: return $652return_value.1
DEBUG:numba.core.ssa:==== SSA block analysis pass on 651
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: jump 226
DEBUG:numba.core.ssa:==== SSA block analysis pass on 652
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C677F40>
DEBUG:numba.core.ssa:on stmt: jump 82
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$100build_slice.10': [<numba.core.ir.Assign object at 0x0000029B6C87D820>],
             '$100build_slice.9': [<numba.core.ir.Assign object at 0x0000029B6C87D700>],
             '$104build_tuple.12': [<numba.core.ir.Assign object at 0x0000029B6C87DAF0>],
             '$106binary_subscr.13': [<numba.core.ir.Assign object at 0x0000029B6C87DC70>],
             '$108call_method.14': [<numba.core.ir.Assign object at 0x0000029B6C87DE50>],
             '$118compare_op.18': [<numba.core.ir.Assign object at 0x0000029B6C885490>],
             '$120pred': [<numba.core.ir.Assign object at 0x0000029B6C885700>],
             '$128build_slice.4': [<numba.core.ir.Assign object at 0x0000029B6C885BE0>],
             '$128build_slice.5': [<numba.core.ir.Assign object at 0x0000029B6C885D00>],
             '$132build_tuple.7': [<numba.core.ir.Assign object at 0x0000029B6C885FD0>],
             '$134binary_subscr.8': [<numba.core.ir.Assign object at 0x0000029B6C88E190>],
             '$138binary_true_divide.10': [<numba.core.ir.Assign object at 0x0000029B6C88E430>],
             '$146build_slice.14': [<numba.core.ir.Assign object at 0x0000029B6C88E9A0>],
             '$146build_slice.15': [<numba.core.ir.Assign object at 0x0000029B6C88EAC0>],
             '$150build_tuple.17': [<numba.core.ir.Assign object at 0x0000029B6C88ED90>],
             '$164build_slice.5': [<numba.core.ir.Assign object at 0x0000029B6C8984C0>],
             '$164build_slice.6': [<numba.core.ir.Assign object at 0x0000029B6C8985E0>],
             '$168build_tuple.8': [<numba.core.ir.Assign object at 0x0000029B6C8988B0>],
             '$16load_attr.1': [<numba.core.ir.Assign object at 0x0000029B6C877220>],
             '$178compare_op.2': [<numba.core.ir.Assign object at 0x0000029B6C898DF0>],
             '$180pred': [<numba.core.ir.Assign object at 0x0000029B6C89D0A0>],
             '$188is_op.2': [<numba.core.ir.Assign object at 0x0000029B6C89D5B0>],
             '$18unpack_sequence.2': [<numba.core.ir.Assign object at 0x0000029B6C877520>],
             '$18unpack_sequence.3': [<numba.core.ir.Assign object at 0x0000029B6C877640>],
             '$18unpack_sequence.4': [<numba.core.ir.Assign object at 0x0000029B6C8773D0>],
             '$190pred': [<numba.core.ir.Assign object at 0x0000029B6C89D820>],
             '$192load_global.0': [<numba.core.ir.Assign object at 0x0000029B6C89DA60>],
             '$194load_attr.1': [<numba.core.ir.Assign object at 0x0000029B6C89DBE0>],
             '$198load_global.3': [<numba.core.ir.Assign object at 0x0000029B6C89DE80>],
             '$200load_attr.4': [<numba.core.ir.Assign object at 0x0000029B6C923040>],
             '$204call_function_kw.6': [<numba.core.ir.Assign object at 0x0000029B6C923490>],
             '$206load_global.7': [<numba.core.ir.Assign object at 0x0000029B6C923370>],
             '$208load_method.8': [<numba.core.ir.Assign object at 0x0000029B6C9236A0>],
             '$212call_method.10': [<numba.core.ir.Assign object at 0x0000029B6C9239D0>],
             '$218load_global.0': [<numba.core.ir.Assign object at 0x0000029B6C923CA0>],
             '$222call_function.2': [<numba.core.ir.Assign object at 0x0000029B6C923FA0>],
             '$224get_iter.3': [<numba.core.ir.Assign object at 0x0000029B6C929100>],
             '$226for_iter.1': [<numba.core.ir.Assign object at 0x0000029B6C929430>],
             '$226for_iter.2': [<numba.core.ir.Assign object at 0x0000029B6C929550>],
             '$226for_iter.3': [<numba.core.ir.Assign object at 0x0000029B6C929670>],
             '$230load_global.2': [<numba.core.ir.Assign object at 0x0000029B6C929A60>],
             '$232load_method.3': [<numba.core.ir.Assign object at 0x0000029B6C929BE0>],
             '$234load_global.4': [<numba.core.ir.Assign object at 0x0000029B6C929D60>],
             '$236load_method.5': [<numba.core.ir.Assign object at 0x0000029B6C929EE0>],
             '$244build_slice.10': [<numba.core.ir.Assign object at 0x0000029B6C9545E0>],
             '$244build_slice.9': [<numba.core.ir.Assign object at 0x0000029B6C9544C0>],
             '$248build_tuple.12': [<numba.core.ir.Assign object at 0x0000029B6C9548B0>],
             '$24load_global.5': [<numba.core.ir.Assign object at 0x0000029B6C8779A0>],
             '$250binary_subscr.13': [<numba.core.ir.Assign object at 0x0000029B6C954A30>],
             '$254binary_power.15': [<numba.core.ir.Assign object at 0x0000029B6C954D30>],
             '$256call_method.16': [<numba.core.ir.Assign object at 0x0000029B6C954F10>],
             '$266compare_op.20': [<numba.core.ir.Assign object at 0x0000029B6C9304F0>],
             '$268pred': [<numba.core.ir.Assign object at 0x0000029B6C930760>],
             '$26load_method.6': [<numba.core.ir.Assign object at 0x0000029B6C877B20>],
             '$278build_slice.4': [<numba.core.ir.Assign object at 0x0000029B6C930BE0>],
             '$278build_slice.5': [<numba.core.ir.Assign object at 0x0000029B6C930D00>],
             '$282build_tuple.7': [<numba.core.ir.Assign object at 0x0000029B6C930FD0>],
             '$284binary_subscr.8': [<numba.core.ir.Assign object at 0x0000029B6C932190>],
             '$288binary_true_divide.10': [<numba.core.ir.Assign object at 0x0000029B6C932430>],
             '$296build_slice.14': [<numba.core.ir.Assign object at 0x0000029B6C9329A0>],
             '$296build_slice.15': [<numba.core.ir.Assign object at 0x0000029B6C932AC0>],
             '$300build_tuple.17': [<numba.core.ir.Assign object at 0x0000029B6C932D90>],
             '$314build_slice.5': [<numba.core.ir.Assign object at 0x0000029B6C9374C0>],
             '$314build_slice.6': [<numba.core.ir.Assign object at 0x0000029B6C9375E0>],
             '$318build_tuple.8': [<numba.core.ir.Assign object at 0x0000029B6C9378B0>],
             '$328compare_op.2': [<numba.core.ir.Assign object at 0x0000029B6C937DF0>],
             '$32build_tuple.9': [<numba.core.ir.Assign object at 0x0000029B6C877F10>],
             '$330pred': [<numba.core.ir.Assign object at 0x0000029B6C93D0A0>],
             '$338is_op.2': [<numba.core.ir.Assign object at 0x0000029B6C93D5B0>],
             '$340pred': [<numba.core.ir.Assign object at 0x0000029B6C93D820>],
             '$344load_global.0': [<numba.core.ir.Assign object at 0x0000029B6C93DA60>],
             '$346load_attr.1': [<numba.core.ir.Assign object at 0x0000029B6C93DBE0>],
             '$350load_global.3': [<numba.core.ir.Assign object at 0x0000029B6C93DE80>],
             '$352load_attr.4': [<numba.core.ir.Assign object at 0x0000029B6C93F040>],
             '$360load_global.0': [<numba.core.ir.Assign object at 0x0000029B6C93F5E0>],
             '$364call_function.2': [<numba.core.ir.Assign object at 0x0000029B6C93F8E0>],
             '$366get_iter.3': [<numba.core.ir.Assign object at 0x0000029B6C93FA00>],
             '$368for_iter.1': [<numba.core.ir.Assign object at 0x0000029B6C93FD30>],
             '$368for_iter.2': [<numba.core.ir.Assign object at 0x0000029B6C93FE50>],
             '$368for_iter.3': [<numba.core.ir.Assign object at 0x0000029B6C93FF70>],
             '$372load_global.2': [<numba.core.ir.Assign object at 0x0000029B6C9493A0>],
             '$374load_method.3': [<numba.core.ir.Assign object at 0x0000029B6C949520>],
             '$376load_global.4': [<numba.core.ir.Assign object at 0x0000029B6C9496A0>],
             '$378load_method.5': [<numba.core.ir.Assign object at 0x0000029B6C949820>],
             '$386build_slice.10': [<numba.core.ir.Assign object at 0x0000029B6C949EE0>],
             '$386build_slice.9': [<numba.core.ir.Assign object at 0x0000029B6C949DC0>],
             '$390build_tuple.12': [<numba.core.ir.Assign object at 0x0000029B6C93B1F0>],
             '$392binary_subscr.13': [<numba.core.ir.Assign object at 0x0000029B6C93B370>],
             '$394call_method.14': [<numba.core.ir.Assign object at 0x0000029B6C93B550>],
             '$404compare_op.18': [<numba.core.ir.Assign object at 0x0000029B6C93BAF0>],
             '$406pred': [<numba.core.ir.Assign object at 0x0000029B6C93BD60>],
             '$416build_slice.4': [<numba.core.ir.Assign object at 0x0000029B6C950220>],
             '$416build_slice.5': [<numba.core.ir.Assign object at 0x0000029B6C950340>],
             '$420build_tuple.7': [<numba.core.ir.Assign object at 0x0000029B6C950610>],
             '$422binary_subscr.8': [<numba.core.ir.Assign object at 0x0000029B6C950790>],
             '$426binary_true_divide.10': [<numba.core.ir.Assign object at 0x0000029B6C950A30>],
             '$42compare_op.13': [<numba.core.ir.Assign object at 0x0000029B6C887610>],
             '$434build_slice.14': [<numba.core.ir.Assign object at 0x0000029B6C950FA0>],
             '$434build_slice.15': [<numba.core.ir.Assign object at 0x0000029B6C94E100>],
             '$438build_tuple.17': [<numba.core.ir.Assign object at 0x0000029B6C94E3D0>],
             '$44pred': [<numba.core.ir.Assign object at 0x0000029B6C887880>],
             '$452build_slice.5': [<numba.core.ir.Assign object at 0x0000029B6C94EAC0>],
             '$452build_slice.6': [<numba.core.ir.Assign object at 0x0000029B6C94EBE0>],
             '$456build_tuple.8': [<numba.core.ir.Assign object at 0x0000029B6C94EEB0>],
             '$468compare_op.2': [<numba.core.ir.Assign object at 0x0000029B6C95B550>],
             '$470pred': [<numba.core.ir.Assign object at 0x0000029B6C95B7C0>],
             '$478is_op.2': [<numba.core.ir.Assign object at 0x0000029B6C95BCD0>],
             '$480pred': [<numba.core.ir.Assign object at 0x0000029B6C95BF40>],
             '$484load_global.0': [<numba.core.ir.Assign object at 0x0000029B6C9591C0>],
             '$486load_attr.1': [<numba.core.ir.Assign object at 0x0000029B6C959340>],
             '$490load_global.3': [<numba.core.ir.Assign object at 0x0000029B6C9595E0>],
             '$492load_attr.4': [<numba.core.ir.Assign object at 0x0000029B6C959760>],
             '$500load_global.0': [<numba.core.ir.Assign object at 0x0000029B6C959D00>],
             '$504call_function.2': [<numba.core.ir.Assign object at 0x0000029B6C621040>],
             '$506get_iter.3': [<numba.core.ir.Assign object at 0x0000029B6C621160>],
             '$508for_iter.1': [<numba.core.ir.Assign object at 0x0000029B6C621490>],
             '$508for_iter.2': [<numba.core.ir.Assign object at 0x0000029B6C6215B0>],
             '$508for_iter.3': [<numba.core.ir.Assign object at 0x0000029B6C6216D0>],
             '$50is_op.2': [<numba.core.ir.Assign object at 0x0000029B6C887C10>],
             '$512load_global.2': [<numba.core.ir.Assign object at 0x0000029B6C621AC0>],
             '$514load_method.3': [<numba.core.ir.Assign object at 0x0000029B6C621C40>],
             '$522build_slice.7': [<numba.core.ir.Assign object at 0x0000029B6C634220>],
             '$522build_slice.8': [<numba.core.ir.Assign object at 0x0000029B6C634340>],
             '$526build_tuple.10': [<numba.core.ir.Assign object at 0x0000029B6C634610>],
             '$528binary_subscr.11': [<numba.core.ir.Assign object at 0x0000029B6C634790>],
             '$52pred': [<numba.core.ir.Assign object at 0x0000029B6C887E80>],
             '$530call_method.12': [<numba.core.ir.Assign object at 0x0000029B6C634970>],
             '$538load_global.15': [<numba.core.ir.Assign object at 0x0000029B6C634E20>],
             '$540load_method.16': [<numba.core.ir.Assign object at 0x0000029B6C634FA0>],
             '$542load_global.17': [<numba.core.ir.Assign object at 0x0000029B6C627160>],
             '$544load_method.18': [<numba.core.ir.Assign object at 0x0000029B6C6272E0>],
             '$54load_global.0': [<numba.core.ir.Assign object at 0x0000029B6C89A100>],
             '$552build_slice.22': [<numba.core.ir.Assign object at 0x0000029B6C627880>],
             '$552build_slice.23': [<numba.core.ir.Assign object at 0x0000029B6C6279A0>],
             '$556build_tuple.25': [<numba.core.ir.Assign object at 0x0000029B6C627C70>],
             '$558binary_subscr.26': [<numba.core.ir.Assign object at 0x0000029B6C627DF0>],
             '$562binary_subtract.28': [<numba.core.ir.Assign object at 0x0000029B6C63C0D0>],
             '$566binary_power.30': [<numba.core.ir.Assign object at 0x0000029B6C63C3D0>],
             '$568call_method.31': [<numba.core.ir.Assign object at 0x0000029B6C63C5B0>],
             '$56load_attr.1': [<numba.core.ir.Assign object at 0x0000029B6C89A280>],
             '$574binary_subtract.34': [<numba.core.ir.Assign object at 0x0000029B6C63C970>],
             '$576binary_true_divide.35': [<numba.core.ir.Assign object at 0x0000029B6C63CAF0>],
             '$586compare_op.39': [<numba.core.ir.Assign object at 0x0000029B6C62E190>],
             '$588pred': [<numba.core.ir.Assign object at 0x0000029B6C62E400>],
             '$598build_slice.4': [<numba.core.ir.Assign object at 0x0000029B6C62E6A0>],
             '$598build_slice.5': [<numba.core.ir.Assign object at 0x0000029B6C62E7C0>],
             '$602build_tuple.7': [<numba.core.ir.Assign object at 0x0000029B6C62EA90>],
             '$604binary_subscr.8': [<numba.core.ir.Assign object at 0x0000029B6C62EC10>],
             '$608binary_subtract.10': [<numba.core.ir.Assign object at 0x0000029B6C62EEB0>],
             '$60load_global.3': [<numba.core.ir.Assign object at 0x0000029B6C89A520>],
             '$612binary_true_divide.12': [<numba.core.ir.Assign object at 0x0000029B6C62A190>],
             '$620build_slice.16': [<numba.core.ir.Assign object at 0x0000029B6C62A700>],
             '$620build_slice.17': [<numba.core.ir.Assign object at 0x0000029B6C62A820>],
             '$624build_tuple.19': [<numba.core.ir.Assign object at 0x0000029B6C62AAF0>],
             '$62load_attr.4': [<numba.core.ir.Assign object at 0x0000029B6C89A6A0>],
             '$638build_slice.5': [<numba.core.ir.Assign object at 0x0000029B6C63E1C0>],
             '$638build_slice.6': [<numba.core.ir.Assign object at 0x0000029B6C63E2E0>],
             '$642build_tuple.8': [<numba.core.ir.Assign object at 0x0000029B6C63E5B0>],
             '$652return_value.1': [<numba.core.ir.Assign object at 0x0000029B6C63EA60>],
             '$66call_function_kw.6': [<numba.core.ir.Assign object at 0x0000029B6C89AAF0>],
             '$6contains_op.2': [<numba.core.ir.Assign object at 0x0000029B6C7AF760>],
             '$74load_global.0': [<numba.core.ir.Assign object at 0x0000029B6C89AE80>],
             '$78call_function.2': [<numba.core.ir.Assign object at 0x0000029B6C8641C0>],
             '$80get_iter.3': [<numba.core.ir.Assign object at 0x0000029B6C8642E0>],
             '$82for_iter.1': [<numba.core.ir.Assign object at 0x0000029B6C864610>],
             '$82for_iter.2': [<numba.core.ir.Assign object at 0x0000029B6C864730>],
             '$82for_iter.3': [<numba.core.ir.Assign object at 0x0000029B6C864850>],
             '$86load_global.2': [<numba.core.ir.Assign object at 0x0000029B6C864CA0>],
             '$88load_method.3': [<numba.core.ir.Assign object at 0x0000029B6C864E20>],
             '$8pred': [<numba.core.ir.Assign object at 0x0000029B6C7AFB80>],
             '$90load_global.4': [<numba.core.ir.Assign object at 0x0000029B6C864FA0>],
             '$92load_method.5': [<numba.core.ir.Assign object at 0x0000029B6C87D160>],
             '$assertion_error10.0': [<numba.core.ir.Assign object at 0x0000029B6C7AFDC0>],
             '$const124.2': [<numba.core.ir.Assign object at 0x0000029B6C8858E0>],
             '$const126.3': [<numba.core.ir.Assign object at 0x0000029B6C885A60>],
             '$const142.12': [<numba.core.ir.Assign object at 0x0000029B6C88E6A0>],
             '$const144.13': [<numba.core.ir.Assign object at 0x0000029B6C88E820>],
             '$const160.3': [<numba.core.ir.Assign object at 0x0000029B6C8981C0>],
             '$const162.4': [<numba.core.ir.Assign object at 0x0000029B6C898340>],
             '$const176.1': [<numba.core.ir.Assign object at 0x0000029B6C898C40>],
             '$const186.1': [<numba.core.ir.Assign object at 0x0000029B6C89D400>],
             '$const240.7': [<numba.core.ir.Assign object at 0x0000029B6C9541C0>],
             '$const242.8': [<numba.core.ir.Assign object at 0x0000029B6C954340>],
             '$const252.14': [<numba.core.ir.Assign object at 0x0000029B6C954B80>],
             '$const274.2': [<numba.core.ir.Assign object at 0x0000029B6C9308E0>],
             '$const276.3': [<numba.core.ir.Assign object at 0x0000029B6C930A60>],
             '$const292.12': [<numba.core.ir.Assign object at 0x0000029B6C9326A0>],
             '$const294.13': [<numba.core.ir.Assign object at 0x0000029B6C932820>],
             '$const310.3': [<numba.core.ir.Assign object at 0x0000029B6C9371C0>],
             '$const312.4': [<numba.core.ir.Assign object at 0x0000029B6C937340>],
             '$const326.1': [<numba.core.ir.Assign object at 0x0000029B6C937C40>],
             '$const336.1': [<numba.core.ir.Assign object at 0x0000029B6C93D400>],
             '$const382.7': [<numba.core.ir.Assign object at 0x0000029B6C949AC0>],
             '$const384.8': [<numba.core.ir.Assign object at 0x0000029B6C949C40>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000029B6B8F5C70>],
             '$const40.12': [<numba.core.ir.Assign object at 0x0000029B6C887460>],
             '$const412.2': [<numba.core.ir.Assign object at 0x0000029B6C93BEE0>],
             '$const414.3': [<numba.core.ir.Assign object at 0x0000029B6C9500A0>],
             '$const430.12': [<numba.core.ir.Assign object at 0x0000029B6C950CA0>],
             '$const432.13': [<numba.core.ir.Assign object at 0x0000029B6C950E20>],
             '$const448.3': [<numba.core.ir.Assign object at 0x0000029B6C94E7C0>],
             '$const450.4': [<numba.core.ir.Assign object at 0x0000029B6C94E940>],
             '$const466.1': [<numba.core.ir.Assign object at 0x0000029B6C95B3A0>],
             '$const476.1': [<numba.core.ir.Assign object at 0x0000029B6C95BB20>],
             '$const48.1': [<numba.core.ir.Assign object at 0x0000029B6C887A60>],
             '$const518.5': [<numba.core.ir.Assign object at 0x0000029B6C621EE0>],
             '$const520.6': [<numba.core.ir.Assign object at 0x0000029B6C6340A0>],
             '$const548.20': [<numba.core.ir.Assign object at 0x0000029B6C627580>],
             '$const550.21': [<numba.core.ir.Assign object at 0x0000029B6C627700>],
             '$const564.29': [<numba.core.ir.Assign object at 0x0000029B6C63C220>],
             '$const572.33': [<numba.core.ir.Assign object at 0x0000029B6C63C7C0>],
             '$const594.2': [<numba.core.ir.Assign object at 0x0000029B6C63CFA0>],
             '$const596.3': [<numba.core.ir.Assign object at 0x0000029B6C62E520>],
             '$const616.14': [<numba.core.ir.Assign object at 0x0000029B6C62A400>],
             '$const618.15': [<numba.core.ir.Assign object at 0x0000029B6C62A580>],
             '$const634.3': [<numba.core.ir.Assign object at 0x0000029B6C62AE80>],
             '$const636.4': [<numba.core.ir.Assign object at 0x0000029B6C63E040>],
             '$const96.7': [<numba.core.ir.Assign object at 0x0000029B6C87D400>],
             '$const98.8': [<numba.core.ir.Assign object at 0x0000029B6C87D580>],
             '$const_1': [<numba.core.ir.Assign object at 0x0000029B6C9FDC70>],
             '$const_2': [<numba.core.ir.Assign object at 0x0000029B6C9FD670>],
             '$const_max': [<numba.core.ir.Assign object at 0x0000029B6C9FDF70>],
             '$const_z': [<numba.core.ir.Assign object at 0x0000029B6C9FD8B0>],
             '$phi226.0': [<numba.core.ir.Assign object at 0x0000029B6C923E50>],
             '$phi228.1': [<numba.core.ir.Assign object at 0x0000029B6C929370>],
             '$phi368.0': [<numba.core.ir.Assign object at 0x0000029B6C93F700>],
             '$phi370.1': [<numba.core.ir.Assign object at 0x0000029B6C93FC70>],
             '$phi508.0': [<numba.core.ir.Assign object at 0x0000029B6C959EB0>],
             '$phi510.1': [<numba.core.ir.Assign object at 0x0000029B6C6213D0>],
             '$phi82.0': [<numba.core.ir.Assign object at 0x0000029B6C887FA0>],
             '$phi84.1': [<numba.core.ir.Assign object at 0x0000029B6C864550>],
             'K': [<numba.core.ir.Assign object at 0x0000029B6C877700>],
             'N': [<numba.core.ir.Assign object at 0x0000029B6C877820>],
             'X': [<numba.core.ir.Assign object at 0x0000029B6C9FDFA0>],
             'X_norm': [<numba.core.ir.Assign object at 0x0000029B6C887130>],
             'bool120': [<numba.core.ir.Assign object at 0x0000029B6C8855E0>],
             'bool180': [<numba.core.ir.Assign object at 0x0000029B6C898F40>],
             'bool190': [<numba.core.ir.Assign object at 0x0000029B6C89D700>],
             'bool268': [<numba.core.ir.Assign object at 0x0000029B6C930640>],
             'bool330': [<numba.core.ir.Assign object at 0x0000029B6C937F40>],
             'bool340': [<numba.core.ir.Assign object at 0x0000029B6C93D700>],
             'bool406': [<numba.core.ir.Assign object at 0x0000029B6C93BC40>],
             'bool44': [<numba.core.ir.Assign object at 0x0000029B6C887760>],
             'bool470': [<numba.core.ir.Assign object at 0x0000029B6C95B6A0>],
             'bool480': [<numba.core.ir.Assign object at 0x0000029B6C95BE20>],
             'bool52': [<numba.core.ir.Assign object at 0x0000029B6C887D60>],
             'bool588': [<numba.core.ir.Assign object at 0x0000029B6C62E2E0>],
             'bool8': [<numba.core.ir.Assign object at 0x0000029B6C7AFA60>],
             'mu': [<numba.core.ir.Assign object at 0x0000029B6C634BB0>],
             'n': [<numba.core.ir.Assign object at 0x0000029B6C864B20>,
                   <numba.core.ir.Assign object at 0x0000029B6C929910>,
                   <numba.core.ir.Assign object at 0x0000029B6C949250>,
                   <numba.core.ir.Assign object at 0x0000029B6C621970>],
             'norm': [<numba.core.ir.Assign object at 0x0000029B6C9FD850>],
             's': [<numba.core.ir.Assign object at 0x0000029B6C87DFD0>,
                   <numba.core.ir.Assign object at 0x0000029B6C9300D0>,
                   <numba.core.ir.Assign object at 0x0000029B6C93B6D0>],
             'sigma': [<numba.core.ir.Assign object at 0x0000029B6C63CCD0>],
             'threshold': [<numba.core.ir.Assign object at 0x0000029B6C9FDB50>],
             'v': [<numba.core.ir.Assign object at 0x0000029B6C9FDFD0>,
                   <numba.core.ir.Assign object at 0x0000029B6C89ACD0>,
                   <numba.core.ir.Assign object at 0x0000029B6C923AF0>,
                   <numba.core.ir.Assign object at 0x0000029B6C93F490>,
                   <numba.core.ir.Assign object at 0x0000029B6C959BB0>]})
DEBUG:numba.core.ssa:SSA violators {'v', 'n', 's'}
DEBUG:numba.core.ssa:Fix SSA violator on var v
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: X = arg(0, name=X)
DEBUG:numba.core.ssa:on stmt: norm = arg(1, name=norm)
DEBUG:numba.core.ssa:on stmt: threshold = arg(2, name=threshold)
DEBUG:numba.core.ssa:on stmt: v = arg(3, name=v)
DEBUG:numba.core.ssa:first assign: v
DEBUG:numba.core.ssa:replaced with: v = arg(3, name=v)
DEBUG:numba.core.ssa:on stmt: $const_1 = const(str, 1)
DEBUG:numba.core.ssa:on stmt: $const_2 = const(str, 2)
DEBUG:numba.core.ssa:on stmt: $const_max = const(str, max)
DEBUG:numba.core.ssa:on stmt: $const_z = const(str, z)
DEBUG:numba.core.ssa:on stmt: $const4.1 = build_tuple(items=[Var($const_1, c3s1_post_processing.py:47), Var($const_2, c3s1_post_processing.py:47), Var($const_max, c3s1_post_processing.py:47), Var($const_z, c3s1_post_processing.py:47)])
DEBUG:numba.core.ssa:on stmt: $6contains_op.2 = norm in $const4.1
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6contains_op.2, func=bool8, args=(Var($6contains_op.2, c3s1_post_processing.py:47),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 14, 10
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $assertion_error10.0 = global(AssertionError: <class 'AssertionError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'AssertionError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $16load_attr.1 = getattr(value=X, attr=shape)
DEBUG:numba.core.ssa:on stmt: $18unpack_sequence.4 = exhaust_iter(value=$16load_attr.1, count=2)
DEBUG:numba.core.ssa:on stmt: $18unpack_sequence.2 = static_getitem(value=$18unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $18unpack_sequence.3 = static_getitem(value=$18unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: K = $18unpack_sequence.2
DEBUG:numba.core.ssa:on stmt: N = $18unpack_sequence.3
DEBUG:numba.core.ssa:on stmt: $24load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $26load_method.6 = getattr(value=$24load_global.5, attr=zeros)
DEBUG:numba.core.ssa:on stmt: $32build_tuple.9 = build_tuple(items=[Var(K, c3s1_post_processing.py:49), Var(N, c3s1_post_processing.py:49)])
DEBUG:numba.core.ssa:on stmt: X_norm = call $26load_method.6($32build_tuple.9, func=$26load_method.6, args=[Var($32build_tuple.9, c3s1_post_processing.py:50)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const40.12 = const(str, 1)
DEBUG:numba.core.ssa:on stmt: $42compare_op.13 = norm == $const40.12
DEBUG:numba.core.ssa:on stmt: bool44 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $44pred = call bool44($42compare_op.13, func=bool44, args=(Var($42compare_op.13, c3s1_post_processing.py:52),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $44pred, 46, 174
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 46
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const48.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $50is_op.2 = v is $const48.1
DEBUG:numba.core.ssa:on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $52pred = call bool52($50is_op.2, func=bool52, args=(Var($50is_op.2, c3s1_post_processing.py:53),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $52pred, 54, 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 54
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $54load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $56load_attr.1 = getattr(value=$54load_global.0, attr=ones)
DEBUG:numba.core.ssa:on stmt: $60load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $62load_attr.4 = getattr(value=$60load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: $66call_function_kw.6 = call $56load_attr.1(K, func=$56load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($62load_attr.4, c3s1_post_processing.py:54))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: v = $66call_function_kw.6 / K
DEBUG:numba.core.ssa:replaced with: v.1 = $66call_function_kw.6 / K
DEBUG:numba.core.ssa:on stmt: jump 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $78call_function.2 = call $74load_global.0(N, func=$74load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $80get_iter.3 = getiter(value=$78call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi82.0 = $80get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 82
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 82
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $82for_iter.1 = iternext(value=$phi82.0)
DEBUG:numba.core.ssa:on stmt: $82for_iter.2 = pair_first(value=$82for_iter.1)
DEBUG:numba.core.ssa:on stmt: $82for_iter.3 = pair_second(value=$82for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi84.1 = $82for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $82for_iter.3, 84, 174
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: n = $phi84.1
DEBUG:numba.core.ssa:on stmt: $86load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $88load_method.3 = getattr(value=$86load_global.2, attr=sum)
DEBUG:numba.core.ssa:on stmt: $90load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=abs)
DEBUG:numba.core.ssa:on stmt: $const96.7 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const98.8 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $100build_slice.9 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $100build_slice.10 = call $100build_slice.9($const96.7, $const98.8, func=$100build_slice.9, args=(Var($const96.7, c3s1_post_processing.py:56), Var($const98.8, c3s1_post_processing.py:56)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $104build_tuple.12 = build_tuple(items=[Var($100build_slice.10, c3s1_post_processing.py:56), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $106binary_subscr.13 = getitem(value=X, index=$104build_tuple.12, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $108call_method.14 = call $92load_method.5($106binary_subscr.13, func=$92load_method.5, args=[Var($106binary_subscr.13, c3s1_post_processing.py:56)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: s = call $88load_method.3($108call_method.14, func=$88load_method.3, args=[Var($108call_method.14, c3s1_post_processing.py:56)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $118compare_op.18 = s > threshold
DEBUG:numba.core.ssa:on stmt: bool120 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $120pred = call bool120($118compare_op.18, func=bool120, args=(Var($118compare_op.18, c3s1_post_processing.py:57),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $120pred, 122, 156
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 122
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const124.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const126.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $128build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $128build_slice.5 = call $128build_slice.4($const124.2, $const126.3, func=$128build_slice.4, args=(Var($const124.2, c3s1_post_processing.py:58), Var($const126.3, c3s1_post_processing.py:58)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $132build_tuple.7 = build_tuple(items=[Var($128build_slice.5, c3s1_post_processing.py:58), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $134binary_subscr.8 = getitem(value=X, index=$132build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $138binary_true_divide.10 = $134binary_subscr.8 / s
DEBUG:numba.core.ssa:on stmt: $const142.12 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const144.13 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $146build_slice.14 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $146build_slice.15 = call $146build_slice.14($const142.12, $const144.13, func=$146build_slice.14, args=(Var($const142.12, c3s1_post_processing.py:58), Var($const144.13, c3s1_post_processing.py:58)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $150build_tuple.17 = build_tuple(items=[Var($146build_slice.15, c3s1_post_processing.py:58), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$150build_tuple.17] = $138binary_true_divide.10
DEBUG:numba.core.ssa:on stmt: jump 652
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 156
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const160.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const162.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $164build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $164build_slice.6 = call $164build_slice.5($const160.3, $const162.4, func=$164build_slice.5, args=(Var($const160.3, c3s1_post_processing.py:60), Var($const162.4, c3s1_post_processing.py:60)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $168build_tuple.8 = build_tuple(items=[Var($164build_slice.6, c3s1_post_processing.py:60), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$168build_tuple.8] = v
DEBUG:numba.core.ssa:on stmt: jump 652
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 174
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const176.1 = const(str, 2)
DEBUG:numba.core.ssa:on stmt: $178compare_op.2 = norm == $const176.1
DEBUG:numba.core.ssa:on stmt: bool180 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $180pred = call bool180($178compare_op.2, func=bool180, args=(Var($178compare_op.2, c3s1_post_processing.py:62),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $180pred, 184, 324
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const186.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $188is_op.2 = v is $const186.1
DEBUG:numba.core.ssa:on stmt: bool190 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $190pred = call bool190($188is_op.2, func=bool190, args=(Var($188is_op.2, c3s1_post_processing.py:63),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $190pred, 192, 218
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 192
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $194load_attr.1 = getattr(value=$192load_global.0, attr=ones)
DEBUG:numba.core.ssa:on stmt: $198load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $200load_attr.4 = getattr(value=$198load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: $204call_function_kw.6 = call $194load_attr.1(K, func=$194load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($200load_attr.4, c3s1_post_processing.py:64))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $206load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $208load_method.8 = getattr(value=$206load_global.7, attr=sqrt)
DEBUG:numba.core.ssa:on stmt: $212call_method.10 = call $208load_method.8(K, func=$208load_method.8, args=[Var(K, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: v = $204call_function_kw.6 / $212call_method.10
DEBUG:numba.core.ssa:replaced with: v.2 = $204call_function_kw.6 / $212call_method.10
DEBUG:numba.core.ssa:on stmt: jump 218
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 218
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $218load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $222call_function.2 = call $218load_global.0(N, func=$218load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $224get_iter.3 = getiter(value=$222call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi226.0 = $224get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 226
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 226
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $226for_iter.1 = iternext(value=$phi226.0)
DEBUG:numba.core.ssa:on stmt: $226for_iter.2 = pair_first(value=$226for_iter.1)
DEBUG:numba.core.ssa:on stmt: $226for_iter.3 = pair_second(value=$226for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi228.1 = $226for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $226for_iter.3, 228, 324
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 228
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: n = $phi228.1
DEBUG:numba.core.ssa:on stmt: $230load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $232load_method.3 = getattr(value=$230load_global.2, attr=sqrt)
DEBUG:numba.core.ssa:on stmt: $234load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $236load_method.5 = getattr(value=$234load_global.4, attr=sum)
DEBUG:numba.core.ssa:on stmt: $const240.7 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const242.8 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $244build_slice.9 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $244build_slice.10 = call $244build_slice.9($const240.7, $const242.8, func=$244build_slice.9, args=(Var($const240.7, c3s1_post_processing.py:66), Var($const242.8, c3s1_post_processing.py:66)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $248build_tuple.12 = build_tuple(items=[Var($244build_slice.10, c3s1_post_processing.py:66), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $250binary_subscr.13 = getitem(value=X, index=$248build_tuple.12, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const252.14 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $254binary_power.15 = $250binary_subscr.13 ** $const252.14
DEBUG:numba.core.ssa:on stmt: $256call_method.16 = call $236load_method.5($254binary_power.15, func=$236load_method.5, args=[Var($254binary_power.15, c3s1_post_processing.py:66)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: s = call $232load_method.3($256call_method.16, func=$232load_method.3, args=[Var($256call_method.16, c3s1_post_processing.py:66)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $266compare_op.20 = s > threshold
DEBUG:numba.core.ssa:on stmt: bool268 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $268pred = call bool268($266compare_op.20, func=bool268, args=(Var($266compare_op.20, c3s1_post_processing.py:67),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $268pred, 272, 306
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 272
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const274.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const276.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $278build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $278build_slice.5 = call $278build_slice.4($const274.2, $const276.3, func=$278build_slice.4, args=(Var($const274.2, c3s1_post_processing.py:68), Var($const276.3, c3s1_post_processing.py:68)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $282build_tuple.7 = build_tuple(items=[Var($278build_slice.5, c3s1_post_processing.py:68), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $284binary_subscr.8 = getitem(value=X, index=$282build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $288binary_true_divide.10 = $284binary_subscr.8 / s
DEBUG:numba.core.ssa:on stmt: $const292.12 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const294.13 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $296build_slice.14 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $296build_slice.15 = call $296build_slice.14($const292.12, $const294.13, func=$296build_slice.14, args=(Var($const292.12, c3s1_post_processing.py:68), Var($const294.13, c3s1_post_processing.py:68)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $300build_tuple.17 = build_tuple(items=[Var($296build_slice.15, c3s1_post_processing.py:68), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$300build_tuple.17] = $288binary_true_divide.10
DEBUG:numba.core.ssa:on stmt: jump 651
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 306
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const310.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const312.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $314build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $314build_slice.6 = call $314build_slice.5($const310.3, $const312.4, func=$314build_slice.5, args=(Var($const310.3, c3s1_post_processing.py:70), Var($const312.4, c3s1_post_processing.py:70)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $318build_tuple.8 = build_tuple(items=[Var($314build_slice.6, c3s1_post_processing.py:70), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$318build_tuple.8] = v
DEBUG:numba.core.ssa:on stmt: jump 651
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 324
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const326.1 = const(str, max)
DEBUG:numba.core.ssa:on stmt: $328compare_op.2 = norm == $const326.1
DEBUG:numba.core.ssa:on stmt: bool330 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $330pred = call bool330($328compare_op.2, func=bool330, args=(Var($328compare_op.2, c3s1_post_processing.py:72),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $330pred, 334, 464
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 334
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const336.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $338is_op.2 = v is $const336.1
DEBUG:numba.core.ssa:on stmt: bool340 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $340pred = call bool340($338is_op.2, func=bool340, args=(Var($338is_op.2, c3s1_post_processing.py:73),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $340pred, 344, 360
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $344load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $346load_attr.1 = getattr(value=$344load_global.0, attr=ones)
DEBUG:numba.core.ssa:on stmt: $350load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $352load_attr.4 = getattr(value=$350load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: v = call $346load_attr.1(K, func=$346load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($352load_attr.4, c3s1_post_processing.py:74))], vararg=None, target=None)
DEBUG:numba.core.ssa:replaced with: v.3 = call $346load_attr.1(K, func=$346load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($352load_attr.4, c3s1_post_processing.py:74))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 360
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 360
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $360load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $364call_function.2 = call $360load_global.0(N, func=$360load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $366get_iter.3 = getiter(value=$364call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi368.0 = $366get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 368
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 368
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $368for_iter.1 = iternext(value=$phi368.0)
DEBUG:numba.core.ssa:on stmt: $368for_iter.2 = pair_first(value=$368for_iter.1)
DEBUG:numba.core.ssa:on stmt: $368for_iter.3 = pair_second(value=$368for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi370.1 = $368for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $368for_iter.3, 370, 464
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 370
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: n = $phi370.1
DEBUG:numba.core.ssa:on stmt: $372load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $374load_method.3 = getattr(value=$372load_global.2, attr=max)
DEBUG:numba.core.ssa:on stmt: $376load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $378load_method.5 = getattr(value=$376load_global.4, attr=abs)
DEBUG:numba.core.ssa:on stmt: $const382.7 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const384.8 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $386build_slice.9 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $386build_slice.10 = call $386build_slice.9($const382.7, $const384.8, func=$386build_slice.9, args=(Var($const382.7, c3s1_post_processing.py:76), Var($const384.8, c3s1_post_processing.py:76)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390build_tuple.12 = build_tuple(items=[Var($386build_slice.10, c3s1_post_processing.py:76), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $392binary_subscr.13 = getitem(value=X, index=$390build_tuple.12, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $394call_method.14 = call $378load_method.5($392binary_subscr.13, func=$378load_method.5, args=[Var($392binary_subscr.13, c3s1_post_processing.py:76)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: s = call $374load_method.3($394call_method.14, func=$374load_method.3, args=[Var($394call_method.14, c3s1_post_processing.py:76)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $404compare_op.18 = s > threshold
DEBUG:numba.core.ssa:on stmt: bool406 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $406pred = call bool406($404compare_op.18, func=bool406, args=(Var($404compare_op.18, c3s1_post_processing.py:77),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $406pred, 410, 444
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 410
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const412.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const414.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $416build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $416build_slice.5 = call $416build_slice.4($const412.2, $const414.3, func=$416build_slice.4, args=(Var($const412.2, c3s1_post_processing.py:78), Var($const414.3, c3s1_post_processing.py:78)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $420build_tuple.7 = build_tuple(items=[Var($416build_slice.5, c3s1_post_processing.py:78), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $422binary_subscr.8 = getitem(value=X, index=$420build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $426binary_true_divide.10 = $422binary_subscr.8 / s
DEBUG:numba.core.ssa:on stmt: $const430.12 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const432.13 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $434build_slice.14 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $434build_slice.15 = call $434build_slice.14($const430.12, $const432.13, func=$434build_slice.14, args=(Var($const430.12, c3s1_post_processing.py:78), Var($const432.13, c3s1_post_processing.py:78)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $438build_tuple.17 = build_tuple(items=[Var($434build_slice.15, c3s1_post_processing.py:78), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$438build_tuple.17] = $426binary_true_divide.10
DEBUG:numba.core.ssa:on stmt: jump 460
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 444
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const448.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const450.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $452build_slice.6 = call $452build_slice.5($const448.3, $const450.4, func=$452build_slice.5, args=(Var($const448.3, c3s1_post_processing.py:80), Var($const450.4, c3s1_post_processing.py:80)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $456build_tuple.8 = build_tuple(items=[Var($452build_slice.6, c3s1_post_processing.py:80), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$456build_tuple.8] = v
DEBUG:numba.core.ssa:on stmt: jump 460
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 460
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: jump 368
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 464
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const466.1 = const(str, z)
DEBUG:numba.core.ssa:on stmt: $468compare_op.2 = norm == $const466.1
DEBUG:numba.core.ssa:on stmt: bool470 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $470pred = call bool470($468compare_op.2, func=bool470, args=(Var($468compare_op.2, c3s1_post_processing.py:82),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $470pred, 474, 650
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 474
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const476.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $478is_op.2 = v is $const476.1
DEBUG:numba.core.ssa:on stmt: bool480 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $480pred = call bool480($478is_op.2, func=bool480, args=(Var($478is_op.2, c3s1_post_processing.py:83),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $480pred, 484, 500
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 484
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $484load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $486load_attr.1 = getattr(value=$484load_global.0, attr=zeros)
DEBUG:numba.core.ssa:on stmt: $490load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $492load_attr.4 = getattr(value=$490load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: v = call $486load_attr.1(K, func=$486load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($492load_attr.4, c3s1_post_processing.py:84))], vararg=None, target=None)
DEBUG:numba.core.ssa:replaced with: v.4 = call $486load_attr.1(K, func=$486load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($492load_attr.4, c3s1_post_processing.py:84))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 500
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 500
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $500load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $504call_function.2 = call $500load_global.0(N, func=$500load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $506get_iter.3 = getiter(value=$504call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi508.0 = $506get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 508
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 508
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $508for_iter.1 = iternext(value=$phi508.0)
DEBUG:numba.core.ssa:on stmt: $508for_iter.2 = pair_first(value=$508for_iter.1)
DEBUG:numba.core.ssa:on stmt: $508for_iter.3 = pair_second(value=$508for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi510.1 = $508for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $508for_iter.3, 510, 650
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 510
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: n = $phi510.1
DEBUG:numba.core.ssa:on stmt: $512load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $514load_method.3 = getattr(value=$512load_global.2, attr=sum)
DEBUG:numba.core.ssa:on stmt: $const518.5 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const520.6 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $522build_slice.7 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $522build_slice.8 = call $522build_slice.7($const518.5, $const520.6, func=$522build_slice.7, args=(Var($const518.5, c3s1_post_processing.py:86), Var($const520.6, c3s1_post_processing.py:86)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $526build_tuple.10 = build_tuple(items=[Var($522build_slice.8, c3s1_post_processing.py:86), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $528binary_subscr.11 = getitem(value=X, index=$526build_tuple.10, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $530call_method.12 = call $514load_method.3($528binary_subscr.11, func=$514load_method.3, args=[Var($528binary_subscr.11, c3s1_post_processing.py:86)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: mu = $530call_method.12 / K
DEBUG:numba.core.ssa:on stmt: $538load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $540load_method.16 = getattr(value=$538load_global.15, attr=sqrt)
DEBUG:numba.core.ssa:on stmt: $542load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $544load_method.18 = getattr(value=$542load_global.17, attr=sum)
DEBUG:numba.core.ssa:on stmt: $const548.20 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const550.21 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $552build_slice.22 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $552build_slice.23 = call $552build_slice.22($const548.20, $const550.21, func=$552build_slice.22, args=(Var($const548.20, c3s1_post_processing.py:87), Var($const550.21, c3s1_post_processing.py:87)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $556build_tuple.25 = build_tuple(items=[Var($552build_slice.23, c3s1_post_processing.py:87), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $558binary_subscr.26 = getitem(value=X, index=$556build_tuple.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $562binary_subtract.28 = $558binary_subscr.26 - mu
DEBUG:numba.core.ssa:on stmt: $const564.29 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $566binary_power.30 = $562binary_subtract.28 ** $const564.29
DEBUG:numba.core.ssa:on stmt: $568call_method.31 = call $544load_method.18($566binary_power.30, func=$544load_method.18, args=[Var($566binary_power.30, c3s1_post_processing.py:87)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const572.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $574binary_subtract.34 = K - $const572.33
DEBUG:numba.core.ssa:on stmt: $576binary_true_divide.35 = $568call_method.31 / $574binary_subtract.34
DEBUG:numba.core.ssa:on stmt: sigma = call $540load_method.16($576binary_true_divide.35, func=$540load_method.16, args=[Var($576binary_true_divide.35, c3s1_post_processing.py:87)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $586compare_op.39 = sigma > threshold
DEBUG:numba.core.ssa:on stmt: bool588 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $588pred = call bool588($586compare_op.39, func=bool588, args=(Var($586compare_op.39, c3s1_post_processing.py:88),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $588pred, 592, 630
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 592
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const594.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const596.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $598build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $598build_slice.5 = call $598build_slice.4($const594.2, $const596.3, func=$598build_slice.4, args=(Var($const594.2, c3s1_post_processing.py:89), Var($const596.3, c3s1_post_processing.py:89)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $602build_tuple.7 = build_tuple(items=[Var($598build_slice.5, c3s1_post_processing.py:89), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $604binary_subscr.8 = getitem(value=X, index=$602build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $608binary_subtract.10 = $604binary_subscr.8 - mu
DEBUG:numba.core.ssa:on stmt: $612binary_true_divide.12 = $608binary_subtract.10 / sigma
DEBUG:numba.core.ssa:on stmt: $const616.14 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const618.15 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $620build_slice.16 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $620build_slice.17 = call $620build_slice.16($const616.14, $const618.15, func=$620build_slice.16, args=(Var($const616.14, c3s1_post_processing.py:89), Var($const618.15, c3s1_post_processing.py:89)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $624build_tuple.19 = build_tuple(items=[Var($620build_slice.17, c3s1_post_processing.py:89), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$624build_tuple.19] = $612binary_true_divide.12
DEBUG:numba.core.ssa:on stmt: jump 646
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 630
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const634.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const636.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $638build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $638build_slice.6 = call $638build_slice.5($const634.3, $const636.4, func=$638build_slice.5, args=(Var($const634.3, c3s1_post_processing.py:91), Var($const636.4, c3s1_post_processing.py:91)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $642build_tuple.8 = build_tuple(items=[Var($638build_slice.6, c3s1_post_processing.py:91), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$642build_tuple.8] = v
DEBUG:numba.core.ssa:on stmt: jump 646
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 646
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: jump 508
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 650
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $652return_value.1 = cast(value=X_norm)
DEBUG:numba.core.ssa:on stmt: return $652return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 651
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: jump 226
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 652
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: jump 82
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000029B6CB99400>],
             54: [<numba.core.ir.Assign object at 0x0000029B6CB992B0>],
             192: [<numba.core.ir.Assign object at 0x0000029B6CB996D0>],
             344: [<numba.core.ir.Assign object at 0x0000029B6C775B80>],
             484: [<numba.core.ir.Assign object at 0x0000029B6C775520>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: X = arg(0, name=X)
DEBUG:numba.core.ssa:on stmt: norm = arg(1, name=norm)
DEBUG:numba.core.ssa:on stmt: threshold = arg(2, name=threshold)
DEBUG:numba.core.ssa:on stmt: v = arg(3, name=v)
DEBUG:numba.core.ssa:on stmt: $const_1 = const(str, 1)
DEBUG:numba.core.ssa:on stmt: $const_2 = const(str, 2)
DEBUG:numba.core.ssa:on stmt: $const_max = const(str, max)
DEBUG:numba.core.ssa:on stmt: $const_z = const(str, z)
DEBUG:numba.core.ssa:on stmt: $const4.1 = build_tuple(items=[Var($const_1, c3s1_post_processing.py:47), Var($const_2, c3s1_post_processing.py:47), Var($const_max, c3s1_post_processing.py:47), Var($const_z, c3s1_post_processing.py:47)])
DEBUG:numba.core.ssa:on stmt: $6contains_op.2 = norm in $const4.1
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6contains_op.2, func=bool8, args=(Var($6contains_op.2, c3s1_post_processing.py:47),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 14, 10
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $assertion_error10.0 = global(AssertionError: <class 'AssertionError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'AssertionError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $16load_attr.1 = getattr(value=X, attr=shape)
DEBUG:numba.core.ssa:on stmt: $18unpack_sequence.4 = exhaust_iter(value=$16load_attr.1, count=2)
DEBUG:numba.core.ssa:on stmt: $18unpack_sequence.2 = static_getitem(value=$18unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $18unpack_sequence.3 = static_getitem(value=$18unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: K = $18unpack_sequence.2
DEBUG:numba.core.ssa:on stmt: N = $18unpack_sequence.3
DEBUG:numba.core.ssa:on stmt: $24load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $26load_method.6 = getattr(value=$24load_global.5, attr=zeros)
DEBUG:numba.core.ssa:on stmt: $32build_tuple.9 = build_tuple(items=[Var(K, c3s1_post_processing.py:49), Var(N, c3s1_post_processing.py:49)])
DEBUG:numba.core.ssa:on stmt: X_norm = call $26load_method.6($32build_tuple.9, func=$26load_method.6, args=[Var($32build_tuple.9, c3s1_post_processing.py:50)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const40.12 = const(str, 1)
DEBUG:numba.core.ssa:on stmt: $42compare_op.13 = norm == $const40.12
DEBUG:numba.core.ssa:on stmt: bool44 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $44pred = call bool44($42compare_op.13, func=bool44, args=(Var($42compare_op.13, c3s1_post_processing.py:52),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $44pred, 46, 174
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 46
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const48.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $50is_op.2 = v is $const48.1
DEBUG:numba.core.ssa:find_def var='v' stmt=$50is_op.2 = v is $const48.1
DEBUG:numba.core.ssa:find_def_from_top label 46
DEBUG:numba.core.ssa:idom 14 from label 46
DEBUG:numba.core.ssa:find_def_from_bottom label 14
DEBUG:numba.core.ssa:find_def_from_top label 14
DEBUG:numba.core.ssa:idom 0 from label 14
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $52pred = call bool52($50is_op.2, func=bool52, args=(Var($50is_op.2, c3s1_post_processing.py:53),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $52pred, 54, 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 54
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $54load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $56load_attr.1 = getattr(value=$54load_global.0, attr=ones)
DEBUG:numba.core.ssa:on stmt: $60load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $62load_attr.4 = getattr(value=$60load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: $66call_function_kw.6 = call $56load_attr.1(K, func=$56load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($62load_attr.4, c3s1_post_processing.py:54))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: v.1 = $66call_function_kw.6 / K
DEBUG:numba.core.ssa:on stmt: jump 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $78call_function.2 = call $74load_global.0(N, func=$74load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $80get_iter.3 = getiter(value=$78call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi82.0 = $80get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 82
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 82
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $82for_iter.1 = iternext(value=$phi82.0)
DEBUG:numba.core.ssa:on stmt: $82for_iter.2 = pair_first(value=$82for_iter.1)
DEBUG:numba.core.ssa:on stmt: $82for_iter.3 = pair_second(value=$82for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi84.1 = $82for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $82for_iter.3, 84, 174
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: n = $phi84.1
DEBUG:numba.core.ssa:on stmt: $86load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $88load_method.3 = getattr(value=$86load_global.2, attr=sum)
DEBUG:numba.core.ssa:on stmt: $90load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=abs)
DEBUG:numba.core.ssa:on stmt: $const96.7 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const98.8 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $100build_slice.9 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $100build_slice.10 = call $100build_slice.9($const96.7, $const98.8, func=$100build_slice.9, args=(Var($const96.7, c3s1_post_processing.py:56), Var($const98.8, c3s1_post_processing.py:56)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $104build_tuple.12 = build_tuple(items=[Var($100build_slice.10, c3s1_post_processing.py:56), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $106binary_subscr.13 = getitem(value=X, index=$104build_tuple.12, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $108call_method.14 = call $92load_method.5($106binary_subscr.13, func=$92load_method.5, args=[Var($106binary_subscr.13, c3s1_post_processing.py:56)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: s = call $88load_method.3($108call_method.14, func=$88load_method.3, args=[Var($108call_method.14, c3s1_post_processing.py:56)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $118compare_op.18 = s > threshold
DEBUG:numba.core.ssa:on stmt: bool120 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $120pred = call bool120($118compare_op.18, func=bool120, args=(Var($118compare_op.18, c3s1_post_processing.py:57),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $120pred, 122, 156
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 122
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const124.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const126.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $128build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $128build_slice.5 = call $128build_slice.4($const124.2, $const126.3, func=$128build_slice.4, args=(Var($const124.2, c3s1_post_processing.py:58), Var($const126.3, c3s1_post_processing.py:58)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $132build_tuple.7 = build_tuple(items=[Var($128build_slice.5, c3s1_post_processing.py:58), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $134binary_subscr.8 = getitem(value=X, index=$132build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $138binary_true_divide.10 = $134binary_subscr.8 / s
DEBUG:numba.core.ssa:on stmt: $const142.12 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const144.13 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $146build_slice.14 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $146build_slice.15 = call $146build_slice.14($const142.12, $const144.13, func=$146build_slice.14, args=(Var($const142.12, c3s1_post_processing.py:58), Var($const144.13, c3s1_post_processing.py:58)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $150build_tuple.17 = build_tuple(items=[Var($146build_slice.15, c3s1_post_processing.py:58), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$150build_tuple.17] = $138binary_true_divide.10
DEBUG:numba.core.ssa:on stmt: jump 652
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 156
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const160.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const162.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $164build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $164build_slice.6 = call $164build_slice.5($const160.3, $const162.4, func=$164build_slice.5, args=(Var($const160.3, c3s1_post_processing.py:60), Var($const162.4, c3s1_post_processing.py:60)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $168build_tuple.8 = build_tuple(items=[Var($164build_slice.6, c3s1_post_processing.py:60), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$168build_tuple.8] = v
DEBUG:numba.core.ssa:find_def var='v' stmt=X_norm[$168build_tuple.8] = v
DEBUG:numba.core.ssa:find_def_from_top label 156
DEBUG:numba.core.ssa:idom 84 from label 156
DEBUG:numba.core.ssa:find_def_from_bottom label 84
DEBUG:numba.core.ssa:find_def_from_top label 84
DEBUG:numba.core.ssa:idom 82 from label 84
DEBUG:numba.core.ssa:find_def_from_bottom label 82
DEBUG:numba.core.ssa:find_def_from_top label 82
DEBUG:numba.core.ssa:idom 74 from label 82
DEBUG:numba.core.ssa:find_def_from_bottom label 74
DEBUG:numba.core.ssa:find_def_from_top label 74
DEBUG:numba.core.ssa:insert phi node v.5 = phi(incoming_values=[], incoming_blocks=[]) at 74
DEBUG:numba.core.ssa:find_def_from_bottom label 54
DEBUG:numba.core.ssa:incoming_def v.1 = $66call_function_kw.6 / K
DEBUG:numba.core.ssa:find_def_from_bottom label 46
DEBUG:numba.core.ssa:find_def_from_top label 46
DEBUG:numba.core.ssa:idom 14 from label 46
DEBUG:numba.core.ssa:find_def_from_bottom label 14
DEBUG:numba.core.ssa:find_def_from_top label 14
DEBUG:numba.core.ssa:idom 0 from label 14
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def v = arg(3, name=v)
DEBUG:numba.core.ssa:replaced with: X_norm[$168build_tuple.8] = v.5
DEBUG:numba.core.ssa:on stmt: jump 652
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 174
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const176.1 = const(str, 2)
DEBUG:numba.core.ssa:on stmt: $178compare_op.2 = norm == $const176.1
DEBUG:numba.core.ssa:on stmt: bool180 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $180pred = call bool180($178compare_op.2, func=bool180, args=(Var($178compare_op.2, c3s1_post_processing.py:62),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $180pred, 184, 324
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const186.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $188is_op.2 = v is $const186.1
DEBUG:numba.core.ssa:find_def var='v' stmt=$188is_op.2 = v is $const186.1
DEBUG:numba.core.ssa:find_def_from_top label 184
DEBUG:numba.core.ssa:idom 174 from label 184
DEBUG:numba.core.ssa:find_def_from_bottom label 174
DEBUG:numba.core.ssa:find_def_from_top label 174
DEBUG:numba.core.ssa:insert phi node v.6 = phi(incoming_values=[], incoming_blocks=[]) at 174
DEBUG:numba.core.ssa:find_def_from_bottom label 82
DEBUG:numba.core.ssa:find_def_from_top label 82
DEBUG:numba.core.ssa:idom 74 from label 82
DEBUG:numba.core.ssa:find_def_from_bottom label 74
DEBUG:numba.core.ssa:incoming_def v.5 = phi(incoming_values=[Var(v.1, c3s1_post_processing.py:54), Var(v, c3s1_post_processing.py:47)], incoming_blocks=[54, 46])
DEBUG:numba.core.ssa:find_def_from_bottom label 14
DEBUG:numba.core.ssa:find_def_from_top label 14
DEBUG:numba.core.ssa:idom 0 from label 14
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def v = arg(3, name=v)
DEBUG:numba.core.ssa:replaced with: $188is_op.2 = v.6 is $const186.1
DEBUG:numba.core.ssa:on stmt: bool190 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $190pred = call bool190($188is_op.2, func=bool190, args=(Var($188is_op.2, c3s1_post_processing.py:63),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $190pred, 192, 218
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 192
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $194load_attr.1 = getattr(value=$192load_global.0, attr=ones)
DEBUG:numba.core.ssa:on stmt: $198load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $200load_attr.4 = getattr(value=$198load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: $204call_function_kw.6 = call $194load_attr.1(K, func=$194load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($200load_attr.4, c3s1_post_processing.py:64))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $206load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $208load_method.8 = getattr(value=$206load_global.7, attr=sqrt)
DEBUG:numba.core.ssa:on stmt: $212call_method.10 = call $208load_method.8(K, func=$208load_method.8, args=[Var(K, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: v.2 = $204call_function_kw.6 / $212call_method.10
DEBUG:numba.core.ssa:on stmt: jump 218
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 218
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $218load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $222call_function.2 = call $218load_global.0(N, func=$218load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $224get_iter.3 = getiter(value=$222call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi226.0 = $224get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 226
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 226
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $226for_iter.1 = iternext(value=$phi226.0)
DEBUG:numba.core.ssa:on stmt: $226for_iter.2 = pair_first(value=$226for_iter.1)
DEBUG:numba.core.ssa:on stmt: $226for_iter.3 = pair_second(value=$226for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi228.1 = $226for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $226for_iter.3, 228, 324
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 228
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: n = $phi228.1
DEBUG:numba.core.ssa:on stmt: $230load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $232load_method.3 = getattr(value=$230load_global.2, attr=sqrt)
DEBUG:numba.core.ssa:on stmt: $234load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $236load_method.5 = getattr(value=$234load_global.4, attr=sum)
DEBUG:numba.core.ssa:on stmt: $const240.7 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const242.8 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $244build_slice.9 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $244build_slice.10 = call $244build_slice.9($const240.7, $const242.8, func=$244build_slice.9, args=(Var($const240.7, c3s1_post_processing.py:66), Var($const242.8, c3s1_post_processing.py:66)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $248build_tuple.12 = build_tuple(items=[Var($244build_slice.10, c3s1_post_processing.py:66), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $250binary_subscr.13 = getitem(value=X, index=$248build_tuple.12, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const252.14 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $254binary_power.15 = $250binary_subscr.13 ** $const252.14
DEBUG:numba.core.ssa:on stmt: $256call_method.16 = call $236load_method.5($254binary_power.15, func=$236load_method.5, args=[Var($254binary_power.15, c3s1_post_processing.py:66)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: s = call $232load_method.3($256call_method.16, func=$232load_method.3, args=[Var($256call_method.16, c3s1_post_processing.py:66)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $266compare_op.20 = s > threshold
DEBUG:numba.core.ssa:on stmt: bool268 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $268pred = call bool268($266compare_op.20, func=bool268, args=(Var($266compare_op.20, c3s1_post_processing.py:67),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $268pred, 272, 306
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 272
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const274.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const276.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $278build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $278build_slice.5 = call $278build_slice.4($const274.2, $const276.3, func=$278build_slice.4, args=(Var($const274.2, c3s1_post_processing.py:68), Var($const276.3, c3s1_post_processing.py:68)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $282build_tuple.7 = build_tuple(items=[Var($278build_slice.5, c3s1_post_processing.py:68), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $284binary_subscr.8 = getitem(value=X, index=$282build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $288binary_true_divide.10 = $284binary_subscr.8 / s
DEBUG:numba.core.ssa:on stmt: $const292.12 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const294.13 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $296build_slice.14 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $296build_slice.15 = call $296build_slice.14($const292.12, $const294.13, func=$296build_slice.14, args=(Var($const292.12, c3s1_post_processing.py:68), Var($const294.13, c3s1_post_processing.py:68)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $300build_tuple.17 = build_tuple(items=[Var($296build_slice.15, c3s1_post_processing.py:68), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$300build_tuple.17] = $288binary_true_divide.10
DEBUG:numba.core.ssa:on stmt: jump 651
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 306
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const310.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const312.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $314build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $314build_slice.6 = call $314build_slice.5($const310.3, $const312.4, func=$314build_slice.5, args=(Var($const310.3, c3s1_post_processing.py:70), Var($const312.4, c3s1_post_processing.py:70)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $318build_tuple.8 = build_tuple(items=[Var($314build_slice.6, c3s1_post_processing.py:70), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$318build_tuple.8] = v
DEBUG:numba.core.ssa:find_def var='v' stmt=X_norm[$318build_tuple.8] = v
DEBUG:numba.core.ssa:find_def_from_top label 306
DEBUG:numba.core.ssa:idom 228 from label 306
DEBUG:numba.core.ssa:find_def_from_bottom label 228
DEBUG:numba.core.ssa:find_def_from_top label 228
DEBUG:numba.core.ssa:idom 226 from label 228
DEBUG:numba.core.ssa:find_def_from_bottom label 226
DEBUG:numba.core.ssa:find_def_from_top label 226
DEBUG:numba.core.ssa:idom 218 from label 226
DEBUG:numba.core.ssa:find_def_from_bottom label 218
DEBUG:numba.core.ssa:find_def_from_top label 218
DEBUG:numba.core.ssa:insert phi node v.7 = phi(incoming_values=[], incoming_blocks=[]) at 218
DEBUG:numba.core.ssa:find_def_from_bottom label 184
DEBUG:numba.core.ssa:find_def_from_top label 184
DEBUG:numba.core.ssa:idom 174 from label 184
DEBUG:numba.core.ssa:find_def_from_bottom label 174
DEBUG:numba.core.ssa:incoming_def v.6 = phi(incoming_values=[Var(v.5, c3s1_post_processing.py:60), Var(v, c3s1_post_processing.py:47)], incoming_blocks=[82, 14])
DEBUG:numba.core.ssa:find_def_from_bottom label 192
DEBUG:numba.core.ssa:incoming_def v.2 = $204call_function_kw.6 / $212call_method.10
DEBUG:numba.core.ssa:replaced with: X_norm[$318build_tuple.8] = v.7
DEBUG:numba.core.ssa:on stmt: jump 651
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 324
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const326.1 = const(str, max)
DEBUG:numba.core.ssa:on stmt: $328compare_op.2 = norm == $const326.1
DEBUG:numba.core.ssa:on stmt: bool330 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $330pred = call bool330($328compare_op.2, func=bool330, args=(Var($328compare_op.2, c3s1_post_processing.py:72),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $330pred, 334, 464
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 334
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const336.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $338is_op.2 = v is $const336.1
DEBUG:numba.core.ssa:find_def var='v' stmt=$338is_op.2 = v is $const336.1
DEBUG:numba.core.ssa:find_def_from_top label 334
DEBUG:numba.core.ssa:idom 324 from label 334
DEBUG:numba.core.ssa:find_def_from_bottom label 324
DEBUG:numba.core.ssa:find_def_from_top label 324
DEBUG:numba.core.ssa:insert phi node v.8 = phi(incoming_values=[], incoming_blocks=[]) at 324
DEBUG:numba.core.ssa:find_def_from_bottom label 226
DEBUG:numba.core.ssa:find_def_from_top label 226
DEBUG:numba.core.ssa:idom 218 from label 226
DEBUG:numba.core.ssa:find_def_from_bottom label 218
DEBUG:numba.core.ssa:incoming_def v.7 = phi(incoming_values=[Var(v.6, c3s1_post_processing.py:63), Var(v.2, c3s1_post_processing.py:64)], incoming_blocks=[184, 192])
DEBUG:numba.core.ssa:find_def_from_bottom label 174
DEBUG:numba.core.ssa:incoming_def v.6 = phi(incoming_values=[Var(v.5, c3s1_post_processing.py:60), Var(v, c3s1_post_processing.py:47)], incoming_blocks=[82, 14])
DEBUG:numba.core.ssa:replaced with: $338is_op.2 = v.8 is $const336.1
DEBUG:numba.core.ssa:on stmt: bool340 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $340pred = call bool340($338is_op.2, func=bool340, args=(Var($338is_op.2, c3s1_post_processing.py:73),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $340pred, 344, 360
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $344load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $346load_attr.1 = getattr(value=$344load_global.0, attr=ones)
DEBUG:numba.core.ssa:on stmt: $350load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $352load_attr.4 = getattr(value=$350load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: v.3 = call $346load_attr.1(K, func=$346load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($352load_attr.4, c3s1_post_processing.py:74))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 360
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 360
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $360load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $364call_function.2 = call $360load_global.0(N, func=$360load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $366get_iter.3 = getiter(value=$364call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi368.0 = $366get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 368
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 368
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $368for_iter.1 = iternext(value=$phi368.0)
DEBUG:numba.core.ssa:on stmt: $368for_iter.2 = pair_first(value=$368for_iter.1)
DEBUG:numba.core.ssa:on stmt: $368for_iter.3 = pair_second(value=$368for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi370.1 = $368for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $368for_iter.3, 370, 464
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 370
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: n = $phi370.1
DEBUG:numba.core.ssa:on stmt: $372load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $374load_method.3 = getattr(value=$372load_global.2, attr=max)
DEBUG:numba.core.ssa:on stmt: $376load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $378load_method.5 = getattr(value=$376load_global.4, attr=abs)
DEBUG:numba.core.ssa:on stmt: $const382.7 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const384.8 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $386build_slice.9 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $386build_slice.10 = call $386build_slice.9($const382.7, $const384.8, func=$386build_slice.9, args=(Var($const382.7, c3s1_post_processing.py:76), Var($const384.8, c3s1_post_processing.py:76)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390build_tuple.12 = build_tuple(items=[Var($386build_slice.10, c3s1_post_processing.py:76), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $392binary_subscr.13 = getitem(value=X, index=$390build_tuple.12, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $394call_method.14 = call $378load_method.5($392binary_subscr.13, func=$378load_method.5, args=[Var($392binary_subscr.13, c3s1_post_processing.py:76)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: s = call $374load_method.3($394call_method.14, func=$374load_method.3, args=[Var($394call_method.14, c3s1_post_processing.py:76)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $404compare_op.18 = s > threshold
DEBUG:numba.core.ssa:on stmt: bool406 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $406pred = call bool406($404compare_op.18, func=bool406, args=(Var($404compare_op.18, c3s1_post_processing.py:77),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $406pred, 410, 444
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 410
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const412.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const414.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $416build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $416build_slice.5 = call $416build_slice.4($const412.2, $const414.3, func=$416build_slice.4, args=(Var($const412.2, c3s1_post_processing.py:78), Var($const414.3, c3s1_post_processing.py:78)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $420build_tuple.7 = build_tuple(items=[Var($416build_slice.5, c3s1_post_processing.py:78), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $422binary_subscr.8 = getitem(value=X, index=$420build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $426binary_true_divide.10 = $422binary_subscr.8 / s
DEBUG:numba.core.ssa:on stmt: $const430.12 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const432.13 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $434build_slice.14 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $434build_slice.15 = call $434build_slice.14($const430.12, $const432.13, func=$434build_slice.14, args=(Var($const430.12, c3s1_post_processing.py:78), Var($const432.13, c3s1_post_processing.py:78)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $438build_tuple.17 = build_tuple(items=[Var($434build_slice.15, c3s1_post_processing.py:78), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$438build_tuple.17] = $426binary_true_divide.10
DEBUG:numba.core.ssa:on stmt: jump 460
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 444
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const448.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const450.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $452build_slice.6 = call $452build_slice.5($const448.3, $const450.4, func=$452build_slice.5, args=(Var($const448.3, c3s1_post_processing.py:80), Var($const450.4, c3s1_post_processing.py:80)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $456build_tuple.8 = build_tuple(items=[Var($452build_slice.6, c3s1_post_processing.py:80), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$456build_tuple.8] = v
DEBUG:numba.core.ssa:find_def var='v' stmt=X_norm[$456build_tuple.8] = v
DEBUG:numba.core.ssa:find_def_from_top label 444
DEBUG:numba.core.ssa:idom 370 from label 444
DEBUG:numba.core.ssa:find_def_from_bottom label 370
DEBUG:numba.core.ssa:find_def_from_top label 370
DEBUG:numba.core.ssa:idom 368 from label 370
DEBUG:numba.core.ssa:find_def_from_bottom label 368
DEBUG:numba.core.ssa:find_def_from_top label 368
DEBUG:numba.core.ssa:idom 360 from label 368
DEBUG:numba.core.ssa:find_def_from_bottom label 360
DEBUG:numba.core.ssa:find_def_from_top label 360
DEBUG:numba.core.ssa:insert phi node v.9 = phi(incoming_values=[], incoming_blocks=[]) at 360
DEBUG:numba.core.ssa:find_def_from_bottom label 344
DEBUG:numba.core.ssa:incoming_def v.3 = call $346load_attr.1(K, func=$346load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($352load_attr.4, c3s1_post_processing.py:74))], vararg=None, target=None)
DEBUG:numba.core.ssa:find_def_from_bottom label 334
DEBUG:numba.core.ssa:find_def_from_top label 334
DEBUG:numba.core.ssa:idom 324 from label 334
DEBUG:numba.core.ssa:find_def_from_bottom label 324
DEBUG:numba.core.ssa:incoming_def v.8 = phi(incoming_values=[Var(v.7, c3s1_post_processing.py:70), Var(v.6, c3s1_post_processing.py:63)], incoming_blocks=[226, 174])
DEBUG:numba.core.ssa:replaced with: X_norm[$456build_tuple.8] = v.9
DEBUG:numba.core.ssa:on stmt: jump 460
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 460
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: jump 368
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 464
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const466.1 = const(str, z)
DEBUG:numba.core.ssa:on stmt: $468compare_op.2 = norm == $const466.1
DEBUG:numba.core.ssa:on stmt: bool470 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $470pred = call bool470($468compare_op.2, func=bool470, args=(Var($468compare_op.2, c3s1_post_processing.py:82),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $470pred, 474, 650
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 474
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const476.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $478is_op.2 = v is $const476.1
DEBUG:numba.core.ssa:find_def var='v' stmt=$478is_op.2 = v is $const476.1
DEBUG:numba.core.ssa:find_def_from_top label 474
DEBUG:numba.core.ssa:idom 464 from label 474
DEBUG:numba.core.ssa:find_def_from_bottom label 464
DEBUG:numba.core.ssa:find_def_from_top label 464
DEBUG:numba.core.ssa:insert phi node v.10 = phi(incoming_values=[], incoming_blocks=[]) at 464
DEBUG:numba.core.ssa:find_def_from_bottom label 368
DEBUG:numba.core.ssa:find_def_from_top label 368
DEBUG:numba.core.ssa:idom 360 from label 368
DEBUG:numba.core.ssa:find_def_from_bottom label 360
DEBUG:numba.core.ssa:incoming_def v.9 = phi(incoming_values=[Var(v.3, c3s1_post_processing.py:74), Var(v.8, c3s1_post_processing.py:73)], incoming_blocks=[344, 334])
DEBUG:numba.core.ssa:find_def_from_bottom label 324
DEBUG:numba.core.ssa:incoming_def v.8 = phi(incoming_values=[Var(v.7, c3s1_post_processing.py:70), Var(v.6, c3s1_post_processing.py:63)], incoming_blocks=[226, 174])
DEBUG:numba.core.ssa:replaced with: $478is_op.2 = v.10 is $const476.1
DEBUG:numba.core.ssa:on stmt: bool480 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $480pred = call bool480($478is_op.2, func=bool480, args=(Var($478is_op.2, c3s1_post_processing.py:83),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $480pred, 484, 500
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 484
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $484load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $486load_attr.1 = getattr(value=$484load_global.0, attr=zeros)
DEBUG:numba.core.ssa:on stmt: $490load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $492load_attr.4 = getattr(value=$490load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: v.4 = call $486load_attr.1(K, func=$486load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($492load_attr.4, c3s1_post_processing.py:84))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 500
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 500
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $500load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $504call_function.2 = call $500load_global.0(N, func=$500load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $506get_iter.3 = getiter(value=$504call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi508.0 = $506get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 508
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 508
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $508for_iter.1 = iternext(value=$phi508.0)
DEBUG:numba.core.ssa:on stmt: $508for_iter.2 = pair_first(value=$508for_iter.1)
DEBUG:numba.core.ssa:on stmt: $508for_iter.3 = pair_second(value=$508for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi510.1 = $508for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $508for_iter.3, 510, 650
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 510
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: n = $phi510.1
DEBUG:numba.core.ssa:on stmt: $512load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $514load_method.3 = getattr(value=$512load_global.2, attr=sum)
DEBUG:numba.core.ssa:on stmt: $const518.5 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const520.6 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $522build_slice.7 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $522build_slice.8 = call $522build_slice.7($const518.5, $const520.6, func=$522build_slice.7, args=(Var($const518.5, c3s1_post_processing.py:86), Var($const520.6, c3s1_post_processing.py:86)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $526build_tuple.10 = build_tuple(items=[Var($522build_slice.8, c3s1_post_processing.py:86), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $528binary_subscr.11 = getitem(value=X, index=$526build_tuple.10, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $530call_method.12 = call $514load_method.3($528binary_subscr.11, func=$514load_method.3, args=[Var($528binary_subscr.11, c3s1_post_processing.py:86)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: mu = $530call_method.12 / K
DEBUG:numba.core.ssa:on stmt: $538load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $540load_method.16 = getattr(value=$538load_global.15, attr=sqrt)
DEBUG:numba.core.ssa:on stmt: $542load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $544load_method.18 = getattr(value=$542load_global.17, attr=sum)
DEBUG:numba.core.ssa:on stmt: $const548.20 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const550.21 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $552build_slice.22 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $552build_slice.23 = call $552build_slice.22($const548.20, $const550.21, func=$552build_slice.22, args=(Var($const548.20, c3s1_post_processing.py:87), Var($const550.21, c3s1_post_processing.py:87)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $556build_tuple.25 = build_tuple(items=[Var($552build_slice.23, c3s1_post_processing.py:87), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $558binary_subscr.26 = getitem(value=X, index=$556build_tuple.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $562binary_subtract.28 = $558binary_subscr.26 - mu
DEBUG:numba.core.ssa:on stmt: $const564.29 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $566binary_power.30 = $562binary_subtract.28 ** $const564.29
DEBUG:numba.core.ssa:on stmt: $568call_method.31 = call $544load_method.18($566binary_power.30, func=$544load_method.18, args=[Var($566binary_power.30, c3s1_post_processing.py:87)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const572.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $574binary_subtract.34 = K - $const572.33
DEBUG:numba.core.ssa:on stmt: $576binary_true_divide.35 = $568call_method.31 / $574binary_subtract.34
DEBUG:numba.core.ssa:on stmt: sigma = call $540load_method.16($576binary_true_divide.35, func=$540load_method.16, args=[Var($576binary_true_divide.35, c3s1_post_processing.py:87)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $586compare_op.39 = sigma > threshold
DEBUG:numba.core.ssa:on stmt: bool588 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $588pred = call bool588($586compare_op.39, func=bool588, args=(Var($586compare_op.39, c3s1_post_processing.py:88),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $588pred, 592, 630
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 592
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const594.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const596.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $598build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $598build_slice.5 = call $598build_slice.4($const594.2, $const596.3, func=$598build_slice.4, args=(Var($const594.2, c3s1_post_processing.py:89), Var($const596.3, c3s1_post_processing.py:89)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $602build_tuple.7 = build_tuple(items=[Var($598build_slice.5, c3s1_post_processing.py:89), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $604binary_subscr.8 = getitem(value=X, index=$602build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $608binary_subtract.10 = $604binary_subscr.8 - mu
DEBUG:numba.core.ssa:on stmt: $612binary_true_divide.12 = $608binary_subtract.10 / sigma
DEBUG:numba.core.ssa:on stmt: $const616.14 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const618.15 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $620build_slice.16 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $620build_slice.17 = call $620build_slice.16($const616.14, $const618.15, func=$620build_slice.16, args=(Var($const616.14, c3s1_post_processing.py:89), Var($const618.15, c3s1_post_processing.py:89)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $624build_tuple.19 = build_tuple(items=[Var($620build_slice.17, c3s1_post_processing.py:89), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$624build_tuple.19] = $612binary_true_divide.12
DEBUG:numba.core.ssa:on stmt: jump 646
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 630
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $const634.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const636.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $638build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $638build_slice.6 = call $638build_slice.5($const634.3, $const636.4, func=$638build_slice.5, args=(Var($const634.3, c3s1_post_processing.py:91), Var($const636.4, c3s1_post_processing.py:91)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $642build_tuple.8 = build_tuple(items=[Var($638build_slice.6, c3s1_post_processing.py:91), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$642build_tuple.8] = v
DEBUG:numba.core.ssa:find_def var='v' stmt=X_norm[$642build_tuple.8] = v
DEBUG:numba.core.ssa:find_def_from_top label 630
DEBUG:numba.core.ssa:idom 510 from label 630
DEBUG:numba.core.ssa:find_def_from_bottom label 510
DEBUG:numba.core.ssa:find_def_from_top label 510
DEBUG:numba.core.ssa:idom 508 from label 510
DEBUG:numba.core.ssa:find_def_from_bottom label 508
DEBUG:numba.core.ssa:find_def_from_top label 508
DEBUG:numba.core.ssa:idom 500 from label 508
DEBUG:numba.core.ssa:find_def_from_bottom label 500
DEBUG:numba.core.ssa:find_def_from_top label 500
DEBUG:numba.core.ssa:insert phi node v.11 = phi(incoming_values=[], incoming_blocks=[]) at 500
DEBUG:numba.core.ssa:find_def_from_bottom label 474
DEBUG:numba.core.ssa:find_def_from_top label 474
DEBUG:numba.core.ssa:idom 464 from label 474
DEBUG:numba.core.ssa:find_def_from_bottom label 464
DEBUG:numba.core.ssa:incoming_def v.10 = phi(incoming_values=[Var(v.9, c3s1_post_processing.py:80), Var(v.8, c3s1_post_processing.py:73)], incoming_blocks=[368, 324])
DEBUG:numba.core.ssa:find_def_from_bottom label 484
DEBUG:numba.core.ssa:incoming_def v.4 = call $486load_attr.1(K, func=$486load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($492load_attr.4, c3s1_post_processing.py:84))], vararg=None, target=None)
DEBUG:numba.core.ssa:replaced with: X_norm[$642build_tuple.8] = v.11
DEBUG:numba.core.ssa:on stmt: jump 646
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 646
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: jump 508
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 650
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: $652return_value.1 = cast(value=X_norm)
DEBUG:numba.core.ssa:on stmt: return $652return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 651
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: jump 226
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 652
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C930EB0>
DEBUG:numba.core.ssa:on stmt: jump 82
DEBUG:numba.core.ssa:Fix SSA violator on var n
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: X = arg(0, name=X)
DEBUG:numba.core.ssa:on stmt: norm = arg(1, name=norm)
DEBUG:numba.core.ssa:on stmt: threshold = arg(2, name=threshold)
DEBUG:numba.core.ssa:on stmt: v = arg(3, name=v)
DEBUG:numba.core.ssa:on stmt: $const_1 = const(str, 1)
DEBUG:numba.core.ssa:on stmt: $const_2 = const(str, 2)
DEBUG:numba.core.ssa:on stmt: $const_max = const(str, max)
DEBUG:numba.core.ssa:on stmt: $const_z = const(str, z)
DEBUG:numba.core.ssa:on stmt: $const4.1 = build_tuple(items=[Var($const_1, c3s1_post_processing.py:47), Var($const_2, c3s1_post_processing.py:47), Var($const_max, c3s1_post_processing.py:47), Var($const_z, c3s1_post_processing.py:47)])
DEBUG:numba.core.ssa:on stmt: $6contains_op.2 = norm in $const4.1
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6contains_op.2, func=bool8, args=(Var($6contains_op.2, c3s1_post_processing.py:47),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 14, 10
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: $assertion_error10.0 = global(AssertionError: <class 'AssertionError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'AssertionError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: $16load_attr.1 = getattr(value=X, attr=shape)
DEBUG:numba.core.ssa:on stmt: $18unpack_sequence.4 = exhaust_iter(value=$16load_attr.1, count=2)
DEBUG:numba.core.ssa:on stmt: $18unpack_sequence.2 = static_getitem(value=$18unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $18unpack_sequence.3 = static_getitem(value=$18unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: K = $18unpack_sequence.2
DEBUG:numba.core.ssa:on stmt: N = $18unpack_sequence.3
DEBUG:numba.core.ssa:on stmt: $24load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $26load_method.6 = getattr(value=$24load_global.5, attr=zeros)
DEBUG:numba.core.ssa:on stmt: $32build_tuple.9 = build_tuple(items=[Var(K, c3s1_post_processing.py:49), Var(N, c3s1_post_processing.py:49)])
DEBUG:numba.core.ssa:on stmt: X_norm = call $26load_method.6($32build_tuple.9, func=$26load_method.6, args=[Var($32build_tuple.9, c3s1_post_processing.py:50)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const40.12 = const(str, 1)
DEBUG:numba.core.ssa:on stmt: $42compare_op.13 = norm == $const40.12
DEBUG:numba.core.ssa:on stmt: bool44 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $44pred = call bool44($42compare_op.13, func=bool44, args=(Var($42compare_op.13, c3s1_post_processing.py:52),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $44pred, 46, 174
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 46
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: $const48.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $50is_op.2 = v is $const48.1
DEBUG:numba.core.ssa:on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $52pred = call bool52($50is_op.2, func=bool52, args=(Var($50is_op.2, c3s1_post_processing.py:53),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $52pred, 54, 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 54
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: $54load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $56load_attr.1 = getattr(value=$54load_global.0, attr=ones)
DEBUG:numba.core.ssa:on stmt: $60load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $62load_attr.4 = getattr(value=$60load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: $66call_function_kw.6 = call $56load_attr.1(K, func=$56load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($62load_attr.4, c3s1_post_processing.py:54))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: v.1 = $66call_function_kw.6 / K
DEBUG:numba.core.ssa:on stmt: jump 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: v.5 = phi(incoming_values=[Var(v.1, c3s1_post_processing.py:54), Var(v, c3s1_post_processing.py:47)], incoming_blocks=[54, 46])
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $78call_function.2 = call $74load_global.0(N, func=$74load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $80get_iter.3 = getiter(value=$78call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi82.0 = $80get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 82
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 82
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: $82for_iter.1 = iternext(value=$phi82.0)
DEBUG:numba.core.ssa:on stmt: $82for_iter.2 = pair_first(value=$82for_iter.1)
DEBUG:numba.core.ssa:on stmt: $82for_iter.3 = pair_second(value=$82for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi84.1 = $82for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $82for_iter.3, 84, 174
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: n = $phi84.1
DEBUG:numba.core.ssa:first assign: n
DEBUG:numba.core.ssa:replaced with: n = $phi84.1
DEBUG:numba.core.ssa:on stmt: $86load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $88load_method.3 = getattr(value=$86load_global.2, attr=sum)
DEBUG:numba.core.ssa:on stmt: $90load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=abs)
DEBUG:numba.core.ssa:on stmt: $const96.7 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const98.8 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $100build_slice.9 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $100build_slice.10 = call $100build_slice.9($const96.7, $const98.8, func=$100build_slice.9, args=(Var($const96.7, c3s1_post_processing.py:56), Var($const98.8, c3s1_post_processing.py:56)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $104build_tuple.12 = build_tuple(items=[Var($100build_slice.10, c3s1_post_processing.py:56), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $106binary_subscr.13 = getitem(value=X, index=$104build_tuple.12, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $108call_method.14 = call $92load_method.5($106binary_subscr.13, func=$92load_method.5, args=[Var($106binary_subscr.13, c3s1_post_processing.py:56)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: s = call $88load_method.3($108call_method.14, func=$88load_method.3, args=[Var($108call_method.14, c3s1_post_processing.py:56)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $118compare_op.18 = s > threshold
DEBUG:numba.core.ssa:on stmt: bool120 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $120pred = call bool120($118compare_op.18, func=bool120, args=(Var($118compare_op.18, c3s1_post_processing.py:57),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $120pred, 122, 156
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 122
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: $const124.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const126.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $128build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $128build_slice.5 = call $128build_slice.4($const124.2, $const126.3, func=$128build_slice.4, args=(Var($const124.2, c3s1_post_processing.py:58), Var($const126.3, c3s1_post_processing.py:58)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $132build_tuple.7 = build_tuple(items=[Var($128build_slice.5, c3s1_post_processing.py:58), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $134binary_subscr.8 = getitem(value=X, index=$132build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $138binary_true_divide.10 = $134binary_subscr.8 / s
DEBUG:numba.core.ssa:on stmt: $const142.12 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const144.13 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $146build_slice.14 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $146build_slice.15 = call $146build_slice.14($const142.12, $const144.13, func=$146build_slice.14, args=(Var($const142.12, c3s1_post_processing.py:58), Var($const144.13, c3s1_post_processing.py:58)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $150build_tuple.17 = build_tuple(items=[Var($146build_slice.15, c3s1_post_processing.py:58), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$150build_tuple.17] = $138binary_true_divide.10
DEBUG:numba.core.ssa:on stmt: jump 652
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 156
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: $const160.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const162.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $164build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $164build_slice.6 = call $164build_slice.5($const160.3, $const162.4, func=$164build_slice.5, args=(Var($const160.3, c3s1_post_processing.py:60), Var($const162.4, c3s1_post_processing.py:60)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $168build_tuple.8 = build_tuple(items=[Var($164build_slice.6, c3s1_post_processing.py:60), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$168build_tuple.8] = v.5
DEBUG:numba.core.ssa:on stmt: jump 652
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 174
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: v.6 = phi(incoming_values=[Var(v.5, c3s1_post_processing.py:60), Var(v, c3s1_post_processing.py:47)], incoming_blocks=[82, 14])
DEBUG:numba.core.ssa:on stmt: $const176.1 = const(str, 2)
DEBUG:numba.core.ssa:on stmt: $178compare_op.2 = norm == $const176.1
DEBUG:numba.core.ssa:on stmt: bool180 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $180pred = call bool180($178compare_op.2, func=bool180, args=(Var($178compare_op.2, c3s1_post_processing.py:62),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $180pred, 184, 324
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: $const186.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $188is_op.2 = v.6 is $const186.1
DEBUG:numba.core.ssa:on stmt: bool190 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $190pred = call bool190($188is_op.2, func=bool190, args=(Var($188is_op.2, c3s1_post_processing.py:63),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $190pred, 192, 218
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 192
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $194load_attr.1 = getattr(value=$192load_global.0, attr=ones)
DEBUG:numba.core.ssa:on stmt: $198load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $200load_attr.4 = getattr(value=$198load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: $204call_function_kw.6 = call $194load_attr.1(K, func=$194load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($200load_attr.4, c3s1_post_processing.py:64))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $206load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $208load_method.8 = getattr(value=$206load_global.7, attr=sqrt)
DEBUG:numba.core.ssa:on stmt: $212call_method.10 = call $208load_method.8(K, func=$208load_method.8, args=[Var(K, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: v.2 = $204call_function_kw.6 / $212call_method.10
DEBUG:numba.core.ssa:on stmt: jump 218
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 218
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: v.7 = phi(incoming_values=[Var(v.6, c3s1_post_processing.py:63), Var(v.2, c3s1_post_processing.py:64)], incoming_blocks=[184, 192])
DEBUG:numba.core.ssa:on stmt: $218load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $222call_function.2 = call $218load_global.0(N, func=$218load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $224get_iter.3 = getiter(value=$222call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi226.0 = $224get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 226
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 226
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: $226for_iter.1 = iternext(value=$phi226.0)
DEBUG:numba.core.ssa:on stmt: $226for_iter.2 = pair_first(value=$226for_iter.1)
DEBUG:numba.core.ssa:on stmt: $226for_iter.3 = pair_second(value=$226for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi228.1 = $226for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $226for_iter.3, 228, 324
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 228
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: n = $phi228.1
DEBUG:numba.core.ssa:replaced with: n.1 = $phi228.1
DEBUG:numba.core.ssa:on stmt: $230load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $232load_method.3 = getattr(value=$230load_global.2, attr=sqrt)
DEBUG:numba.core.ssa:on stmt: $234load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $236load_method.5 = getattr(value=$234load_global.4, attr=sum)
DEBUG:numba.core.ssa:on stmt: $const240.7 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const242.8 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $244build_slice.9 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $244build_slice.10 = call $244build_slice.9($const240.7, $const242.8, func=$244build_slice.9, args=(Var($const240.7, c3s1_post_processing.py:66), Var($const242.8, c3s1_post_processing.py:66)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $248build_tuple.12 = build_tuple(items=[Var($244build_slice.10, c3s1_post_processing.py:66), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $250binary_subscr.13 = getitem(value=X, index=$248build_tuple.12, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const252.14 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $254binary_power.15 = $250binary_subscr.13 ** $const252.14
DEBUG:numba.core.ssa:on stmt: $256call_method.16 = call $236load_method.5($254binary_power.15, func=$236load_method.5, args=[Var($254binary_power.15, c3s1_post_processing.py:66)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: s = call $232load_method.3($256call_method.16, func=$232load_method.3, args=[Var($256call_method.16, c3s1_post_processing.py:66)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $266compare_op.20 = s > threshold
DEBUG:numba.core.ssa:on stmt: bool268 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $268pred = call bool268($266compare_op.20, func=bool268, args=(Var($266compare_op.20, c3s1_post_processing.py:67),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $268pred, 272, 306
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 272
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: $const274.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const276.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $278build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $278build_slice.5 = call $278build_slice.4($const274.2, $const276.3, func=$278build_slice.4, args=(Var($const274.2, c3s1_post_processing.py:68), Var($const276.3, c3s1_post_processing.py:68)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $282build_tuple.7 = build_tuple(items=[Var($278build_slice.5, c3s1_post_processing.py:68), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $284binary_subscr.8 = getitem(value=X, index=$282build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $288binary_true_divide.10 = $284binary_subscr.8 / s
DEBUG:numba.core.ssa:on stmt: $const292.12 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const294.13 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $296build_slice.14 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $296build_slice.15 = call $296build_slice.14($const292.12, $const294.13, func=$296build_slice.14, args=(Var($const292.12, c3s1_post_processing.py:68), Var($const294.13, c3s1_post_processing.py:68)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $300build_tuple.17 = build_tuple(items=[Var($296build_slice.15, c3s1_post_processing.py:68), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$300build_tuple.17] = $288binary_true_divide.10
DEBUG:numba.core.ssa:on stmt: jump 651
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 306
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: $const310.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const312.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $314build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $314build_slice.6 = call $314build_slice.5($const310.3, $const312.4, func=$314build_slice.5, args=(Var($const310.3, c3s1_post_processing.py:70), Var($const312.4, c3s1_post_processing.py:70)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $318build_tuple.8 = build_tuple(items=[Var($314build_slice.6, c3s1_post_processing.py:70), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$318build_tuple.8] = v.7
DEBUG:numba.core.ssa:on stmt: jump 651
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 324
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: v.8 = phi(incoming_values=[Var(v.7, c3s1_post_processing.py:70), Var(v.6, c3s1_post_processing.py:63)], incoming_blocks=[226, 174])
DEBUG:numba.core.ssa:on stmt: $const326.1 = const(str, max)
DEBUG:numba.core.ssa:on stmt: $328compare_op.2 = norm == $const326.1
DEBUG:numba.core.ssa:on stmt: bool330 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $330pred = call bool330($328compare_op.2, func=bool330, args=(Var($328compare_op.2, c3s1_post_processing.py:72),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $330pred, 334, 464
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 334
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: $const336.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $338is_op.2 = v.8 is $const336.1
DEBUG:numba.core.ssa:on stmt: bool340 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $340pred = call bool340($338is_op.2, func=bool340, args=(Var($338is_op.2, c3s1_post_processing.py:73),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $340pred, 344, 360
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: $344load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $346load_attr.1 = getattr(value=$344load_global.0, attr=ones)
DEBUG:numba.core.ssa:on stmt: $350load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $352load_attr.4 = getattr(value=$350load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: v.3 = call $346load_attr.1(K, func=$346load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($352load_attr.4, c3s1_post_processing.py:74))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 360
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 360
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: v.9 = phi(incoming_values=[Var(v.3, c3s1_post_processing.py:74), Var(v.8, c3s1_post_processing.py:73)], incoming_blocks=[344, 334])
DEBUG:numba.core.ssa:on stmt: $360load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $364call_function.2 = call $360load_global.0(N, func=$360load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $366get_iter.3 = getiter(value=$364call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi368.0 = $366get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 368
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 368
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: $368for_iter.1 = iternext(value=$phi368.0)
DEBUG:numba.core.ssa:on stmt: $368for_iter.2 = pair_first(value=$368for_iter.1)
DEBUG:numba.core.ssa:on stmt: $368for_iter.3 = pair_second(value=$368for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi370.1 = $368for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $368for_iter.3, 370, 464
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 370
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: n = $phi370.1
DEBUG:numba.core.ssa:replaced with: n.2 = $phi370.1
DEBUG:numba.core.ssa:on stmt: $372load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $374load_method.3 = getattr(value=$372load_global.2, attr=max)
DEBUG:numba.core.ssa:on stmt: $376load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $378load_method.5 = getattr(value=$376load_global.4, attr=abs)
DEBUG:numba.core.ssa:on stmt: $const382.7 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const384.8 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $386build_slice.9 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $386build_slice.10 = call $386build_slice.9($const382.7, $const384.8, func=$386build_slice.9, args=(Var($const382.7, c3s1_post_processing.py:76), Var($const384.8, c3s1_post_processing.py:76)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390build_tuple.12 = build_tuple(items=[Var($386build_slice.10, c3s1_post_processing.py:76), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $392binary_subscr.13 = getitem(value=X, index=$390build_tuple.12, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $394call_method.14 = call $378load_method.5($392binary_subscr.13, func=$378load_method.5, args=[Var($392binary_subscr.13, c3s1_post_processing.py:76)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: s = call $374load_method.3($394call_method.14, func=$374load_method.3, args=[Var($394call_method.14, c3s1_post_processing.py:76)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $404compare_op.18 = s > threshold
DEBUG:numba.core.ssa:on stmt: bool406 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $406pred = call bool406($404compare_op.18, func=bool406, args=(Var($404compare_op.18, c3s1_post_processing.py:77),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $406pred, 410, 444
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 410
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: $const412.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const414.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $416build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $416build_slice.5 = call $416build_slice.4($const412.2, $const414.3, func=$416build_slice.4, args=(Var($const412.2, c3s1_post_processing.py:78), Var($const414.3, c3s1_post_processing.py:78)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $420build_tuple.7 = build_tuple(items=[Var($416build_slice.5, c3s1_post_processing.py:78), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $422binary_subscr.8 = getitem(value=X, index=$420build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $426binary_true_divide.10 = $422binary_subscr.8 / s
DEBUG:numba.core.ssa:on stmt: $const430.12 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const432.13 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $434build_slice.14 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $434build_slice.15 = call $434build_slice.14($const430.12, $const432.13, func=$434build_slice.14, args=(Var($const430.12, c3s1_post_processing.py:78), Var($const432.13, c3s1_post_processing.py:78)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $438build_tuple.17 = build_tuple(items=[Var($434build_slice.15, c3s1_post_processing.py:78), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$438build_tuple.17] = $426binary_true_divide.10
DEBUG:numba.core.ssa:on stmt: jump 460
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 444
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: $const448.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const450.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $452build_slice.6 = call $452build_slice.5($const448.3, $const450.4, func=$452build_slice.5, args=(Var($const448.3, c3s1_post_processing.py:80), Var($const450.4, c3s1_post_processing.py:80)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $456build_tuple.8 = build_tuple(items=[Var($452build_slice.6, c3s1_post_processing.py:80), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$456build_tuple.8] = v.9
DEBUG:numba.core.ssa:on stmt: jump 460
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 460
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: jump 368
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 464
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: v.10 = phi(incoming_values=[Var(v.9, c3s1_post_processing.py:80), Var(v.8, c3s1_post_processing.py:73)], incoming_blocks=[368, 324])
DEBUG:numba.core.ssa:on stmt: $const466.1 = const(str, z)
DEBUG:numba.core.ssa:on stmt: $468compare_op.2 = norm == $const466.1
DEBUG:numba.core.ssa:on stmt: bool470 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $470pred = call bool470($468compare_op.2, func=bool470, args=(Var($468compare_op.2, c3s1_post_processing.py:82),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $470pred, 474, 650
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 474
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: $const476.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $478is_op.2 = v.10 is $const476.1
DEBUG:numba.core.ssa:on stmt: bool480 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $480pred = call bool480($478is_op.2, func=bool480, args=(Var($478is_op.2, c3s1_post_processing.py:83),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $480pred, 484, 500
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 484
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: $484load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $486load_attr.1 = getattr(value=$484load_global.0, attr=zeros)
DEBUG:numba.core.ssa:on stmt: $490load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $492load_attr.4 = getattr(value=$490load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: v.4 = call $486load_attr.1(K, func=$486load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($492load_attr.4, c3s1_post_processing.py:84))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 500
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 500
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: v.11 = phi(incoming_values=[Var(v.10, c3s1_post_processing.py:83), Var(v.4, c3s1_post_processing.py:84)], incoming_blocks=[474, 484])
DEBUG:numba.core.ssa:on stmt: $500load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $504call_function.2 = call $500load_global.0(N, func=$500load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $506get_iter.3 = getiter(value=$504call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi508.0 = $506get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 508
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 508
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: $508for_iter.1 = iternext(value=$phi508.0)
DEBUG:numba.core.ssa:on stmt: $508for_iter.2 = pair_first(value=$508for_iter.1)
DEBUG:numba.core.ssa:on stmt: $508for_iter.3 = pair_second(value=$508for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi510.1 = $508for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $508for_iter.3, 510, 650
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 510
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: n = $phi510.1
DEBUG:numba.core.ssa:replaced with: n.3 = $phi510.1
DEBUG:numba.core.ssa:on stmt: $512load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $514load_method.3 = getattr(value=$512load_global.2, attr=sum)
DEBUG:numba.core.ssa:on stmt: $const518.5 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const520.6 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $522build_slice.7 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $522build_slice.8 = call $522build_slice.7($const518.5, $const520.6, func=$522build_slice.7, args=(Var($const518.5, c3s1_post_processing.py:86), Var($const520.6, c3s1_post_processing.py:86)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $526build_tuple.10 = build_tuple(items=[Var($522build_slice.8, c3s1_post_processing.py:86), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $528binary_subscr.11 = getitem(value=X, index=$526build_tuple.10, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $530call_method.12 = call $514load_method.3($528binary_subscr.11, func=$514load_method.3, args=[Var($528binary_subscr.11, c3s1_post_processing.py:86)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: mu = $530call_method.12 / K
DEBUG:numba.core.ssa:on stmt: $538load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $540load_method.16 = getattr(value=$538load_global.15, attr=sqrt)
DEBUG:numba.core.ssa:on stmt: $542load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $544load_method.18 = getattr(value=$542load_global.17, attr=sum)
DEBUG:numba.core.ssa:on stmt: $const548.20 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const550.21 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $552build_slice.22 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $552build_slice.23 = call $552build_slice.22($const548.20, $const550.21, func=$552build_slice.22, args=(Var($const548.20, c3s1_post_processing.py:87), Var($const550.21, c3s1_post_processing.py:87)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $556build_tuple.25 = build_tuple(items=[Var($552build_slice.23, c3s1_post_processing.py:87), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $558binary_subscr.26 = getitem(value=X, index=$556build_tuple.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $562binary_subtract.28 = $558binary_subscr.26 - mu
DEBUG:numba.core.ssa:on stmt: $const564.29 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $566binary_power.30 = $562binary_subtract.28 ** $const564.29
DEBUG:numba.core.ssa:on stmt: $568call_method.31 = call $544load_method.18($566binary_power.30, func=$544load_method.18, args=[Var($566binary_power.30, c3s1_post_processing.py:87)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const572.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $574binary_subtract.34 = K - $const572.33
DEBUG:numba.core.ssa:on stmt: $576binary_true_divide.35 = $568call_method.31 / $574binary_subtract.34
DEBUG:numba.core.ssa:on stmt: sigma = call $540load_method.16($576binary_true_divide.35, func=$540load_method.16, args=[Var($576binary_true_divide.35, c3s1_post_processing.py:87)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $586compare_op.39 = sigma > threshold
DEBUG:numba.core.ssa:on stmt: bool588 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $588pred = call bool588($586compare_op.39, func=bool588, args=(Var($586compare_op.39, c3s1_post_processing.py:88),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $588pred, 592, 630
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 592
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: $const594.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const596.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $598build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $598build_slice.5 = call $598build_slice.4($const594.2, $const596.3, func=$598build_slice.4, args=(Var($const594.2, c3s1_post_processing.py:89), Var($const596.3, c3s1_post_processing.py:89)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $602build_tuple.7 = build_tuple(items=[Var($598build_slice.5, c3s1_post_processing.py:89), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $604binary_subscr.8 = getitem(value=X, index=$602build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $608binary_subtract.10 = $604binary_subscr.8 - mu
DEBUG:numba.core.ssa:on stmt: $612binary_true_divide.12 = $608binary_subtract.10 / sigma
DEBUG:numba.core.ssa:on stmt: $const616.14 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const618.15 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $620build_slice.16 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $620build_slice.17 = call $620build_slice.16($const616.14, $const618.15, func=$620build_slice.16, args=(Var($const616.14, c3s1_post_processing.py:89), Var($const618.15, c3s1_post_processing.py:89)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $624build_tuple.19 = build_tuple(items=[Var($620build_slice.17, c3s1_post_processing.py:89), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$624build_tuple.19] = $612binary_true_divide.12
DEBUG:numba.core.ssa:on stmt: jump 646
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 630
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: $const634.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const636.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $638build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $638build_slice.6 = call $638build_slice.5($const634.3, $const636.4, func=$638build_slice.5, args=(Var($const634.3, c3s1_post_processing.py:91), Var($const636.4, c3s1_post_processing.py:91)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $642build_tuple.8 = build_tuple(items=[Var($638build_slice.6, c3s1_post_processing.py:91), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$642build_tuple.8] = v.11
DEBUG:numba.core.ssa:on stmt: jump 646
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 646
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: jump 508
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 650
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: $652return_value.1 = cast(value=X_norm)
DEBUG:numba.core.ssa:on stmt: return $652return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 651
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: jump 226
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 652
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6C7755E0>
DEBUG:numba.core.ssa:on stmt: jump 82
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {84: [<numba.core.ir.Assign object at 0x0000029B6C775670>],
             228: [<numba.core.ir.Assign object at 0x0000029B6C775040>],
             370: [<numba.core.ir.Assign object at 0x0000029B6CB99D60>],
             510: [<numba.core.ir.Assign object at 0x0000029B6C9BBC70>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: X = arg(0, name=X)
DEBUG:numba.core.ssa:on stmt: norm = arg(1, name=norm)
DEBUG:numba.core.ssa:on stmt: threshold = arg(2, name=threshold)
DEBUG:numba.core.ssa:on stmt: v = arg(3, name=v)
DEBUG:numba.core.ssa:on stmt: $const_1 = const(str, 1)
DEBUG:numba.core.ssa:on stmt: $const_2 = const(str, 2)
DEBUG:numba.core.ssa:on stmt: $const_max = const(str, max)
DEBUG:numba.core.ssa:on stmt: $const_z = const(str, z)
DEBUG:numba.core.ssa:on stmt: $const4.1 = build_tuple(items=[Var($const_1, c3s1_post_processing.py:47), Var($const_2, c3s1_post_processing.py:47), Var($const_max, c3s1_post_processing.py:47), Var($const_z, c3s1_post_processing.py:47)])
DEBUG:numba.core.ssa:on stmt: $6contains_op.2 = norm in $const4.1
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6contains_op.2, func=bool8, args=(Var($6contains_op.2, c3s1_post_processing.py:47),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 14, 10
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: $assertion_error10.0 = global(AssertionError: <class 'AssertionError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'AssertionError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: $16load_attr.1 = getattr(value=X, attr=shape)
DEBUG:numba.core.ssa:on stmt: $18unpack_sequence.4 = exhaust_iter(value=$16load_attr.1, count=2)
DEBUG:numba.core.ssa:on stmt: $18unpack_sequence.2 = static_getitem(value=$18unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $18unpack_sequence.3 = static_getitem(value=$18unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: K = $18unpack_sequence.2
DEBUG:numba.core.ssa:on stmt: N = $18unpack_sequence.3
DEBUG:numba.core.ssa:on stmt: $24load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $26load_method.6 = getattr(value=$24load_global.5, attr=zeros)
DEBUG:numba.core.ssa:on stmt: $32build_tuple.9 = build_tuple(items=[Var(K, c3s1_post_processing.py:49), Var(N, c3s1_post_processing.py:49)])
DEBUG:numba.core.ssa:on stmt: X_norm = call $26load_method.6($32build_tuple.9, func=$26load_method.6, args=[Var($32build_tuple.9, c3s1_post_processing.py:50)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const40.12 = const(str, 1)
DEBUG:numba.core.ssa:on stmt: $42compare_op.13 = norm == $const40.12
DEBUG:numba.core.ssa:on stmt: bool44 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $44pred = call bool44($42compare_op.13, func=bool44, args=(Var($42compare_op.13, c3s1_post_processing.py:52),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $44pred, 46, 174
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 46
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: $const48.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $50is_op.2 = v is $const48.1
DEBUG:numba.core.ssa:on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $52pred = call bool52($50is_op.2, func=bool52, args=(Var($50is_op.2, c3s1_post_processing.py:53),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $52pred, 54, 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 54
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: $54load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $56load_attr.1 = getattr(value=$54load_global.0, attr=ones)
DEBUG:numba.core.ssa:on stmt: $60load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $62load_attr.4 = getattr(value=$60load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: $66call_function_kw.6 = call $56load_attr.1(K, func=$56load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($62load_attr.4, c3s1_post_processing.py:54))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: v.1 = $66call_function_kw.6 / K
DEBUG:numba.core.ssa:on stmt: jump 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: v.5 = phi(incoming_values=[Var(v.1, c3s1_post_processing.py:54), Var(v, c3s1_post_processing.py:47)], incoming_blocks=[54, 46])
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $78call_function.2 = call $74load_global.0(N, func=$74load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $80get_iter.3 = getiter(value=$78call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi82.0 = $80get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 82
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 82
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: $82for_iter.1 = iternext(value=$phi82.0)
DEBUG:numba.core.ssa:on stmt: $82for_iter.2 = pair_first(value=$82for_iter.1)
DEBUG:numba.core.ssa:on stmt: $82for_iter.3 = pair_second(value=$82for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi84.1 = $82for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $82for_iter.3, 84, 174
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: n = $phi84.1
DEBUG:numba.core.ssa:on stmt: $86load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $88load_method.3 = getattr(value=$86load_global.2, attr=sum)
DEBUG:numba.core.ssa:on stmt: $90load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=abs)
DEBUG:numba.core.ssa:on stmt: $const96.7 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const98.8 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $100build_slice.9 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $100build_slice.10 = call $100build_slice.9($const96.7, $const98.8, func=$100build_slice.9, args=(Var($const96.7, c3s1_post_processing.py:56), Var($const98.8, c3s1_post_processing.py:56)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $104build_tuple.12 = build_tuple(items=[Var($100build_slice.10, c3s1_post_processing.py:56), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def var='n' stmt=$104build_tuple.12 = build_tuple(items=[Var($100build_slice.10, c3s1_post_processing.py:56), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $106binary_subscr.13 = getitem(value=X, index=$104build_tuple.12, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $108call_method.14 = call $92load_method.5($106binary_subscr.13, func=$92load_method.5, args=[Var($106binary_subscr.13, c3s1_post_processing.py:56)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: s = call $88load_method.3($108call_method.14, func=$88load_method.3, args=[Var($108call_method.14, c3s1_post_processing.py:56)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $118compare_op.18 = s > threshold
DEBUG:numba.core.ssa:on stmt: bool120 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $120pred = call bool120($118compare_op.18, func=bool120, args=(Var($118compare_op.18, c3s1_post_processing.py:57),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $120pred, 122, 156
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 122
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: $const124.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const126.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $128build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $128build_slice.5 = call $128build_slice.4($const124.2, $const126.3, func=$128build_slice.4, args=(Var($const124.2, c3s1_post_processing.py:58), Var($const126.3, c3s1_post_processing.py:58)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $132build_tuple.7 = build_tuple(items=[Var($128build_slice.5, c3s1_post_processing.py:58), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def var='n' stmt=$132build_tuple.7 = build_tuple(items=[Var($128build_slice.5, c3s1_post_processing.py:58), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def_from_top label 122
DEBUG:numba.core.ssa:idom 84 from label 122
DEBUG:numba.core.ssa:find_def_from_bottom label 84
DEBUG:numba.core.ssa:on stmt: $134binary_subscr.8 = getitem(value=X, index=$132build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $138binary_true_divide.10 = $134binary_subscr.8 / s
DEBUG:numba.core.ssa:on stmt: $const142.12 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const144.13 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $146build_slice.14 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $146build_slice.15 = call $146build_slice.14($const142.12, $const144.13, func=$146build_slice.14, args=(Var($const142.12, c3s1_post_processing.py:58), Var($const144.13, c3s1_post_processing.py:58)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $150build_tuple.17 = build_tuple(items=[Var($146build_slice.15, c3s1_post_processing.py:58), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def var='n' stmt=$150build_tuple.17 = build_tuple(items=[Var($146build_slice.15, c3s1_post_processing.py:58), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def_from_top label 122
DEBUG:numba.core.ssa:idom 84 from label 122
DEBUG:numba.core.ssa:find_def_from_bottom label 84
DEBUG:numba.core.ssa:on stmt: X_norm[$150build_tuple.17] = $138binary_true_divide.10
DEBUG:numba.core.ssa:on stmt: jump 652
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 156
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: $const160.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const162.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $164build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $164build_slice.6 = call $164build_slice.5($const160.3, $const162.4, func=$164build_slice.5, args=(Var($const160.3, c3s1_post_processing.py:60), Var($const162.4, c3s1_post_processing.py:60)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $168build_tuple.8 = build_tuple(items=[Var($164build_slice.6, c3s1_post_processing.py:60), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def var='n' stmt=$168build_tuple.8 = build_tuple(items=[Var($164build_slice.6, c3s1_post_processing.py:60), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def_from_top label 156
DEBUG:numba.core.ssa:idom 84 from label 156
DEBUG:numba.core.ssa:find_def_from_bottom label 84
DEBUG:numba.core.ssa:on stmt: X_norm[$168build_tuple.8] = v.5
DEBUG:numba.core.ssa:on stmt: jump 652
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 174
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: v.6 = phi(incoming_values=[Var(v.5, c3s1_post_processing.py:60), Var(v, c3s1_post_processing.py:47)], incoming_blocks=[82, 14])
DEBUG:numba.core.ssa:on stmt: $const176.1 = const(str, 2)
DEBUG:numba.core.ssa:on stmt: $178compare_op.2 = norm == $const176.1
DEBUG:numba.core.ssa:on stmt: bool180 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $180pred = call bool180($178compare_op.2, func=bool180, args=(Var($178compare_op.2, c3s1_post_processing.py:62),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $180pred, 184, 324
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: $const186.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $188is_op.2 = v.6 is $const186.1
DEBUG:numba.core.ssa:on stmt: bool190 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $190pred = call bool190($188is_op.2, func=bool190, args=(Var($188is_op.2, c3s1_post_processing.py:63),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $190pred, 192, 218
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 192
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $194load_attr.1 = getattr(value=$192load_global.0, attr=ones)
DEBUG:numba.core.ssa:on stmt: $198load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $200load_attr.4 = getattr(value=$198load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: $204call_function_kw.6 = call $194load_attr.1(K, func=$194load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($200load_attr.4, c3s1_post_processing.py:64))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $206load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $208load_method.8 = getattr(value=$206load_global.7, attr=sqrt)
DEBUG:numba.core.ssa:on stmt: $212call_method.10 = call $208load_method.8(K, func=$208load_method.8, args=[Var(K, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: v.2 = $204call_function_kw.6 / $212call_method.10
DEBUG:numba.core.ssa:on stmt: jump 218
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 218
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: v.7 = phi(incoming_values=[Var(v.6, c3s1_post_processing.py:63), Var(v.2, c3s1_post_processing.py:64)], incoming_blocks=[184, 192])
DEBUG:numba.core.ssa:on stmt: $218load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $222call_function.2 = call $218load_global.0(N, func=$218load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $224get_iter.3 = getiter(value=$222call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi226.0 = $224get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 226
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 226
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: $226for_iter.1 = iternext(value=$phi226.0)
DEBUG:numba.core.ssa:on stmt: $226for_iter.2 = pair_first(value=$226for_iter.1)
DEBUG:numba.core.ssa:on stmt: $226for_iter.3 = pair_second(value=$226for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi228.1 = $226for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $226for_iter.3, 228, 324
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 228
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: n.1 = $phi228.1
DEBUG:numba.core.ssa:on stmt: $230load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $232load_method.3 = getattr(value=$230load_global.2, attr=sqrt)
DEBUG:numba.core.ssa:on stmt: $234load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $236load_method.5 = getattr(value=$234load_global.4, attr=sum)
DEBUG:numba.core.ssa:on stmt: $const240.7 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const242.8 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $244build_slice.9 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $244build_slice.10 = call $244build_slice.9($const240.7, $const242.8, func=$244build_slice.9, args=(Var($const240.7, c3s1_post_processing.py:66), Var($const242.8, c3s1_post_processing.py:66)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $248build_tuple.12 = build_tuple(items=[Var($244build_slice.10, c3s1_post_processing.py:66), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def var='n' stmt=$248build_tuple.12 = build_tuple(items=[Var($244build_slice.10, c3s1_post_processing.py:66), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:replaced with: $248build_tuple.12 = build_tuple(items=[Var($244build_slice.10, c3s1_post_processing.py:66), Var(n.1, c3s1_post_processing.py:65)])
DEBUG:numba.core.ssa:on stmt: $250binary_subscr.13 = getitem(value=X, index=$248build_tuple.12, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const252.14 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $254binary_power.15 = $250binary_subscr.13 ** $const252.14
DEBUG:numba.core.ssa:on stmt: $256call_method.16 = call $236load_method.5($254binary_power.15, func=$236load_method.5, args=[Var($254binary_power.15, c3s1_post_processing.py:66)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: s = call $232load_method.3($256call_method.16, func=$232load_method.3, args=[Var($256call_method.16, c3s1_post_processing.py:66)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $266compare_op.20 = s > threshold
DEBUG:numba.core.ssa:on stmt: bool268 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $268pred = call bool268($266compare_op.20, func=bool268, args=(Var($266compare_op.20, c3s1_post_processing.py:67),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $268pred, 272, 306
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 272
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: $const274.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const276.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $278build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $278build_slice.5 = call $278build_slice.4($const274.2, $const276.3, func=$278build_slice.4, args=(Var($const274.2, c3s1_post_processing.py:68), Var($const276.3, c3s1_post_processing.py:68)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $282build_tuple.7 = build_tuple(items=[Var($278build_slice.5, c3s1_post_processing.py:68), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def var='n' stmt=$282build_tuple.7 = build_tuple(items=[Var($278build_slice.5, c3s1_post_processing.py:68), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def_from_top label 272
DEBUG:numba.core.ssa:idom 228 from label 272
DEBUG:numba.core.ssa:find_def_from_bottom label 228
DEBUG:numba.core.ssa:replaced with: $282build_tuple.7 = build_tuple(items=[Var($278build_slice.5, c3s1_post_processing.py:68), Var(n.1, c3s1_post_processing.py:65)])
DEBUG:numba.core.ssa:on stmt: $284binary_subscr.8 = getitem(value=X, index=$282build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $288binary_true_divide.10 = $284binary_subscr.8 / s
DEBUG:numba.core.ssa:on stmt: $const292.12 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const294.13 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $296build_slice.14 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $296build_slice.15 = call $296build_slice.14($const292.12, $const294.13, func=$296build_slice.14, args=(Var($const292.12, c3s1_post_processing.py:68), Var($const294.13, c3s1_post_processing.py:68)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $300build_tuple.17 = build_tuple(items=[Var($296build_slice.15, c3s1_post_processing.py:68), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def var='n' stmt=$300build_tuple.17 = build_tuple(items=[Var($296build_slice.15, c3s1_post_processing.py:68), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def_from_top label 272
DEBUG:numba.core.ssa:idom 228 from label 272
DEBUG:numba.core.ssa:find_def_from_bottom label 228
DEBUG:numba.core.ssa:replaced with: $300build_tuple.17 = build_tuple(items=[Var($296build_slice.15, c3s1_post_processing.py:68), Var(n.1, c3s1_post_processing.py:65)])
DEBUG:numba.core.ssa:on stmt: X_norm[$300build_tuple.17] = $288binary_true_divide.10
DEBUG:numba.core.ssa:on stmt: jump 651
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 306
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: $const310.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const312.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $314build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $314build_slice.6 = call $314build_slice.5($const310.3, $const312.4, func=$314build_slice.5, args=(Var($const310.3, c3s1_post_processing.py:70), Var($const312.4, c3s1_post_processing.py:70)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $318build_tuple.8 = build_tuple(items=[Var($314build_slice.6, c3s1_post_processing.py:70), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def var='n' stmt=$318build_tuple.8 = build_tuple(items=[Var($314build_slice.6, c3s1_post_processing.py:70), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def_from_top label 306
DEBUG:numba.core.ssa:idom 228 from label 306
DEBUG:numba.core.ssa:find_def_from_bottom label 228
DEBUG:numba.core.ssa:replaced with: $318build_tuple.8 = build_tuple(items=[Var($314build_slice.6, c3s1_post_processing.py:70), Var(n.1, c3s1_post_processing.py:65)])
DEBUG:numba.core.ssa:on stmt: X_norm[$318build_tuple.8] = v.7
DEBUG:numba.core.ssa:on stmt: jump 651
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 324
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: v.8 = phi(incoming_values=[Var(v.7, c3s1_post_processing.py:70), Var(v.6, c3s1_post_processing.py:63)], incoming_blocks=[226, 174])
DEBUG:numba.core.ssa:on stmt: $const326.1 = const(str, max)
DEBUG:numba.core.ssa:on stmt: $328compare_op.2 = norm == $const326.1
DEBUG:numba.core.ssa:on stmt: bool330 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $330pred = call bool330($328compare_op.2, func=bool330, args=(Var($328compare_op.2, c3s1_post_processing.py:72),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $330pred, 334, 464
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 334
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: $const336.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $338is_op.2 = v.8 is $const336.1
DEBUG:numba.core.ssa:on stmt: bool340 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $340pred = call bool340($338is_op.2, func=bool340, args=(Var($338is_op.2, c3s1_post_processing.py:73),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $340pred, 344, 360
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: $344load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $346load_attr.1 = getattr(value=$344load_global.0, attr=ones)
DEBUG:numba.core.ssa:on stmt: $350load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $352load_attr.4 = getattr(value=$350load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: v.3 = call $346load_attr.1(K, func=$346load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($352load_attr.4, c3s1_post_processing.py:74))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 360
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 360
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: v.9 = phi(incoming_values=[Var(v.3, c3s1_post_processing.py:74), Var(v.8, c3s1_post_processing.py:73)], incoming_blocks=[344, 334])
DEBUG:numba.core.ssa:on stmt: $360load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $364call_function.2 = call $360load_global.0(N, func=$360load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $366get_iter.3 = getiter(value=$364call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi368.0 = $366get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 368
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 368
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: $368for_iter.1 = iternext(value=$phi368.0)
DEBUG:numba.core.ssa:on stmt: $368for_iter.2 = pair_first(value=$368for_iter.1)
DEBUG:numba.core.ssa:on stmt: $368for_iter.3 = pair_second(value=$368for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi370.1 = $368for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $368for_iter.3, 370, 464
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 370
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: n.2 = $phi370.1
DEBUG:numba.core.ssa:on stmt: $372load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $374load_method.3 = getattr(value=$372load_global.2, attr=max)
DEBUG:numba.core.ssa:on stmt: $376load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $378load_method.5 = getattr(value=$376load_global.4, attr=abs)
DEBUG:numba.core.ssa:on stmt: $const382.7 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const384.8 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $386build_slice.9 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $386build_slice.10 = call $386build_slice.9($const382.7, $const384.8, func=$386build_slice.9, args=(Var($const382.7, c3s1_post_processing.py:76), Var($const384.8, c3s1_post_processing.py:76)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390build_tuple.12 = build_tuple(items=[Var($386build_slice.10, c3s1_post_processing.py:76), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def var='n' stmt=$390build_tuple.12 = build_tuple(items=[Var($386build_slice.10, c3s1_post_processing.py:76), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:replaced with: $390build_tuple.12 = build_tuple(items=[Var($386build_slice.10, c3s1_post_processing.py:76), Var(n.2, c3s1_post_processing.py:75)])
DEBUG:numba.core.ssa:on stmt: $392binary_subscr.13 = getitem(value=X, index=$390build_tuple.12, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $394call_method.14 = call $378load_method.5($392binary_subscr.13, func=$378load_method.5, args=[Var($392binary_subscr.13, c3s1_post_processing.py:76)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: s = call $374load_method.3($394call_method.14, func=$374load_method.3, args=[Var($394call_method.14, c3s1_post_processing.py:76)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $404compare_op.18 = s > threshold
DEBUG:numba.core.ssa:on stmt: bool406 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $406pred = call bool406($404compare_op.18, func=bool406, args=(Var($404compare_op.18, c3s1_post_processing.py:77),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $406pred, 410, 444
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 410
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: $const412.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const414.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $416build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $416build_slice.5 = call $416build_slice.4($const412.2, $const414.3, func=$416build_slice.4, args=(Var($const412.2, c3s1_post_processing.py:78), Var($const414.3, c3s1_post_processing.py:78)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $420build_tuple.7 = build_tuple(items=[Var($416build_slice.5, c3s1_post_processing.py:78), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def var='n' stmt=$420build_tuple.7 = build_tuple(items=[Var($416build_slice.5, c3s1_post_processing.py:78), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def_from_top label 410
DEBUG:numba.core.ssa:idom 370 from label 410
DEBUG:numba.core.ssa:find_def_from_bottom label 370
DEBUG:numba.core.ssa:replaced with: $420build_tuple.7 = build_tuple(items=[Var($416build_slice.5, c3s1_post_processing.py:78), Var(n.2, c3s1_post_processing.py:75)])
DEBUG:numba.core.ssa:on stmt: $422binary_subscr.8 = getitem(value=X, index=$420build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $426binary_true_divide.10 = $422binary_subscr.8 / s
DEBUG:numba.core.ssa:on stmt: $const430.12 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const432.13 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $434build_slice.14 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $434build_slice.15 = call $434build_slice.14($const430.12, $const432.13, func=$434build_slice.14, args=(Var($const430.12, c3s1_post_processing.py:78), Var($const432.13, c3s1_post_processing.py:78)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $438build_tuple.17 = build_tuple(items=[Var($434build_slice.15, c3s1_post_processing.py:78), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def var='n' stmt=$438build_tuple.17 = build_tuple(items=[Var($434build_slice.15, c3s1_post_processing.py:78), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def_from_top label 410
DEBUG:numba.core.ssa:idom 370 from label 410
DEBUG:numba.core.ssa:find_def_from_bottom label 370
DEBUG:numba.core.ssa:replaced with: $438build_tuple.17 = build_tuple(items=[Var($434build_slice.15, c3s1_post_processing.py:78), Var(n.2, c3s1_post_processing.py:75)])
DEBUG:numba.core.ssa:on stmt: X_norm[$438build_tuple.17] = $426binary_true_divide.10
DEBUG:numba.core.ssa:on stmt: jump 460
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 444
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: $const448.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const450.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $452build_slice.6 = call $452build_slice.5($const448.3, $const450.4, func=$452build_slice.5, args=(Var($const448.3, c3s1_post_processing.py:80), Var($const450.4, c3s1_post_processing.py:80)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $456build_tuple.8 = build_tuple(items=[Var($452build_slice.6, c3s1_post_processing.py:80), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def var='n' stmt=$456build_tuple.8 = build_tuple(items=[Var($452build_slice.6, c3s1_post_processing.py:80), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def_from_top label 444
DEBUG:numba.core.ssa:idom 370 from label 444
DEBUG:numba.core.ssa:find_def_from_bottom label 370
DEBUG:numba.core.ssa:replaced with: $456build_tuple.8 = build_tuple(items=[Var($452build_slice.6, c3s1_post_processing.py:80), Var(n.2, c3s1_post_processing.py:75)])
DEBUG:numba.core.ssa:on stmt: X_norm[$456build_tuple.8] = v.9
DEBUG:numba.core.ssa:on stmt: jump 460
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 460
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: jump 368
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 464
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: v.10 = phi(incoming_values=[Var(v.9, c3s1_post_processing.py:80), Var(v.8, c3s1_post_processing.py:73)], incoming_blocks=[368, 324])
DEBUG:numba.core.ssa:on stmt: $const466.1 = const(str, z)
DEBUG:numba.core.ssa:on stmt: $468compare_op.2 = norm == $const466.1
DEBUG:numba.core.ssa:on stmt: bool470 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $470pred = call bool470($468compare_op.2, func=bool470, args=(Var($468compare_op.2, c3s1_post_processing.py:82),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $470pred, 474, 650
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 474
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: $const476.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $478is_op.2 = v.10 is $const476.1
DEBUG:numba.core.ssa:on stmt: bool480 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $480pred = call bool480($478is_op.2, func=bool480, args=(Var($478is_op.2, c3s1_post_processing.py:83),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $480pred, 484, 500
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 484
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: $484load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $486load_attr.1 = getattr(value=$484load_global.0, attr=zeros)
DEBUG:numba.core.ssa:on stmt: $490load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $492load_attr.4 = getattr(value=$490load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: v.4 = call $486load_attr.1(K, func=$486load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($492load_attr.4, c3s1_post_processing.py:84))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 500
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 500
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: v.11 = phi(incoming_values=[Var(v.10, c3s1_post_processing.py:83), Var(v.4, c3s1_post_processing.py:84)], incoming_blocks=[474, 484])
DEBUG:numba.core.ssa:on stmt: $500load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $504call_function.2 = call $500load_global.0(N, func=$500load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $506get_iter.3 = getiter(value=$504call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi508.0 = $506get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 508
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 508
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: $508for_iter.1 = iternext(value=$phi508.0)
DEBUG:numba.core.ssa:on stmt: $508for_iter.2 = pair_first(value=$508for_iter.1)
DEBUG:numba.core.ssa:on stmt: $508for_iter.3 = pair_second(value=$508for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi510.1 = $508for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $508for_iter.3, 510, 650
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 510
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: n.3 = $phi510.1
DEBUG:numba.core.ssa:on stmt: $512load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $514load_method.3 = getattr(value=$512load_global.2, attr=sum)
DEBUG:numba.core.ssa:on stmt: $const518.5 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const520.6 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $522build_slice.7 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $522build_slice.8 = call $522build_slice.7($const518.5, $const520.6, func=$522build_slice.7, args=(Var($const518.5, c3s1_post_processing.py:86), Var($const520.6, c3s1_post_processing.py:86)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $526build_tuple.10 = build_tuple(items=[Var($522build_slice.8, c3s1_post_processing.py:86), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def var='n' stmt=$526build_tuple.10 = build_tuple(items=[Var($522build_slice.8, c3s1_post_processing.py:86), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:replaced with: $526build_tuple.10 = build_tuple(items=[Var($522build_slice.8, c3s1_post_processing.py:86), Var(n.3, c3s1_post_processing.py:85)])
DEBUG:numba.core.ssa:on stmt: $528binary_subscr.11 = getitem(value=X, index=$526build_tuple.10, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $530call_method.12 = call $514load_method.3($528binary_subscr.11, func=$514load_method.3, args=[Var($528binary_subscr.11, c3s1_post_processing.py:86)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: mu = $530call_method.12 / K
DEBUG:numba.core.ssa:on stmt: $538load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $540load_method.16 = getattr(value=$538load_global.15, attr=sqrt)
DEBUG:numba.core.ssa:on stmt: $542load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $544load_method.18 = getattr(value=$542load_global.17, attr=sum)
DEBUG:numba.core.ssa:on stmt: $const548.20 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const550.21 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $552build_slice.22 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $552build_slice.23 = call $552build_slice.22($const548.20, $const550.21, func=$552build_slice.22, args=(Var($const548.20, c3s1_post_processing.py:87), Var($const550.21, c3s1_post_processing.py:87)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $556build_tuple.25 = build_tuple(items=[Var($552build_slice.23, c3s1_post_processing.py:87), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def var='n' stmt=$556build_tuple.25 = build_tuple(items=[Var($552build_slice.23, c3s1_post_processing.py:87), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:replaced with: $556build_tuple.25 = build_tuple(items=[Var($552build_slice.23, c3s1_post_processing.py:87), Var(n.3, c3s1_post_processing.py:85)])
DEBUG:numba.core.ssa:on stmt: $558binary_subscr.26 = getitem(value=X, index=$556build_tuple.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $562binary_subtract.28 = $558binary_subscr.26 - mu
DEBUG:numba.core.ssa:on stmt: $const564.29 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $566binary_power.30 = $562binary_subtract.28 ** $const564.29
DEBUG:numba.core.ssa:on stmt: $568call_method.31 = call $544load_method.18($566binary_power.30, func=$544load_method.18, args=[Var($566binary_power.30, c3s1_post_processing.py:87)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const572.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $574binary_subtract.34 = K - $const572.33
DEBUG:numba.core.ssa:on stmt: $576binary_true_divide.35 = $568call_method.31 / $574binary_subtract.34
DEBUG:numba.core.ssa:on stmt: sigma = call $540load_method.16($576binary_true_divide.35, func=$540load_method.16, args=[Var($576binary_true_divide.35, c3s1_post_processing.py:87)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $586compare_op.39 = sigma > threshold
DEBUG:numba.core.ssa:on stmt: bool588 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $588pred = call bool588($586compare_op.39, func=bool588, args=(Var($586compare_op.39, c3s1_post_processing.py:88),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $588pred, 592, 630
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 592
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: $const594.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const596.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $598build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $598build_slice.5 = call $598build_slice.4($const594.2, $const596.3, func=$598build_slice.4, args=(Var($const594.2, c3s1_post_processing.py:89), Var($const596.3, c3s1_post_processing.py:89)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $602build_tuple.7 = build_tuple(items=[Var($598build_slice.5, c3s1_post_processing.py:89), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def var='n' stmt=$602build_tuple.7 = build_tuple(items=[Var($598build_slice.5, c3s1_post_processing.py:89), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def_from_top label 592
DEBUG:numba.core.ssa:idom 510 from label 592
DEBUG:numba.core.ssa:find_def_from_bottom label 510
DEBUG:numba.core.ssa:replaced with: $602build_tuple.7 = build_tuple(items=[Var($598build_slice.5, c3s1_post_processing.py:89), Var(n.3, c3s1_post_processing.py:85)])
DEBUG:numba.core.ssa:on stmt: $604binary_subscr.8 = getitem(value=X, index=$602build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $608binary_subtract.10 = $604binary_subscr.8 - mu
DEBUG:numba.core.ssa:on stmt: $612binary_true_divide.12 = $608binary_subtract.10 / sigma
DEBUG:numba.core.ssa:on stmt: $const616.14 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const618.15 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $620build_slice.16 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $620build_slice.17 = call $620build_slice.16($const616.14, $const618.15, func=$620build_slice.16, args=(Var($const616.14, c3s1_post_processing.py:89), Var($const618.15, c3s1_post_processing.py:89)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $624build_tuple.19 = build_tuple(items=[Var($620build_slice.17, c3s1_post_processing.py:89), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def var='n' stmt=$624build_tuple.19 = build_tuple(items=[Var($620build_slice.17, c3s1_post_processing.py:89), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def_from_top label 592
DEBUG:numba.core.ssa:idom 510 from label 592
DEBUG:numba.core.ssa:find_def_from_bottom label 510
DEBUG:numba.core.ssa:replaced with: $624build_tuple.19 = build_tuple(items=[Var($620build_slice.17, c3s1_post_processing.py:89), Var(n.3, c3s1_post_processing.py:85)])
DEBUG:numba.core.ssa:on stmt: X_norm[$624build_tuple.19] = $612binary_true_divide.12
DEBUG:numba.core.ssa:on stmt: jump 646
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 630
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: $const634.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const636.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $638build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $638build_slice.6 = call $638build_slice.5($const634.3, $const636.4, func=$638build_slice.5, args=(Var($const634.3, c3s1_post_processing.py:91), Var($const636.4, c3s1_post_processing.py:91)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $642build_tuple.8 = build_tuple(items=[Var($638build_slice.6, c3s1_post_processing.py:91), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def var='n' stmt=$642build_tuple.8 = build_tuple(items=[Var($638build_slice.6, c3s1_post_processing.py:91), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:find_def_from_top label 630
DEBUG:numba.core.ssa:idom 510 from label 630
DEBUG:numba.core.ssa:find_def_from_bottom label 510
DEBUG:numba.core.ssa:replaced with: $642build_tuple.8 = build_tuple(items=[Var($638build_slice.6, c3s1_post_processing.py:91), Var(n.3, c3s1_post_processing.py:85)])
DEBUG:numba.core.ssa:on stmt: X_norm[$642build_tuple.8] = v.11
DEBUG:numba.core.ssa:on stmt: jump 646
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 646
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: jump 508
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 650
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: $652return_value.1 = cast(value=X_norm)
DEBUG:numba.core.ssa:on stmt: return $652return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 651
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: jump 226
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 652
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CB2FA00>
DEBUG:numba.core.ssa:on stmt: jump 82
DEBUG:numba.core.ssa:Fix SSA violator on var s
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: X = arg(0, name=X)
DEBUG:numba.core.ssa:on stmt: norm = arg(1, name=norm)
DEBUG:numba.core.ssa:on stmt: threshold = arg(2, name=threshold)
DEBUG:numba.core.ssa:on stmt: v = arg(3, name=v)
DEBUG:numba.core.ssa:on stmt: $const_1 = const(str, 1)
DEBUG:numba.core.ssa:on stmt: $const_2 = const(str, 2)
DEBUG:numba.core.ssa:on stmt: $const_max = const(str, max)
DEBUG:numba.core.ssa:on stmt: $const_z = const(str, z)
DEBUG:numba.core.ssa:on stmt: $const4.1 = build_tuple(items=[Var($const_1, c3s1_post_processing.py:47), Var($const_2, c3s1_post_processing.py:47), Var($const_max, c3s1_post_processing.py:47), Var($const_z, c3s1_post_processing.py:47)])
DEBUG:numba.core.ssa:on stmt: $6contains_op.2 = norm in $const4.1
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6contains_op.2, func=bool8, args=(Var($6contains_op.2, c3s1_post_processing.py:47),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 14, 10
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: $assertion_error10.0 = global(AssertionError: <class 'AssertionError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'AssertionError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: $16load_attr.1 = getattr(value=X, attr=shape)
DEBUG:numba.core.ssa:on stmt: $18unpack_sequence.4 = exhaust_iter(value=$16load_attr.1, count=2)
DEBUG:numba.core.ssa:on stmt: $18unpack_sequence.2 = static_getitem(value=$18unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $18unpack_sequence.3 = static_getitem(value=$18unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: K = $18unpack_sequence.2
DEBUG:numba.core.ssa:on stmt: N = $18unpack_sequence.3
DEBUG:numba.core.ssa:on stmt: $24load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $26load_method.6 = getattr(value=$24load_global.5, attr=zeros)
DEBUG:numba.core.ssa:on stmt: $32build_tuple.9 = build_tuple(items=[Var(K, c3s1_post_processing.py:49), Var(N, c3s1_post_processing.py:49)])
DEBUG:numba.core.ssa:on stmt: X_norm = call $26load_method.6($32build_tuple.9, func=$26load_method.6, args=[Var($32build_tuple.9, c3s1_post_processing.py:50)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const40.12 = const(str, 1)
DEBUG:numba.core.ssa:on stmt: $42compare_op.13 = norm == $const40.12
DEBUG:numba.core.ssa:on stmt: bool44 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $44pred = call bool44($42compare_op.13, func=bool44, args=(Var($42compare_op.13, c3s1_post_processing.py:52),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $44pred, 46, 174
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 46
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: $const48.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $50is_op.2 = v is $const48.1
DEBUG:numba.core.ssa:on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $52pred = call bool52($50is_op.2, func=bool52, args=(Var($50is_op.2, c3s1_post_processing.py:53),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $52pred, 54, 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 54
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: $54load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $56load_attr.1 = getattr(value=$54load_global.0, attr=ones)
DEBUG:numba.core.ssa:on stmt: $60load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $62load_attr.4 = getattr(value=$60load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: $66call_function_kw.6 = call $56load_attr.1(K, func=$56load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($62load_attr.4, c3s1_post_processing.py:54))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: v.1 = $66call_function_kw.6 / K
DEBUG:numba.core.ssa:on stmt: jump 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: v.5 = phi(incoming_values=[Var(v.1, c3s1_post_processing.py:54), Var(v, c3s1_post_processing.py:47)], incoming_blocks=[54, 46])
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $78call_function.2 = call $74load_global.0(N, func=$74load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $80get_iter.3 = getiter(value=$78call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi82.0 = $80get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 82
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 82
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: $82for_iter.1 = iternext(value=$phi82.0)
DEBUG:numba.core.ssa:on stmt: $82for_iter.2 = pair_first(value=$82for_iter.1)
DEBUG:numba.core.ssa:on stmt: $82for_iter.3 = pair_second(value=$82for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi84.1 = $82for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $82for_iter.3, 84, 174
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: n = $phi84.1
DEBUG:numba.core.ssa:on stmt: $86load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $88load_method.3 = getattr(value=$86load_global.2, attr=sum)
DEBUG:numba.core.ssa:on stmt: $90load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=abs)
DEBUG:numba.core.ssa:on stmt: $const96.7 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const98.8 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $100build_slice.9 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $100build_slice.10 = call $100build_slice.9($const96.7, $const98.8, func=$100build_slice.9, args=(Var($const96.7, c3s1_post_processing.py:56), Var($const98.8, c3s1_post_processing.py:56)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $104build_tuple.12 = build_tuple(items=[Var($100build_slice.10, c3s1_post_processing.py:56), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $106binary_subscr.13 = getitem(value=X, index=$104build_tuple.12, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $108call_method.14 = call $92load_method.5($106binary_subscr.13, func=$92load_method.5, args=[Var($106binary_subscr.13, c3s1_post_processing.py:56)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: s = call $88load_method.3($108call_method.14, func=$88load_method.3, args=[Var($108call_method.14, c3s1_post_processing.py:56)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:first assign: s
DEBUG:numba.core.ssa:replaced with: s = call $88load_method.3($108call_method.14, func=$88load_method.3, args=[Var($108call_method.14, c3s1_post_processing.py:56)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $118compare_op.18 = s > threshold
DEBUG:numba.core.ssa:on stmt: bool120 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $120pred = call bool120($118compare_op.18, func=bool120, args=(Var($118compare_op.18, c3s1_post_processing.py:57),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $120pred, 122, 156
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 122
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: $const124.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const126.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $128build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $128build_slice.5 = call $128build_slice.4($const124.2, $const126.3, func=$128build_slice.4, args=(Var($const124.2, c3s1_post_processing.py:58), Var($const126.3, c3s1_post_processing.py:58)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $132build_tuple.7 = build_tuple(items=[Var($128build_slice.5, c3s1_post_processing.py:58), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $134binary_subscr.8 = getitem(value=X, index=$132build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $138binary_true_divide.10 = $134binary_subscr.8 / s
DEBUG:numba.core.ssa:on stmt: $const142.12 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const144.13 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $146build_slice.14 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $146build_slice.15 = call $146build_slice.14($const142.12, $const144.13, func=$146build_slice.14, args=(Var($const142.12, c3s1_post_processing.py:58), Var($const144.13, c3s1_post_processing.py:58)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $150build_tuple.17 = build_tuple(items=[Var($146build_slice.15, c3s1_post_processing.py:58), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$150build_tuple.17] = $138binary_true_divide.10
DEBUG:numba.core.ssa:on stmt: jump 652
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 156
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: $const160.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const162.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $164build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $164build_slice.6 = call $164build_slice.5($const160.3, $const162.4, func=$164build_slice.5, args=(Var($const160.3, c3s1_post_processing.py:60), Var($const162.4, c3s1_post_processing.py:60)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $168build_tuple.8 = build_tuple(items=[Var($164build_slice.6, c3s1_post_processing.py:60), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$168build_tuple.8] = v.5
DEBUG:numba.core.ssa:on stmt: jump 652
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 174
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: v.6 = phi(incoming_values=[Var(v.5, c3s1_post_processing.py:60), Var(v, c3s1_post_processing.py:47)], incoming_blocks=[82, 14])
DEBUG:numba.core.ssa:on stmt: $const176.1 = const(str, 2)
DEBUG:numba.core.ssa:on stmt: $178compare_op.2 = norm == $const176.1
DEBUG:numba.core.ssa:on stmt: bool180 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $180pred = call bool180($178compare_op.2, func=bool180, args=(Var($178compare_op.2, c3s1_post_processing.py:62),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $180pred, 184, 324
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: $const186.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $188is_op.2 = v.6 is $const186.1
DEBUG:numba.core.ssa:on stmt: bool190 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $190pred = call bool190($188is_op.2, func=bool190, args=(Var($188is_op.2, c3s1_post_processing.py:63),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $190pred, 192, 218
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 192
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $194load_attr.1 = getattr(value=$192load_global.0, attr=ones)
DEBUG:numba.core.ssa:on stmt: $198load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $200load_attr.4 = getattr(value=$198load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: $204call_function_kw.6 = call $194load_attr.1(K, func=$194load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($200load_attr.4, c3s1_post_processing.py:64))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $206load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $208load_method.8 = getattr(value=$206load_global.7, attr=sqrt)
DEBUG:numba.core.ssa:on stmt: $212call_method.10 = call $208load_method.8(K, func=$208load_method.8, args=[Var(K, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: v.2 = $204call_function_kw.6 / $212call_method.10
DEBUG:numba.core.ssa:on stmt: jump 218
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 218
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: v.7 = phi(incoming_values=[Var(v.6, c3s1_post_processing.py:63), Var(v.2, c3s1_post_processing.py:64)], incoming_blocks=[184, 192])
DEBUG:numba.core.ssa:on stmt: $218load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $222call_function.2 = call $218load_global.0(N, func=$218load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $224get_iter.3 = getiter(value=$222call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi226.0 = $224get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 226
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 226
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: $226for_iter.1 = iternext(value=$phi226.0)
DEBUG:numba.core.ssa:on stmt: $226for_iter.2 = pair_first(value=$226for_iter.1)
DEBUG:numba.core.ssa:on stmt: $226for_iter.3 = pair_second(value=$226for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi228.1 = $226for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $226for_iter.3, 228, 324
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 228
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: n.1 = $phi228.1
DEBUG:numba.core.ssa:on stmt: $230load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $232load_method.3 = getattr(value=$230load_global.2, attr=sqrt)
DEBUG:numba.core.ssa:on stmt: $234load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $236load_method.5 = getattr(value=$234load_global.4, attr=sum)
DEBUG:numba.core.ssa:on stmt: $const240.7 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const242.8 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $244build_slice.9 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $244build_slice.10 = call $244build_slice.9($const240.7, $const242.8, func=$244build_slice.9, args=(Var($const240.7, c3s1_post_processing.py:66), Var($const242.8, c3s1_post_processing.py:66)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $248build_tuple.12 = build_tuple(items=[Var($244build_slice.10, c3s1_post_processing.py:66), Var(n.1, c3s1_post_processing.py:65)])
DEBUG:numba.core.ssa:on stmt: $250binary_subscr.13 = getitem(value=X, index=$248build_tuple.12, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const252.14 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $254binary_power.15 = $250binary_subscr.13 ** $const252.14
DEBUG:numba.core.ssa:on stmt: $256call_method.16 = call $236load_method.5($254binary_power.15, func=$236load_method.5, args=[Var($254binary_power.15, c3s1_post_processing.py:66)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: s = call $232load_method.3($256call_method.16, func=$232load_method.3, args=[Var($256call_method.16, c3s1_post_processing.py:66)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:replaced with: s.1 = call $232load_method.3($256call_method.16, func=$232load_method.3, args=[Var($256call_method.16, c3s1_post_processing.py:66)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $266compare_op.20 = s > threshold
DEBUG:numba.core.ssa:on stmt: bool268 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $268pred = call bool268($266compare_op.20, func=bool268, args=(Var($266compare_op.20, c3s1_post_processing.py:67),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $268pred, 272, 306
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 272
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: $const274.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const276.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $278build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $278build_slice.5 = call $278build_slice.4($const274.2, $const276.3, func=$278build_slice.4, args=(Var($const274.2, c3s1_post_processing.py:68), Var($const276.3, c3s1_post_processing.py:68)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $282build_tuple.7 = build_tuple(items=[Var($278build_slice.5, c3s1_post_processing.py:68), Var(n.1, c3s1_post_processing.py:65)])
DEBUG:numba.core.ssa:on stmt: $284binary_subscr.8 = getitem(value=X, index=$282build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $288binary_true_divide.10 = $284binary_subscr.8 / s
DEBUG:numba.core.ssa:on stmt: $const292.12 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const294.13 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $296build_slice.14 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $296build_slice.15 = call $296build_slice.14($const292.12, $const294.13, func=$296build_slice.14, args=(Var($const292.12, c3s1_post_processing.py:68), Var($const294.13, c3s1_post_processing.py:68)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $300build_tuple.17 = build_tuple(items=[Var($296build_slice.15, c3s1_post_processing.py:68), Var(n.1, c3s1_post_processing.py:65)])
DEBUG:numba.core.ssa:on stmt: X_norm[$300build_tuple.17] = $288binary_true_divide.10
DEBUG:numba.core.ssa:on stmt: jump 651
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 306
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: $const310.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const312.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $314build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $314build_slice.6 = call $314build_slice.5($const310.3, $const312.4, func=$314build_slice.5, args=(Var($const310.3, c3s1_post_processing.py:70), Var($const312.4, c3s1_post_processing.py:70)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $318build_tuple.8 = build_tuple(items=[Var($314build_slice.6, c3s1_post_processing.py:70), Var(n.1, c3s1_post_processing.py:65)])
DEBUG:numba.core.ssa:on stmt: X_norm[$318build_tuple.8] = v.7
DEBUG:numba.core.ssa:on stmt: jump 651
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 324
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: v.8 = phi(incoming_values=[Var(v.7, c3s1_post_processing.py:70), Var(v.6, c3s1_post_processing.py:63)], incoming_blocks=[226, 174])
DEBUG:numba.core.ssa:on stmt: $const326.1 = const(str, max)
DEBUG:numba.core.ssa:on stmt: $328compare_op.2 = norm == $const326.1
DEBUG:numba.core.ssa:on stmt: bool330 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $330pred = call bool330($328compare_op.2, func=bool330, args=(Var($328compare_op.2, c3s1_post_processing.py:72),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $330pred, 334, 464
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 334
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: $const336.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $338is_op.2 = v.8 is $const336.1
DEBUG:numba.core.ssa:on stmt: bool340 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $340pred = call bool340($338is_op.2, func=bool340, args=(Var($338is_op.2, c3s1_post_processing.py:73),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $340pred, 344, 360
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: $344load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $346load_attr.1 = getattr(value=$344load_global.0, attr=ones)
DEBUG:numba.core.ssa:on stmt: $350load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $352load_attr.4 = getattr(value=$350load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: v.3 = call $346load_attr.1(K, func=$346load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($352load_attr.4, c3s1_post_processing.py:74))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 360
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 360
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: v.9 = phi(incoming_values=[Var(v.3, c3s1_post_processing.py:74), Var(v.8, c3s1_post_processing.py:73)], incoming_blocks=[344, 334])
DEBUG:numba.core.ssa:on stmt: $360load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $364call_function.2 = call $360load_global.0(N, func=$360load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $366get_iter.3 = getiter(value=$364call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi368.0 = $366get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 368
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 368
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: $368for_iter.1 = iternext(value=$phi368.0)
DEBUG:numba.core.ssa:on stmt: $368for_iter.2 = pair_first(value=$368for_iter.1)
DEBUG:numba.core.ssa:on stmt: $368for_iter.3 = pair_second(value=$368for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi370.1 = $368for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $368for_iter.3, 370, 464
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 370
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: n.2 = $phi370.1
DEBUG:numba.core.ssa:on stmt: $372load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $374load_method.3 = getattr(value=$372load_global.2, attr=max)
DEBUG:numba.core.ssa:on stmt: $376load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $378load_method.5 = getattr(value=$376load_global.4, attr=abs)
DEBUG:numba.core.ssa:on stmt: $const382.7 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const384.8 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $386build_slice.9 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $386build_slice.10 = call $386build_slice.9($const382.7, $const384.8, func=$386build_slice.9, args=(Var($const382.7, c3s1_post_processing.py:76), Var($const384.8, c3s1_post_processing.py:76)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390build_tuple.12 = build_tuple(items=[Var($386build_slice.10, c3s1_post_processing.py:76), Var(n.2, c3s1_post_processing.py:75)])
DEBUG:numba.core.ssa:on stmt: $392binary_subscr.13 = getitem(value=X, index=$390build_tuple.12, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $394call_method.14 = call $378load_method.5($392binary_subscr.13, func=$378load_method.5, args=[Var($392binary_subscr.13, c3s1_post_processing.py:76)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: s = call $374load_method.3($394call_method.14, func=$374load_method.3, args=[Var($394call_method.14, c3s1_post_processing.py:76)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:replaced with: s.2 = call $374load_method.3($394call_method.14, func=$374load_method.3, args=[Var($394call_method.14, c3s1_post_processing.py:76)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $404compare_op.18 = s > threshold
DEBUG:numba.core.ssa:on stmt: bool406 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $406pred = call bool406($404compare_op.18, func=bool406, args=(Var($404compare_op.18, c3s1_post_processing.py:77),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $406pred, 410, 444
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 410
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: $const412.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const414.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $416build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $416build_slice.5 = call $416build_slice.4($const412.2, $const414.3, func=$416build_slice.4, args=(Var($const412.2, c3s1_post_processing.py:78), Var($const414.3, c3s1_post_processing.py:78)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $420build_tuple.7 = build_tuple(items=[Var($416build_slice.5, c3s1_post_processing.py:78), Var(n.2, c3s1_post_processing.py:75)])
DEBUG:numba.core.ssa:on stmt: $422binary_subscr.8 = getitem(value=X, index=$420build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $426binary_true_divide.10 = $422binary_subscr.8 / s
DEBUG:numba.core.ssa:on stmt: $const430.12 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const432.13 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $434build_slice.14 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $434build_slice.15 = call $434build_slice.14($const430.12, $const432.13, func=$434build_slice.14, args=(Var($const430.12, c3s1_post_processing.py:78), Var($const432.13, c3s1_post_processing.py:78)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $438build_tuple.17 = build_tuple(items=[Var($434build_slice.15, c3s1_post_processing.py:78), Var(n.2, c3s1_post_processing.py:75)])
DEBUG:numba.core.ssa:on stmt: X_norm[$438build_tuple.17] = $426binary_true_divide.10
DEBUG:numba.core.ssa:on stmt: jump 460
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 444
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: $const448.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const450.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $452build_slice.6 = call $452build_slice.5($const448.3, $const450.4, func=$452build_slice.5, args=(Var($const448.3, c3s1_post_processing.py:80), Var($const450.4, c3s1_post_processing.py:80)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $456build_tuple.8 = build_tuple(items=[Var($452build_slice.6, c3s1_post_processing.py:80), Var(n.2, c3s1_post_processing.py:75)])
DEBUG:numba.core.ssa:on stmt: X_norm[$456build_tuple.8] = v.9
DEBUG:numba.core.ssa:on stmt: jump 460
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 460
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: jump 368
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 464
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: v.10 = phi(incoming_values=[Var(v.9, c3s1_post_processing.py:80), Var(v.8, c3s1_post_processing.py:73)], incoming_blocks=[368, 324])
DEBUG:numba.core.ssa:on stmt: $const466.1 = const(str, z)
DEBUG:numba.core.ssa:on stmt: $468compare_op.2 = norm == $const466.1
DEBUG:numba.core.ssa:on stmt: bool470 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $470pred = call bool470($468compare_op.2, func=bool470, args=(Var($468compare_op.2, c3s1_post_processing.py:82),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $470pred, 474, 650
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 474
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: $const476.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $478is_op.2 = v.10 is $const476.1
DEBUG:numba.core.ssa:on stmt: bool480 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $480pred = call bool480($478is_op.2, func=bool480, args=(Var($478is_op.2, c3s1_post_processing.py:83),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $480pred, 484, 500
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 484
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: $484load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $486load_attr.1 = getattr(value=$484load_global.0, attr=zeros)
DEBUG:numba.core.ssa:on stmt: $490load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $492load_attr.4 = getattr(value=$490load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: v.4 = call $486load_attr.1(K, func=$486load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($492load_attr.4, c3s1_post_processing.py:84))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 500
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 500
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: v.11 = phi(incoming_values=[Var(v.10, c3s1_post_processing.py:83), Var(v.4, c3s1_post_processing.py:84)], incoming_blocks=[474, 484])
DEBUG:numba.core.ssa:on stmt: $500load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $504call_function.2 = call $500load_global.0(N, func=$500load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $506get_iter.3 = getiter(value=$504call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi508.0 = $506get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 508
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 508
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: $508for_iter.1 = iternext(value=$phi508.0)
DEBUG:numba.core.ssa:on stmt: $508for_iter.2 = pair_first(value=$508for_iter.1)
DEBUG:numba.core.ssa:on stmt: $508for_iter.3 = pair_second(value=$508for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi510.1 = $508for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $508for_iter.3, 510, 650
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 510
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: n.3 = $phi510.1
DEBUG:numba.core.ssa:on stmt: $512load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $514load_method.3 = getattr(value=$512load_global.2, attr=sum)
DEBUG:numba.core.ssa:on stmt: $const518.5 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const520.6 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $522build_slice.7 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $522build_slice.8 = call $522build_slice.7($const518.5, $const520.6, func=$522build_slice.7, args=(Var($const518.5, c3s1_post_processing.py:86), Var($const520.6, c3s1_post_processing.py:86)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $526build_tuple.10 = build_tuple(items=[Var($522build_slice.8, c3s1_post_processing.py:86), Var(n.3, c3s1_post_processing.py:85)])
DEBUG:numba.core.ssa:on stmt: $528binary_subscr.11 = getitem(value=X, index=$526build_tuple.10, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $530call_method.12 = call $514load_method.3($528binary_subscr.11, func=$514load_method.3, args=[Var($528binary_subscr.11, c3s1_post_processing.py:86)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: mu = $530call_method.12 / K
DEBUG:numba.core.ssa:on stmt: $538load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $540load_method.16 = getattr(value=$538load_global.15, attr=sqrt)
DEBUG:numba.core.ssa:on stmt: $542load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $544load_method.18 = getattr(value=$542load_global.17, attr=sum)
DEBUG:numba.core.ssa:on stmt: $const548.20 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const550.21 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $552build_slice.22 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $552build_slice.23 = call $552build_slice.22($const548.20, $const550.21, func=$552build_slice.22, args=(Var($const548.20, c3s1_post_processing.py:87), Var($const550.21, c3s1_post_processing.py:87)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $556build_tuple.25 = build_tuple(items=[Var($552build_slice.23, c3s1_post_processing.py:87), Var(n.3, c3s1_post_processing.py:85)])
DEBUG:numba.core.ssa:on stmt: $558binary_subscr.26 = getitem(value=X, index=$556build_tuple.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $562binary_subtract.28 = $558binary_subscr.26 - mu
DEBUG:numba.core.ssa:on stmt: $const564.29 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $566binary_power.30 = $562binary_subtract.28 ** $const564.29
DEBUG:numba.core.ssa:on stmt: $568call_method.31 = call $544load_method.18($566binary_power.30, func=$544load_method.18, args=[Var($566binary_power.30, c3s1_post_processing.py:87)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const572.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $574binary_subtract.34 = K - $const572.33
DEBUG:numba.core.ssa:on stmt: $576binary_true_divide.35 = $568call_method.31 / $574binary_subtract.34
DEBUG:numba.core.ssa:on stmt: sigma = call $540load_method.16($576binary_true_divide.35, func=$540load_method.16, args=[Var($576binary_true_divide.35, c3s1_post_processing.py:87)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $586compare_op.39 = sigma > threshold
DEBUG:numba.core.ssa:on stmt: bool588 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $588pred = call bool588($586compare_op.39, func=bool588, args=(Var($586compare_op.39, c3s1_post_processing.py:88),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $588pred, 592, 630
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 592
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: $const594.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const596.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $598build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $598build_slice.5 = call $598build_slice.4($const594.2, $const596.3, func=$598build_slice.4, args=(Var($const594.2, c3s1_post_processing.py:89), Var($const596.3, c3s1_post_processing.py:89)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $602build_tuple.7 = build_tuple(items=[Var($598build_slice.5, c3s1_post_processing.py:89), Var(n.3, c3s1_post_processing.py:85)])
DEBUG:numba.core.ssa:on stmt: $604binary_subscr.8 = getitem(value=X, index=$602build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $608binary_subtract.10 = $604binary_subscr.8 - mu
DEBUG:numba.core.ssa:on stmt: $612binary_true_divide.12 = $608binary_subtract.10 / sigma
DEBUG:numba.core.ssa:on stmt: $const616.14 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const618.15 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $620build_slice.16 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $620build_slice.17 = call $620build_slice.16($const616.14, $const618.15, func=$620build_slice.16, args=(Var($const616.14, c3s1_post_processing.py:89), Var($const618.15, c3s1_post_processing.py:89)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $624build_tuple.19 = build_tuple(items=[Var($620build_slice.17, c3s1_post_processing.py:89), Var(n.3, c3s1_post_processing.py:85)])
DEBUG:numba.core.ssa:on stmt: X_norm[$624build_tuple.19] = $612binary_true_divide.12
DEBUG:numba.core.ssa:on stmt: jump 646
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 630
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: $const634.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const636.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $638build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $638build_slice.6 = call $638build_slice.5($const634.3, $const636.4, func=$638build_slice.5, args=(Var($const634.3, c3s1_post_processing.py:91), Var($const636.4, c3s1_post_processing.py:91)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $642build_tuple.8 = build_tuple(items=[Var($638build_slice.6, c3s1_post_processing.py:91), Var(n.3, c3s1_post_processing.py:85)])
DEBUG:numba.core.ssa:on stmt: X_norm[$642build_tuple.8] = v.11
DEBUG:numba.core.ssa:on stmt: jump 646
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 646
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: jump 508
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 650
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: $652return_value.1 = cast(value=X_norm)
DEBUG:numba.core.ssa:on stmt: return $652return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 651
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: jump 226
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 652
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CB55430>
DEBUG:numba.core.ssa:on stmt: jump 82
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {84: [<numba.core.ir.Assign object at 0x0000029B6CB99E80>],
             228: [<numba.core.ir.Assign object at 0x0000029B6CB99550>],
             370: [<numba.core.ir.Assign object at 0x0000029B6C775F70>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: X = arg(0, name=X)
DEBUG:numba.core.ssa:on stmt: norm = arg(1, name=norm)
DEBUG:numba.core.ssa:on stmt: threshold = arg(2, name=threshold)
DEBUG:numba.core.ssa:on stmt: v = arg(3, name=v)
DEBUG:numba.core.ssa:on stmt: $const_1 = const(str, 1)
DEBUG:numba.core.ssa:on stmt: $const_2 = const(str, 2)
DEBUG:numba.core.ssa:on stmt: $const_max = const(str, max)
DEBUG:numba.core.ssa:on stmt: $const_z = const(str, z)
DEBUG:numba.core.ssa:on stmt: $const4.1 = build_tuple(items=[Var($const_1, c3s1_post_processing.py:47), Var($const_2, c3s1_post_processing.py:47), Var($const_max, c3s1_post_processing.py:47), Var($const_z, c3s1_post_processing.py:47)])
DEBUG:numba.core.ssa:on stmt: $6contains_op.2 = norm in $const4.1
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6contains_op.2, func=bool8, args=(Var($6contains_op.2, c3s1_post_processing.py:47),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 14, 10
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: $assertion_error10.0 = global(AssertionError: <class 'AssertionError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'AssertionError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: $16load_attr.1 = getattr(value=X, attr=shape)
DEBUG:numba.core.ssa:on stmt: $18unpack_sequence.4 = exhaust_iter(value=$16load_attr.1, count=2)
DEBUG:numba.core.ssa:on stmt: $18unpack_sequence.2 = static_getitem(value=$18unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $18unpack_sequence.3 = static_getitem(value=$18unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: K = $18unpack_sequence.2
DEBUG:numba.core.ssa:on stmt: N = $18unpack_sequence.3
DEBUG:numba.core.ssa:on stmt: $24load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $26load_method.6 = getattr(value=$24load_global.5, attr=zeros)
DEBUG:numba.core.ssa:on stmt: $32build_tuple.9 = build_tuple(items=[Var(K, c3s1_post_processing.py:49), Var(N, c3s1_post_processing.py:49)])
DEBUG:numba.core.ssa:on stmt: X_norm = call $26load_method.6($32build_tuple.9, func=$26load_method.6, args=[Var($32build_tuple.9, c3s1_post_processing.py:50)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const40.12 = const(str, 1)
DEBUG:numba.core.ssa:on stmt: $42compare_op.13 = norm == $const40.12
DEBUG:numba.core.ssa:on stmt: bool44 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $44pred = call bool44($42compare_op.13, func=bool44, args=(Var($42compare_op.13, c3s1_post_processing.py:52),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $44pred, 46, 174
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 46
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: $const48.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $50is_op.2 = v is $const48.1
DEBUG:numba.core.ssa:on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $52pred = call bool52($50is_op.2, func=bool52, args=(Var($50is_op.2, c3s1_post_processing.py:53),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $52pred, 54, 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 54
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: $54load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $56load_attr.1 = getattr(value=$54load_global.0, attr=ones)
DEBUG:numba.core.ssa:on stmt: $60load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $62load_attr.4 = getattr(value=$60load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: $66call_function_kw.6 = call $56load_attr.1(K, func=$56load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($62load_attr.4, c3s1_post_processing.py:54))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: v.1 = $66call_function_kw.6 / K
DEBUG:numba.core.ssa:on stmt: jump 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: v.5 = phi(incoming_values=[Var(v.1, c3s1_post_processing.py:54), Var(v, c3s1_post_processing.py:47)], incoming_blocks=[54, 46])
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $78call_function.2 = call $74load_global.0(N, func=$74load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $80get_iter.3 = getiter(value=$78call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi82.0 = $80get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 82
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 82
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: $82for_iter.1 = iternext(value=$phi82.0)
DEBUG:numba.core.ssa:on stmt: $82for_iter.2 = pair_first(value=$82for_iter.1)
DEBUG:numba.core.ssa:on stmt: $82for_iter.3 = pair_second(value=$82for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi84.1 = $82for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $82for_iter.3, 84, 174
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: n = $phi84.1
DEBUG:numba.core.ssa:on stmt: $86load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $88load_method.3 = getattr(value=$86load_global.2, attr=sum)
DEBUG:numba.core.ssa:on stmt: $90load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=abs)
DEBUG:numba.core.ssa:on stmt: $const96.7 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const98.8 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $100build_slice.9 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $100build_slice.10 = call $100build_slice.9($const96.7, $const98.8, func=$100build_slice.9, args=(Var($const96.7, c3s1_post_processing.py:56), Var($const98.8, c3s1_post_processing.py:56)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $104build_tuple.12 = build_tuple(items=[Var($100build_slice.10, c3s1_post_processing.py:56), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $106binary_subscr.13 = getitem(value=X, index=$104build_tuple.12, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $108call_method.14 = call $92load_method.5($106binary_subscr.13, func=$92load_method.5, args=[Var($106binary_subscr.13, c3s1_post_processing.py:56)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: s = call $88load_method.3($108call_method.14, func=$88load_method.3, args=[Var($108call_method.14, c3s1_post_processing.py:56)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $118compare_op.18 = s > threshold
DEBUG:numba.core.ssa:find_def var='s' stmt=$118compare_op.18 = s > threshold
DEBUG:numba.core.ssa:on stmt: bool120 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $120pred = call bool120($118compare_op.18, func=bool120, args=(Var($118compare_op.18, c3s1_post_processing.py:57),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $120pred, 122, 156
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 122
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: $const124.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const126.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $128build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $128build_slice.5 = call $128build_slice.4($const124.2, $const126.3, func=$128build_slice.4, args=(Var($const124.2, c3s1_post_processing.py:58), Var($const126.3, c3s1_post_processing.py:58)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $132build_tuple.7 = build_tuple(items=[Var($128build_slice.5, c3s1_post_processing.py:58), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: $134binary_subscr.8 = getitem(value=X, index=$132build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $138binary_true_divide.10 = $134binary_subscr.8 / s
DEBUG:numba.core.ssa:find_def var='s' stmt=$138binary_true_divide.10 = $134binary_subscr.8 / s
DEBUG:numba.core.ssa:find_def_from_top label 122
DEBUG:numba.core.ssa:idom 84 from label 122
DEBUG:numba.core.ssa:find_def_from_bottom label 84
DEBUG:numba.core.ssa:on stmt: $const142.12 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const144.13 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $146build_slice.14 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $146build_slice.15 = call $146build_slice.14($const142.12, $const144.13, func=$146build_slice.14, args=(Var($const142.12, c3s1_post_processing.py:58), Var($const144.13, c3s1_post_processing.py:58)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $150build_tuple.17 = build_tuple(items=[Var($146build_slice.15, c3s1_post_processing.py:58), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$150build_tuple.17] = $138binary_true_divide.10
DEBUG:numba.core.ssa:on stmt: jump 652
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 156
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: $const160.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const162.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $164build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $164build_slice.6 = call $164build_slice.5($const160.3, $const162.4, func=$164build_slice.5, args=(Var($const160.3, c3s1_post_processing.py:60), Var($const162.4, c3s1_post_processing.py:60)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $168build_tuple.8 = build_tuple(items=[Var($164build_slice.6, c3s1_post_processing.py:60), Var(n, c3s1_post_processing.py:55)])
DEBUG:numba.core.ssa:on stmt: X_norm[$168build_tuple.8] = v.5
DEBUG:numba.core.ssa:on stmt: jump 652
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 174
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: v.6 = phi(incoming_values=[Var(v.5, c3s1_post_processing.py:60), Var(v, c3s1_post_processing.py:47)], incoming_blocks=[82, 14])
DEBUG:numba.core.ssa:on stmt: $const176.1 = const(str, 2)
DEBUG:numba.core.ssa:on stmt: $178compare_op.2 = norm == $const176.1
DEBUG:numba.core.ssa:on stmt: bool180 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $180pred = call bool180($178compare_op.2, func=bool180, args=(Var($178compare_op.2, c3s1_post_processing.py:62),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $180pred, 184, 324
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: $const186.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $188is_op.2 = v.6 is $const186.1
DEBUG:numba.core.ssa:on stmt: bool190 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $190pred = call bool190($188is_op.2, func=bool190, args=(Var($188is_op.2, c3s1_post_processing.py:63),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $190pred, 192, 218
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 192
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $194load_attr.1 = getattr(value=$192load_global.0, attr=ones)
DEBUG:numba.core.ssa:on stmt: $198load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $200load_attr.4 = getattr(value=$198load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: $204call_function_kw.6 = call $194load_attr.1(K, func=$194load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($200load_attr.4, c3s1_post_processing.py:64))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $206load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $208load_method.8 = getattr(value=$206load_global.7, attr=sqrt)
DEBUG:numba.core.ssa:on stmt: $212call_method.10 = call $208load_method.8(K, func=$208load_method.8, args=[Var(K, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: v.2 = $204call_function_kw.6 / $212call_method.10
DEBUG:numba.core.ssa:on stmt: jump 218
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 218
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: v.7 = phi(incoming_values=[Var(v.6, c3s1_post_processing.py:63), Var(v.2, c3s1_post_processing.py:64)], incoming_blocks=[184, 192])
DEBUG:numba.core.ssa:on stmt: $218load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $222call_function.2 = call $218load_global.0(N, func=$218load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $224get_iter.3 = getiter(value=$222call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi226.0 = $224get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 226
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 226
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: $226for_iter.1 = iternext(value=$phi226.0)
DEBUG:numba.core.ssa:on stmt: $226for_iter.2 = pair_first(value=$226for_iter.1)
DEBUG:numba.core.ssa:on stmt: $226for_iter.3 = pair_second(value=$226for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi228.1 = $226for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $226for_iter.3, 228, 324
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 228
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: n.1 = $phi228.1
DEBUG:numba.core.ssa:on stmt: $230load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $232load_method.3 = getattr(value=$230load_global.2, attr=sqrt)
DEBUG:numba.core.ssa:on stmt: $234load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $236load_method.5 = getattr(value=$234load_global.4, attr=sum)
DEBUG:numba.core.ssa:on stmt: $const240.7 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const242.8 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $244build_slice.9 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $244build_slice.10 = call $244build_slice.9($const240.7, $const242.8, func=$244build_slice.9, args=(Var($const240.7, c3s1_post_processing.py:66), Var($const242.8, c3s1_post_processing.py:66)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $248build_tuple.12 = build_tuple(items=[Var($244build_slice.10, c3s1_post_processing.py:66), Var(n.1, c3s1_post_processing.py:65)])
DEBUG:numba.core.ssa:on stmt: $250binary_subscr.13 = getitem(value=X, index=$248build_tuple.12, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const252.14 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $254binary_power.15 = $250binary_subscr.13 ** $const252.14
DEBUG:numba.core.ssa:on stmt: $256call_method.16 = call $236load_method.5($254binary_power.15, func=$236load_method.5, args=[Var($254binary_power.15, c3s1_post_processing.py:66)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: s.1 = call $232load_method.3($256call_method.16, func=$232load_method.3, args=[Var($256call_method.16, c3s1_post_processing.py:66)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $266compare_op.20 = s > threshold
DEBUG:numba.core.ssa:find_def var='s' stmt=$266compare_op.20 = s > threshold
DEBUG:numba.core.ssa:replaced with: $266compare_op.20 = s.1 > threshold
DEBUG:numba.core.ssa:on stmt: bool268 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $268pred = call bool268($266compare_op.20, func=bool268, args=(Var($266compare_op.20, c3s1_post_processing.py:67),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $268pred, 272, 306
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 272
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: $const274.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const276.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $278build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $278build_slice.5 = call $278build_slice.4($const274.2, $const276.3, func=$278build_slice.4, args=(Var($const274.2, c3s1_post_processing.py:68), Var($const276.3, c3s1_post_processing.py:68)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $282build_tuple.7 = build_tuple(items=[Var($278build_slice.5, c3s1_post_processing.py:68), Var(n.1, c3s1_post_processing.py:65)])
DEBUG:numba.core.ssa:on stmt: $284binary_subscr.8 = getitem(value=X, index=$282build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $288binary_true_divide.10 = $284binary_subscr.8 / s
DEBUG:numba.core.ssa:find_def var='s' stmt=$288binary_true_divide.10 = $284binary_subscr.8 / s
DEBUG:numba.core.ssa:find_def_from_top label 272
DEBUG:numba.core.ssa:idom 228 from label 272
DEBUG:numba.core.ssa:find_def_from_bottom label 228
DEBUG:numba.core.ssa:replaced with: $288binary_true_divide.10 = $284binary_subscr.8 / s.1
DEBUG:numba.core.ssa:on stmt: $const292.12 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const294.13 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $296build_slice.14 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $296build_slice.15 = call $296build_slice.14($const292.12, $const294.13, func=$296build_slice.14, args=(Var($const292.12, c3s1_post_processing.py:68), Var($const294.13, c3s1_post_processing.py:68)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $300build_tuple.17 = build_tuple(items=[Var($296build_slice.15, c3s1_post_processing.py:68), Var(n.1, c3s1_post_processing.py:65)])
DEBUG:numba.core.ssa:on stmt: X_norm[$300build_tuple.17] = $288binary_true_divide.10
DEBUG:numba.core.ssa:on stmt: jump 651
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 306
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: $const310.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const312.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $314build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $314build_slice.6 = call $314build_slice.5($const310.3, $const312.4, func=$314build_slice.5, args=(Var($const310.3, c3s1_post_processing.py:70), Var($const312.4, c3s1_post_processing.py:70)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $318build_tuple.8 = build_tuple(items=[Var($314build_slice.6, c3s1_post_processing.py:70), Var(n.1, c3s1_post_processing.py:65)])
DEBUG:numba.core.ssa:on stmt: X_norm[$318build_tuple.8] = v.7
DEBUG:numba.core.ssa:on stmt: jump 651
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 324
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: v.8 = phi(incoming_values=[Var(v.7, c3s1_post_processing.py:70), Var(v.6, c3s1_post_processing.py:63)], incoming_blocks=[226, 174])
DEBUG:numba.core.ssa:on stmt: $const326.1 = const(str, max)
DEBUG:numba.core.ssa:on stmt: $328compare_op.2 = norm == $const326.1
DEBUG:numba.core.ssa:on stmt: bool330 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $330pred = call bool330($328compare_op.2, func=bool330, args=(Var($328compare_op.2, c3s1_post_processing.py:72),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $330pred, 334, 464
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 334
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: $const336.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $338is_op.2 = v.8 is $const336.1
DEBUG:numba.core.ssa:on stmt: bool340 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $340pred = call bool340($338is_op.2, func=bool340, args=(Var($338is_op.2, c3s1_post_processing.py:73),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $340pred, 344, 360
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 344
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: $344load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $346load_attr.1 = getattr(value=$344load_global.0, attr=ones)
DEBUG:numba.core.ssa:on stmt: $350load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $352load_attr.4 = getattr(value=$350load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: v.3 = call $346load_attr.1(K, func=$346load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($352load_attr.4, c3s1_post_processing.py:74))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 360
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 360
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: v.9 = phi(incoming_values=[Var(v.3, c3s1_post_processing.py:74), Var(v.8, c3s1_post_processing.py:73)], incoming_blocks=[344, 334])
DEBUG:numba.core.ssa:on stmt: $360load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $364call_function.2 = call $360load_global.0(N, func=$360load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $366get_iter.3 = getiter(value=$364call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi368.0 = $366get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 368
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 368
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: $368for_iter.1 = iternext(value=$phi368.0)
DEBUG:numba.core.ssa:on stmt: $368for_iter.2 = pair_first(value=$368for_iter.1)
DEBUG:numba.core.ssa:on stmt: $368for_iter.3 = pair_second(value=$368for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi370.1 = $368for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $368for_iter.3, 370, 464
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 370
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: n.2 = $phi370.1
DEBUG:numba.core.ssa:on stmt: $372load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $374load_method.3 = getattr(value=$372load_global.2, attr=max)
DEBUG:numba.core.ssa:on stmt: $376load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $378load_method.5 = getattr(value=$376load_global.4, attr=abs)
DEBUG:numba.core.ssa:on stmt: $const382.7 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const384.8 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $386build_slice.9 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $386build_slice.10 = call $386build_slice.9($const382.7, $const384.8, func=$386build_slice.9, args=(Var($const382.7, c3s1_post_processing.py:76), Var($const384.8, c3s1_post_processing.py:76)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $390build_tuple.12 = build_tuple(items=[Var($386build_slice.10, c3s1_post_processing.py:76), Var(n.2, c3s1_post_processing.py:75)])
DEBUG:numba.core.ssa:on stmt: $392binary_subscr.13 = getitem(value=X, index=$390build_tuple.12, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $394call_method.14 = call $378load_method.5($392binary_subscr.13, func=$378load_method.5, args=[Var($392binary_subscr.13, c3s1_post_processing.py:76)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: s.2 = call $374load_method.3($394call_method.14, func=$374load_method.3, args=[Var($394call_method.14, c3s1_post_processing.py:76)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $404compare_op.18 = s > threshold
DEBUG:numba.core.ssa:find_def var='s' stmt=$404compare_op.18 = s > threshold
DEBUG:numba.core.ssa:replaced with: $404compare_op.18 = s.2 > threshold
DEBUG:numba.core.ssa:on stmt: bool406 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $406pred = call bool406($404compare_op.18, func=bool406, args=(Var($404compare_op.18, c3s1_post_processing.py:77),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $406pred, 410, 444
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 410
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: $const412.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const414.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $416build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $416build_slice.5 = call $416build_slice.4($const412.2, $const414.3, func=$416build_slice.4, args=(Var($const412.2, c3s1_post_processing.py:78), Var($const414.3, c3s1_post_processing.py:78)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $420build_tuple.7 = build_tuple(items=[Var($416build_slice.5, c3s1_post_processing.py:78), Var(n.2, c3s1_post_processing.py:75)])
DEBUG:numba.core.ssa:on stmt: $422binary_subscr.8 = getitem(value=X, index=$420build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $426binary_true_divide.10 = $422binary_subscr.8 / s
DEBUG:numba.core.ssa:find_def var='s' stmt=$426binary_true_divide.10 = $422binary_subscr.8 / s
DEBUG:numba.core.ssa:find_def_from_top label 410
DEBUG:numba.core.ssa:idom 370 from label 410
DEBUG:numba.core.ssa:find_def_from_bottom label 370
DEBUG:numba.core.ssa:replaced with: $426binary_true_divide.10 = $422binary_subscr.8 / s.2
DEBUG:numba.core.ssa:on stmt: $const430.12 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const432.13 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $434build_slice.14 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $434build_slice.15 = call $434build_slice.14($const430.12, $const432.13, func=$434build_slice.14, args=(Var($const430.12, c3s1_post_processing.py:78), Var($const432.13, c3s1_post_processing.py:78)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $438build_tuple.17 = build_tuple(items=[Var($434build_slice.15, c3s1_post_processing.py:78), Var(n.2, c3s1_post_processing.py:75)])
DEBUG:numba.core.ssa:on stmt: X_norm[$438build_tuple.17] = $426binary_true_divide.10
DEBUG:numba.core.ssa:on stmt: jump 460
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 444
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: $const448.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const450.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $452build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $452build_slice.6 = call $452build_slice.5($const448.3, $const450.4, func=$452build_slice.5, args=(Var($const448.3, c3s1_post_processing.py:80), Var($const450.4, c3s1_post_processing.py:80)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $456build_tuple.8 = build_tuple(items=[Var($452build_slice.6, c3s1_post_processing.py:80), Var(n.2, c3s1_post_processing.py:75)])
DEBUG:numba.core.ssa:on stmt: X_norm[$456build_tuple.8] = v.9
DEBUG:numba.core.ssa:on stmt: jump 460
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 460
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: jump 368
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 464
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: v.10 = phi(incoming_values=[Var(v.9, c3s1_post_processing.py:80), Var(v.8, c3s1_post_processing.py:73)], incoming_blocks=[368, 324])
DEBUG:numba.core.ssa:on stmt: $const466.1 = const(str, z)
DEBUG:numba.core.ssa:on stmt: $468compare_op.2 = norm == $const466.1
DEBUG:numba.core.ssa:on stmt: bool470 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $470pred = call bool470($468compare_op.2, func=bool470, args=(Var($468compare_op.2, c3s1_post_processing.py:82),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $470pred, 474, 650
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 474
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: $const476.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $478is_op.2 = v.10 is $const476.1
DEBUG:numba.core.ssa:on stmt: bool480 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $480pred = call bool480($478is_op.2, func=bool480, args=(Var($478is_op.2, c3s1_post_processing.py:83),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $480pred, 484, 500
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 484
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: $484load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $486load_attr.1 = getattr(value=$484load_global.0, attr=zeros)
DEBUG:numba.core.ssa:on stmt: $490load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $492load_attr.4 = getattr(value=$490load_global.3, attr=float64)
DEBUG:numba.core.ssa:on stmt: v.4 = call $486load_attr.1(K, func=$486load_attr.1, args=[Var(K, c3s1_post_processing.py:49)], kws=[('dtype', Var($492load_attr.4, c3s1_post_processing.py:84))], vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 500
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 500
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: v.11 = phi(incoming_values=[Var(v.10, c3s1_post_processing.py:83), Var(v.4, c3s1_post_processing.py:84)], incoming_blocks=[474, 484])
DEBUG:numba.core.ssa:on stmt: $500load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $504call_function.2 = call $500load_global.0(N, func=$500load_global.0, args=[Var(N, c3s1_post_processing.py:49)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $506get_iter.3 = getiter(value=$504call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi508.0 = $506get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 508
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 508
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: $508for_iter.1 = iternext(value=$phi508.0)
DEBUG:numba.core.ssa:on stmt: $508for_iter.2 = pair_first(value=$508for_iter.1)
DEBUG:numba.core.ssa:on stmt: $508for_iter.3 = pair_second(value=$508for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi510.1 = $508for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $508for_iter.3, 510, 650
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 510
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: n.3 = $phi510.1
DEBUG:numba.core.ssa:on stmt: $512load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $514load_method.3 = getattr(value=$512load_global.2, attr=sum)
DEBUG:numba.core.ssa:on stmt: $const518.5 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const520.6 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $522build_slice.7 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $522build_slice.8 = call $522build_slice.7($const518.5, $const520.6, func=$522build_slice.7, args=(Var($const518.5, c3s1_post_processing.py:86), Var($const520.6, c3s1_post_processing.py:86)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $526build_tuple.10 = build_tuple(items=[Var($522build_slice.8, c3s1_post_processing.py:86), Var(n.3, c3s1_post_processing.py:85)])
DEBUG:numba.core.ssa:on stmt: $528binary_subscr.11 = getitem(value=X, index=$526build_tuple.10, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $530call_method.12 = call $514load_method.3($528binary_subscr.11, func=$514load_method.3, args=[Var($528binary_subscr.11, c3s1_post_processing.py:86)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: mu = $530call_method.12 / K
DEBUG:numba.core.ssa:on stmt: $538load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $540load_method.16 = getattr(value=$538load_global.15, attr=sqrt)
DEBUG:numba.core.ssa:on stmt: $542load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $544load_method.18 = getattr(value=$542load_global.17, attr=sum)
DEBUG:numba.core.ssa:on stmt: $const548.20 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const550.21 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $552build_slice.22 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $552build_slice.23 = call $552build_slice.22($const548.20, $const550.21, func=$552build_slice.22, args=(Var($const548.20, c3s1_post_processing.py:87), Var($const550.21, c3s1_post_processing.py:87)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $556build_tuple.25 = build_tuple(items=[Var($552build_slice.23, c3s1_post_processing.py:87), Var(n.3, c3s1_post_processing.py:85)])
DEBUG:numba.core.ssa:on stmt: $558binary_subscr.26 = getitem(value=X, index=$556build_tuple.25, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $562binary_subtract.28 = $558binary_subscr.26 - mu
DEBUG:numba.core.ssa:on stmt: $const564.29 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $566binary_power.30 = $562binary_subtract.28 ** $const564.29
DEBUG:numba.core.ssa:on stmt: $568call_method.31 = call $544load_method.18($566binary_power.30, func=$544load_method.18, args=[Var($566binary_power.30, c3s1_post_processing.py:87)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const572.33 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $574binary_subtract.34 = K - $const572.33
DEBUG:numba.core.ssa:on stmt: $576binary_true_divide.35 = $568call_method.31 / $574binary_subtract.34
DEBUG:numba.core.ssa:on stmt: sigma = call $540load_method.16($576binary_true_divide.35, func=$540load_method.16, args=[Var($576binary_true_divide.35, c3s1_post_processing.py:87)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $586compare_op.39 = sigma > threshold
DEBUG:numba.core.ssa:on stmt: bool588 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $588pred = call bool588($586compare_op.39, func=bool588, args=(Var($586compare_op.39, c3s1_post_processing.py:88),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $588pred, 592, 630
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 592
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: $const594.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const596.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $598build_slice.4 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $598build_slice.5 = call $598build_slice.4($const594.2, $const596.3, func=$598build_slice.4, args=(Var($const594.2, c3s1_post_processing.py:89), Var($const596.3, c3s1_post_processing.py:89)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $602build_tuple.7 = build_tuple(items=[Var($598build_slice.5, c3s1_post_processing.py:89), Var(n.3, c3s1_post_processing.py:85)])
DEBUG:numba.core.ssa:on stmt: $604binary_subscr.8 = getitem(value=X, index=$602build_tuple.7, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $608binary_subtract.10 = $604binary_subscr.8 - mu
DEBUG:numba.core.ssa:on stmt: $612binary_true_divide.12 = $608binary_subtract.10 / sigma
DEBUG:numba.core.ssa:on stmt: $const616.14 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const618.15 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $620build_slice.16 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $620build_slice.17 = call $620build_slice.16($const616.14, $const618.15, func=$620build_slice.16, args=(Var($const616.14, c3s1_post_processing.py:89), Var($const618.15, c3s1_post_processing.py:89)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $624build_tuple.19 = build_tuple(items=[Var($620build_slice.17, c3s1_post_processing.py:89), Var(n.3, c3s1_post_processing.py:85)])
DEBUG:numba.core.ssa:on stmt: X_norm[$624build_tuple.19] = $612binary_true_divide.12
DEBUG:numba.core.ssa:on stmt: jump 646
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 630
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: $const634.3 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $const636.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $638build_slice.5 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $638build_slice.6 = call $638build_slice.5($const634.3, $const636.4, func=$638build_slice.5, args=(Var($const634.3, c3s1_post_processing.py:91), Var($const636.4, c3s1_post_processing.py:91)), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $642build_tuple.8 = build_tuple(items=[Var($638build_slice.6, c3s1_post_processing.py:91), Var(n.3, c3s1_post_processing.py:85)])
DEBUG:numba.core.ssa:on stmt: X_norm[$642build_tuple.8] = v.11
DEBUG:numba.core.ssa:on stmt: jump 646
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 646
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: jump 508
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 650
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: $652return_value.1 = cast(value=X_norm)
DEBUG:numba.core.ssa:on stmt: return $652return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 651
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: jump 226
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 652
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6C7751C0>
DEBUG:numba.core.ssa:on stmt: jump 82
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$tmp04.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG:numba.core.byteflow:stack ['$6call_function.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'func': '$2load_global.0', 'args': ['$tmp04.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'tmp0']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6CC8C220>
DEBUG:numba.core.ssa:on stmt: tmp0 = arg(0, name=tmp0)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG:numba.core.ssa:on stmt: $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG:numba.core.ssa:on stmt: return $8return_value.3
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x0000029B6CC8E490>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x0000029B6CC8EE50>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000029B6CC8EDF0>],
             'tmp0': [<numba.core.ir.Assign object at 0x0000029B6C687DF0>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=3664)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
DEBUG:numba.core.byteflow:stack ['$arrtype2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
DEBUG:numba.core.byteflow:stack ['$4load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$size6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$size6.2', '$align8.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
DEBUG:numba.core.byteflow:stack ['$10call_method.4']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D622490>
DEBUG:numba.core.ssa:on stmt: arrtype = arg(0, name=arrtype)
DEBUG:numba.core.ssa:on stmt: size = arg(1, name=size)
DEBUG:numba.core.ssa:on stmt: align = arg(2, name=align)
DEBUG:numba.core.ssa:on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
DEBUG:numba.core.ssa:on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $12return_value.5 = cast(value=$10call_method.4)
DEBUG:numba.core.ssa:on stmt: return $12return_value.5
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x0000029B6CE3C5E0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x0000029B6CE3C6D0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x0000029B6CE3C190>],
             'align': [<numba.core.ir.Assign object at 0x0000029B6CE3DEB0>],
             'arrtype': [<numba.core.ir.Assign object at 0x0000029B6CE3D070>],
             'size': [<numba.core.ir.Assign object at 0x0000029B6CE3D040>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=3657)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$allocsize4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
DEBUG:numba.core.byteflow:stack ['$8call_function.3']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6CE3D2E0>
DEBUG:numba.core.ssa:on stmt: cls = arg(0, name=cls)
DEBUG:numba.core.ssa:on stmt: allocsize = arg(1, name=allocsize)
DEBUG:numba.core.ssa:on stmt: align = arg(2, name=align)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
DEBUG:numba.core.ssa:on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG:numba.core.ssa:on stmt: return $10return_value.4
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x0000029B6D6350A0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000029B6D624B20>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x0000029B6D624F40>],
             'align': [<numba.core.ir.Assign object at 0x0000029B6D6249A0>],
             'allocsize': [<numba.core.ir.Assign object at 0x0000029B6D624280>],
             'cls': [<numba.core.ir.Assign object at 0x0000029B6D6243A0>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=468)
           2	LOAD_FAST(arg=0, lineno=468)
           4	LOAD_CONST(arg=0, lineno=468)
           6	IS_OP(arg=0, lineno=468)
           8	STORE_FAST(arg=2, lineno=468)
          10	LOAD_FAST(arg=1, lineno=469)
          12	LOAD_CONST(arg=0, lineno=469)
          14	IS_OP(arg=0, lineno=469)
          16	STORE_FAST(arg=3, lineno=469)
          18	LOAD_FAST(arg=2, lineno=470)
          20	POP_JUMP_IF_TRUE(arg=26, lineno=470)
          22	LOAD_FAST(arg=3, lineno=470)
          24	POP_JUMP_IF_FALSE(arg=42, lineno=470)
>         26	LOAD_FAST(arg=2, lineno=471)
          28	POP_JUMP_IF_FALSE(arg=38, lineno=471)
          30	LOAD_FAST(arg=3, lineno=471)
          32	POP_JUMP_IF_FALSE(arg=38, lineno=471)
          34	LOAD_CONST(arg=1, lineno=472)
          36	RETURN_VALUE(arg=None, lineno=472)
>         38	LOAD_CONST(arg=2, lineno=474)
          40	RETURN_VALUE(arg=None, lineno=474)
>         42	LOAD_GLOBAL(arg=0, lineno=476)
          44	LOAD_FAST(arg=0, lineno=476)
          46	CALL_FUNCTION(arg=1, lineno=476)
          48	STORE_FAST(arg=0, lineno=476)
          50	LOAD_GLOBAL(arg=0, lineno=477)
          52	LOAD_FAST(arg=1, lineno=477)
          54	CALL_FUNCTION(arg=1, lineno=477)
          56	STORE_FAST(arg=1, lineno=477)
          58	LOAD_GLOBAL(arg=1, lineno=478)
          60	LOAD_FAST(arg=0, lineno=478)
          62	CALL_FUNCTION(arg=1, lineno=478)
          64	LOAD_GLOBAL(arg=1, lineno=478)
          66	LOAD_FAST(arg=1, lineno=478)
          68	CALL_FUNCTION(arg=1, lineno=478)
          70	COMPARE_OP(arg=3, lineno=478)
          72	POP_JUMP_IF_FALSE(arg=78, lineno=478)
          74	LOAD_CONST(arg=2, lineno=479)
          76	RETURN_VALUE(arg=None, lineno=479)
>         78	LOAD_GLOBAL(arg=2, lineno=480)
          80	LOAD_FAST(arg=0, lineno=480)
          82	LOAD_CONST(arg=3, lineno=480)
          84	LOAD_FAST(arg=1, lineno=480)
          86	LOAD_CONST(arg=3, lineno=480)
          88	LOAD_GLOBAL(arg=1, lineno=480)
          90	LOAD_FAST(arg=0, lineno=480)
          92	CALL_FUNCTION(arg=1, lineno=480)
          94	CALL_FUNCTION(arg=5, lineno=480)
          96	LOAD_CONST(arg=3, lineno=480)
          98	COMPARE_OP(arg=2, lineno=480)
         100	RETURN_VALUE(arg=None, lineno=480)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=468)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=468)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_CONST(arg=0, lineno=468)
DEBUG:numba.core.byteflow:stack ['$a2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=IS_OP(arg=0, lineno=468)
DEBUG:numba.core.byteflow:stack ['$a2.0', '$const4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=STORE_FAST(arg=2, lineno=468)
DEBUG:numba.core.byteflow:stack ['$6is_op.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=469)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_CONST(arg=0, lineno=469)
DEBUG:numba.core.byteflow:stack ['$b10.3']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=IS_OP(arg=0, lineno=469)
DEBUG:numba.core.byteflow:stack ['$b10.3', '$const12.4']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=3, lineno=469)
DEBUG:numba.core.byteflow:stack ['$14is_op.5']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=470)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=20, inst=POP_JUMP_IF_TRUE(arg=26, lineno=470)
DEBUG:numba.core.byteflow:stack ['$a_none18.6']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=22, stack=(), blockstack=(), npush=0), Edge(pc=26, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=22 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_FAST(arg=3, lineno=470)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=42, lineno=470)
DEBUG:numba.core.byteflow:stack ['$b_none22.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=471)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=38, lineno=471)
DEBUG:numba.core.byteflow:stack ['$a_none26.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=42 nstack_initial=0), State(pc_initial=30 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=30 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_GLOBAL(arg=0, lineno=476)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_FAST(arg=0, lineno=476)
DEBUG:numba.core.byteflow:stack ['$42load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=CALL_FUNCTION(arg=1, lineno=476)
DEBUG:numba.core.byteflow:stack ['$42load_global.0', '$a44.1']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=STORE_FAST(arg=0, lineno=476)
DEBUG:numba.core.byteflow:stack ['$46call_function.2']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_GLOBAL(arg=0, lineno=477)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_FAST(arg=1, lineno=477)
DEBUG:numba.core.byteflow:stack ['$50load_global.3']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=477)
DEBUG:numba.core.byteflow:stack ['$50load_global.3', '$b52.4']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=STORE_FAST(arg=1, lineno=477)
DEBUG:numba.core.byteflow:stack ['$54call_function.5']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_GLOBAL(arg=1, lineno=478)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_FAST(arg=0, lineno=478)
DEBUG:numba.core.byteflow:stack ['$58load_global.6']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=CALL_FUNCTION(arg=1, lineno=478)
DEBUG:numba.core.byteflow:stack ['$58load_global.6', '$a60.7']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_GLOBAL(arg=1, lineno=478)
DEBUG:numba.core.byteflow:stack ['$62call_function.8']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=478)
DEBUG:numba.core.byteflow:stack ['$62call_function.8', '$64load_global.9']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=CALL_FUNCTION(arg=1, lineno=478)
DEBUG:numba.core.byteflow:stack ['$62call_function.8', '$64load_global.9', '$b66.10']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=COMPARE_OP(arg=3, lineno=478)
DEBUG:numba.core.byteflow:stack ['$62call_function.8', '$68call_function.11']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=78, lineno=478)
DEBUG:numba.core.byteflow:stack ['$70compare_op.12']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=78, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=38 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_FAST(arg=3, lineno=471)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=38, lineno=471)
DEBUG:numba.core.byteflow:stack ['$b_none30.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=38 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=34 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=474)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=474)
DEBUG:numba.core.byteflow:stack ['$const38.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=34 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_CONST(arg=2, lineno=479)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=76, inst=RETURN_VALUE(arg=None, lineno=479)
DEBUG:numba.core.byteflow:stack ['$const74.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=34 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=78, inst=LOAD_GLOBAL(arg=2, lineno=480)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=480)
DEBUG:numba.core.byteflow:stack ['$78load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=LOAD_CONST(arg=3, lineno=480)
DEBUG:numba.core.byteflow:stack ['$78load_global.0', '$a80.1']
DEBUG:numba.core.byteflow:dispatch pc=84, inst=LOAD_FAST(arg=1, lineno=480)
DEBUG:numba.core.byteflow:stack ['$78load_global.0', '$a80.1', '$const82.2']
DEBUG:numba.core.byteflow:dispatch pc=86, inst=LOAD_CONST(arg=3, lineno=480)
DEBUG:numba.core.byteflow:stack ['$78load_global.0', '$a80.1', '$const82.2', '$b84.3']
DEBUG:numba.core.byteflow:dispatch pc=88, inst=LOAD_GLOBAL(arg=1, lineno=480)
DEBUG:numba.core.byteflow:stack ['$78load_global.0', '$a80.1', '$const82.2', '$b84.3', '$const86.4']
DEBUG:numba.core.byteflow:dispatch pc=90, inst=LOAD_FAST(arg=0, lineno=480)
DEBUG:numba.core.byteflow:stack ['$78load_global.0', '$a80.1', '$const82.2', '$b84.3', '$const86.4', '$88load_global.5']
DEBUG:numba.core.byteflow:dispatch pc=92, inst=CALL_FUNCTION(arg=1, lineno=480)
DEBUG:numba.core.byteflow:stack ['$78load_global.0', '$a80.1', '$const82.2', '$b84.3', '$const86.4', '$88load_global.5', '$a90.6']
DEBUG:numba.core.byteflow:dispatch pc=94, inst=CALL_FUNCTION(arg=5, lineno=480)
DEBUG:numba.core.byteflow:stack ['$78load_global.0', '$a80.1', '$const82.2', '$b84.3', '$const86.4', '$92call_function.7']
DEBUG:numba.core.byteflow:dispatch pc=96, inst=LOAD_CONST(arg=3, lineno=480)
DEBUG:numba.core.byteflow:stack ['$94call_function.8']
DEBUG:numba.core.byteflow:dispatch pc=98, inst=COMPARE_OP(arg=2, lineno=480)
DEBUG:numba.core.byteflow:stack ['$94call_function.8', '$const96.9']
DEBUG:numba.core.byteflow:dispatch pc=100, inst=RETURN_VALUE(arg=None, lineno=480)
DEBUG:numba.core.byteflow:stack ['$98compare_op.10']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=472)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=472)
DEBUG:numba.core.byteflow:stack ['$const34.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=38 nstack_initial=0)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$a2.0', 'rhs': '$const4.1', 'res': '$6is_op.2'}), (8, {'value': '$6is_op.2'}), (10, {'res': '$b10.3'}), (12, {'res': '$const12.4'}), (14, {'lhs': '$b10.3', 'rhs': '$const12.4', 'res': '$14is_op.5'}), (16, {'value': '$14is_op.5'}), (18, {'res': '$a_none18.6'}), (20, {'pred': '$a_none18.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: (), 26: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$b_none22.0'}), (24, {'pred': '$b_none22.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 42: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$a_none26.0'}), (28, {'pred': '$a_none26.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 38: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$b_none30.0'}), (32, {'pred': '$b_none30.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 38: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$const34.0'}), (36, {'retval': '$const34.0', 'castval': '$36return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {'res': '$const38.0'}), (40, {'retval': '$const38.0', 'castval': '$40return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$42load_global.0'}), (44, {'res': '$a44.1'}), (46, {'func': '$42load_global.0', 'args': ['$a44.1'], 'res': '$46call_function.2'}), (48, {'value': '$46call_function.2'}), (50, {'res': '$50load_global.3'}), (52, {'res': '$b52.4'}), (54, {'func': '$50load_global.3', 'args': ['$b52.4'], 'res': '$54call_function.5'}), (56, {'value': '$54call_function.5'}), (58, {'res': '$58load_global.6'}), (60, {'res': '$a60.7'}), (62, {'func': '$58load_global.6', 'args': ['$a60.7'], 'res': '$62call_function.8'}), (64, {'res': '$64load_global.9'}), (66, {'res': '$b66.10'}), (68, {'func': '$64load_global.9', 'args': ['$b66.10'], 'res': '$68call_function.11'}), (70, {'lhs': '$62call_function.8', 'rhs': '$68call_function.11', 'res': '$70compare_op.12'}), (72, {'pred': '$70compare_op.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 78: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'retval': '$const74.0', 'castval': '$76return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$a80.1'}), (82, {'res': '$const82.2'}), (84, {'res': '$b84.3'}), (86, {'res': '$const86.4'}), (88, {'res': '$88load_global.5'}), (90, {'res': '$a90.6'}), (92, {'func': '$88load_global.5', 'args': ['$a90.6'], 'res': '$92call_function.7'}), (94, {'func': '$78load_global.0', 'args': ['$a80.1', '$const82.2', '$b84.3', '$const86.4', '$92call_function.7'], 'res': '$94call_function.8'}), (96, {'res': '$const96.9'}), (98, {'lhs': '$94call_function.8', 'rhs': '$const96.9', 'res': '$98compare_op.10'}), (100, {'retval': '$98compare_op.10', 'castval': '$100return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $const4.1 = const(NoneType, None)        ['$const4.1']
    a_none = a is $const4.1                  ['$const4.1', 'a', 'a_none']
    $const12.4 = const(NoneType, None)       ['$const12.4']
    b_none = b is $const12.4                 ['$const12.4', 'b', 'b_none']
    bool20 = global(bool: <class 'bool'>)    ['bool20']
    $20pred = call bool20(a_none, func=bool20, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None) ['$20pred', 'a_none', 'bool20']
    branch $20pred, 26, 22                   ['$20pred']
label 22:
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24(b_none, func=bool24, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None) ['$24pred', 'b_none', 'bool24']
    branch $24pred, 26, 42                   ['$24pred']
label 26:
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28(a_none, func=bool28, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None) ['$28pred', 'a_none', 'bool28']
    branch $28pred, 30, 38                   ['$28pred']
label 30:
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32(b_none, func=bool32, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None) ['$32pred', 'b_none', 'bool32']
    branch $32pred, 34, 38                   ['$32pred']
label 34:
    $const34.0 = const(bool, True)           ['$const34.0']
    $36return_value.1 = cast(value=$const34.0) ['$36return_value.1', '$const34.0']
    return $36return_value.1                 ['$36return_value.1']
label 38:
    $const38.0 = const(bool, False)          ['$const38.0']
    $40return_value.1 = cast(value=$const38.0) ['$40return_value.1', '$const38.0']
    return $40return_value.1                 ['$40return_value.1']
label 42:
    $42load_global.0 = global(str: <class 'str'>) ['$42load_global.0']
    a = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None) ['$42load_global.0', 'a', 'a']
    $50load_global.3 = global(str: <class 'str'>) ['$50load_global.3']
    b = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None) ['$50load_global.3', 'b', 'b']
    $58load_global.6 = global(len: <built-in function len>) ['$58load_global.6']
    $62call_function.8 = call $58load_global.6(a, func=$58load_global.6, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None) ['$58load_global.6', '$62call_function.8', 'a']
    $64load_global.9 = global(len: <built-in function len>) ['$64load_global.9']
    $68call_function.11 = call $64load_global.9(b, func=$64load_global.9, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None) ['$64load_global.9', '$68call_function.11', 'b']
    $70compare_op.12 = $62call_function.8 != $68call_function.11 ['$62call_function.8', '$68call_function.11', '$70compare_op.12']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.12, func=bool72, args=(Var($70compare_op.12, unicode.py:478),), kws=(), vararg=None, target=None) ['$70compare_op.12', '$72pred', 'bool72']
    branch $72pred, 74, 78                   ['$72pred']
label 74:
    $const74.0 = const(bool, False)          ['$const74.0']
    $76return_value.1 = cast(value=$const74.0) ['$76return_value.1', '$const74.0']
    return $76return_value.1                 ['$76return_value.1']
label 78:
    $78load_global.0 = global(_cmp_region: <function _cmp_region at 0x0000029B6B47C430>) ['$78load_global.0']
    $const82.2 = const(int, 0)               ['$const82.2']
    $const86.4 = const(int, 0)               ['$const86.4']
    $88load_global.5 = global(len: <built-in function len>) ['$88load_global.5']
    $92call_function.7 = call $88load_global.5(a, func=$88load_global.5, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None) ['$88load_global.5', '$92call_function.7', 'a']
    $94call_function.8 = call $78load_global.0(a, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a, unicode.py:468), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None) ['$78load_global.0', '$92call_function.7', '$94call_function.8', '$const82.2', '$const86.4', 'a', 'b']
    $const96.9 = const(int, 0)               ['$const96.9']
    $98compare_op.10 = $94call_function.8 == $const96.9 ['$94call_function.8', '$98compare_op.10', '$const96.9']
    $100return_value.11 = cast(value=$98compare_op.10) ['$100return_value.11', '$98compare_op.10']
    return $100return_value.11               ['$100return_value.11']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C9C3B80>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: a_none = a is $const4.1
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: b_none = b is $const12.4
DEBUG:numba.core.ssa:on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $20pred = call bool20(a_none, func=bool20, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $20pred, 26, 22
DEBUG:numba.core.ssa:==== SSA block analysis pass on 22
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C9C3B80>
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24(b_none, func=bool24, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 42
DEBUG:numba.core.ssa:==== SSA block analysis pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C9C3B80>
DEBUG:numba.core.ssa:on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $28pred = call bool28(a_none, func=bool28, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $28pred, 30, 38
DEBUG:numba.core.ssa:==== SSA block analysis pass on 30
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C9C3B80>
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32(b_none, func=bool32, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 38
DEBUG:numba.core.ssa:==== SSA block analysis pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C9C3B80>
DEBUG:numba.core.ssa:on stmt: $const34.0 = const(bool, True)
DEBUG:numba.core.ssa:on stmt: $36return_value.1 = cast(value=$const34.0)
DEBUG:numba.core.ssa:on stmt: return $36return_value.1
DEBUG:numba.core.ssa:==== SSA block analysis pass on 38
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C9C3B80>
DEBUG:numba.core.ssa:on stmt: $const38.0 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: $40return_value.1 = cast(value=$const38.0)
DEBUG:numba.core.ssa:on stmt: return $40return_value.1
DEBUG:numba.core.ssa:==== SSA block analysis pass on 42
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C9C3B80>
DEBUG:numba.core.ssa:on stmt: $42load_global.0 = global(str: <class 'str'>)
DEBUG:numba.core.ssa:on stmt: a = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $50load_global.3 = global(str: <class 'str'>)
DEBUG:numba.core.ssa:on stmt: b = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $58load_global.6 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $62call_function.8 = call $58load_global.6(a, func=$58load_global.6, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $64load_global.9 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $68call_function.11 = call $64load_global.9(b, func=$64load_global.9, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $70compare_op.12 = $62call_function.8 != $68call_function.11
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.12, func=bool72, args=(Var($70compare_op.12, unicode.py:478),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 78
DEBUG:numba.core.ssa:==== SSA block analysis pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C9C3B80>
DEBUG:numba.core.ssa:on stmt: $const74.0 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: $76return_value.1 = cast(value=$const74.0)
DEBUG:numba.core.ssa:on stmt: return $76return_value.1
DEBUG:numba.core.ssa:==== SSA block analysis pass on 78
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C9C3B80>
DEBUG:numba.core.ssa:on stmt: $78load_global.0 = global(_cmp_region: <function _cmp_region at 0x0000029B6B47C430>)
DEBUG:numba.core.ssa:on stmt: $const82.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const86.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $88load_global.5 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $92call_function.7 = call $88load_global.5(a, func=$88load_global.5, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $94call_function.8 = call $78load_global.0(a, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a, unicode.py:468), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const96.9 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $98compare_op.10 = $94call_function.8 == $const96.9
DEBUG:numba.core.ssa:on stmt: $100return_value.11 = cast(value=$98compare_op.10)
DEBUG:numba.core.ssa:on stmt: return $100return_value.11
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$100return_value.11': [<numba.core.ir.Assign object at 0x0000029B6CE31AF0>],
             '$20pred': [<numba.core.ir.Assign object at 0x0000029B6D675160>],
             '$24pred': [<numba.core.ir.Assign object at 0x0000029B6D675400>],
             '$28pred': [<numba.core.ir.Assign object at 0x0000029B6D622A30>],
             '$32pred': [<numba.core.ir.Assign object at 0x0000029B6D6225E0>],
             '$36return_value.1': [<numba.core.ir.Assign object at 0x0000029B6D64E4F0>],
             '$40return_value.1': [<numba.core.ir.Assign object at 0x0000029B6D6356A0>],
             '$42load_global.0': [<numba.core.ir.Assign object at 0x0000029B6CC8CF40>],
             '$50load_global.3': [<numba.core.ir.Assign object at 0x0000029B6D64EB50>],
             '$58load_global.6': [<numba.core.ir.Assign object at 0x0000029B6D64EC70>],
             '$62call_function.8': [<numba.core.ir.Assign object at 0x0000029B6D64E070>],
             '$64load_global.9': [<numba.core.ir.Assign object at 0x0000029B6D64E2E0>],
             '$68call_function.11': [<numba.core.ir.Assign object at 0x0000029B6CE3DA30>],
             '$70compare_op.12': [<numba.core.ir.Assign object at 0x0000029B6CE3DCA0>],
             '$72pred': [<numba.core.ir.Assign object at 0x0000029B6CE3D1C0>],
             '$76return_value.1': [<numba.core.ir.Assign object at 0x0000029B6CE3D610>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x0000029B6CE3D0D0>],
             '$88load_global.5': [<numba.core.ir.Assign object at 0x0000029B6CE39520>],
             '$92call_function.7': [<numba.core.ir.Assign object at 0x0000029B6CE391C0>],
             '$94call_function.8': [<numba.core.ir.Assign object at 0x0000029B6CE39070>],
             '$98compare_op.10': [<numba.core.ir.Assign object at 0x0000029B6CE31BE0>],
             '$const12.4': [<numba.core.ir.Assign object at 0x0000029B6D675FD0>],
             '$const34.0': [<numba.core.ir.Assign object at 0x0000029B6D622610>],
             '$const38.0': [<numba.core.ir.Assign object at 0x0000029B6D63A6D0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000029B6D63AE20>],
             '$const74.0': [<numba.core.ir.Assign object at 0x0000029B6D64E6D0>],
             '$const82.2': [<numba.core.ir.Assign object at 0x0000029B6CE397F0>],
             '$const86.4': [<numba.core.ir.Assign object at 0x0000029B6CE39AC0>],
             '$const96.9': [<numba.core.ir.Assign object at 0x0000029B6CE31DC0>],
             'a': [<numba.core.ir.Assign object at 0x0000029B6D63AE80>,
                   <numba.core.ir.Assign object at 0x0000029B6BA91580>],
             'a_none': [<numba.core.ir.Assign object at 0x0000029B6D63A8E0>],
             'b': [<numba.core.ir.Assign object at 0x0000029B6D63ACD0>,
                   <numba.core.ir.Assign object at 0x0000029B6D64E400>],
             'b_none': [<numba.core.ir.Assign object at 0x0000029B6D675C10>],
             'bool20': [<numba.core.ir.Assign object at 0x0000029B6D675580>],
             'bool24': [<numba.core.ir.Assign object at 0x0000029B6D675970>],
             'bool28': [<numba.core.ir.Assign object at 0x0000029B6D622D00>],
             'bool32': [<numba.core.ir.Assign object at 0x0000029B6D622640>],
             'bool72': [<numba.core.ir.Assign object at 0x0000029B6CE3DE50>]})
DEBUG:numba.core.ssa:SSA violators {'a', 'b'}
DEBUG:numba.core.ssa:Fix SSA violator on var a
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CBEFC70>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:first assign: a
DEBUG:numba.core.ssa:replaced with: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: a_none = a is $const4.1
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: b_none = b is $const12.4
DEBUG:numba.core.ssa:on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $20pred = call bool20(a_none, func=bool20, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $20pred, 26, 22
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 22
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CBEFC70>
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24(b_none, func=bool24, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 42
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CBEFC70>
DEBUG:numba.core.ssa:on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $28pred = call bool28(a_none, func=bool28, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $28pred, 30, 38
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 30
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CBEFC70>
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32(b_none, func=bool32, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 38
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CBEFC70>
DEBUG:numba.core.ssa:on stmt: $const34.0 = const(bool, True)
DEBUG:numba.core.ssa:on stmt: $36return_value.1 = cast(value=$const34.0)
DEBUG:numba.core.ssa:on stmt: return $36return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 38
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CBEFC70>
DEBUG:numba.core.ssa:on stmt: $const38.0 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: $40return_value.1 = cast(value=$const38.0)
DEBUG:numba.core.ssa:on stmt: return $40return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 42
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CBEFC70>
DEBUG:numba.core.ssa:on stmt: $42load_global.0 = global(str: <class 'str'>)
DEBUG:numba.core.ssa:on stmt: a = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:replaced with: a.1 = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $50load_global.3 = global(str: <class 'str'>)
DEBUG:numba.core.ssa:on stmt: b = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $58load_global.6 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $62call_function.8 = call $58load_global.6(a, func=$58load_global.6, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $64load_global.9 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $68call_function.11 = call $64load_global.9(b, func=$64load_global.9, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $70compare_op.12 = $62call_function.8 != $68call_function.11
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.12, func=bool72, args=(Var($70compare_op.12, unicode.py:478),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 78
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CBEFC70>
DEBUG:numba.core.ssa:on stmt: $const74.0 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: $76return_value.1 = cast(value=$const74.0)
DEBUG:numba.core.ssa:on stmt: return $76return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 78
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CBEFC70>
DEBUG:numba.core.ssa:on stmt: $78load_global.0 = global(_cmp_region: <function _cmp_region at 0x0000029B6B47C430>)
DEBUG:numba.core.ssa:on stmt: $const82.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const86.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $88load_global.5 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $92call_function.7 = call $88load_global.5(a, func=$88load_global.5, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $94call_function.8 = call $78load_global.0(a, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a, unicode.py:468), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const96.9 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $98compare_op.10 = $94call_function.8 == $const96.9
DEBUG:numba.core.ssa:on stmt: $100return_value.11 = cast(value=$98compare_op.10)
DEBUG:numba.core.ssa:on stmt: return $100return_value.11
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000029B6CC8A280>],
             42: [<numba.core.ir.Assign object at 0x0000029B6CE31DF0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CBEFC70>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: a_none = a is $const4.1
DEBUG:numba.core.ssa:find_def var='a' stmt=a_none = a is $const4.1
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: b_none = b is $const12.4
DEBUG:numba.core.ssa:on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $20pred = call bool20(a_none, func=bool20, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $20pred, 26, 22
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 22
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CBEFC70>
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24(b_none, func=bool24, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 42
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CBEFC70>
DEBUG:numba.core.ssa:on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $28pred = call bool28(a_none, func=bool28, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $28pred, 30, 38
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 30
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CBEFC70>
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32(b_none, func=bool32, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 38
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CBEFC70>
DEBUG:numba.core.ssa:on stmt: $const34.0 = const(bool, True)
DEBUG:numba.core.ssa:on stmt: $36return_value.1 = cast(value=$const34.0)
DEBUG:numba.core.ssa:on stmt: return $36return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 38
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CBEFC70>
DEBUG:numba.core.ssa:on stmt: $const38.0 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: $40return_value.1 = cast(value=$const38.0)
DEBUG:numba.core.ssa:on stmt: return $40return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 42
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CBEFC70>
DEBUG:numba.core.ssa:on stmt: $42load_global.0 = global(str: <class 'str'>)
DEBUG:numba.core.ssa:on stmt: a.1 = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def var='a' stmt=a.1 = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def_from_top label 42
DEBUG:numba.core.ssa:idom 22 from label 42
DEBUG:numba.core.ssa:find_def_from_bottom label 22
DEBUG:numba.core.ssa:find_def_from_top label 22
DEBUG:numba.core.ssa:idom 0 from label 22
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:on stmt: $50load_global.3 = global(str: <class 'str'>)
DEBUG:numba.core.ssa:on stmt: b = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $58load_global.6 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $62call_function.8 = call $58load_global.6(a, func=$58load_global.6, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def var='a' stmt=$62call_function.8 = call $58load_global.6(a, func=$58load_global.6, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:replaced with: $62call_function.8 = call $58load_global.6(a.1, func=$58load_global.6, args=[Var(a.1, unicode.py:476)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $64load_global.9 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $68call_function.11 = call $64load_global.9(b, func=$64load_global.9, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $70compare_op.12 = $62call_function.8 != $68call_function.11
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.12, func=bool72, args=(Var($70compare_op.12, unicode.py:478),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 78
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CBEFC70>
DEBUG:numba.core.ssa:on stmt: $const74.0 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: $76return_value.1 = cast(value=$const74.0)
DEBUG:numba.core.ssa:on stmt: return $76return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 78
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CBEFC70>
DEBUG:numba.core.ssa:on stmt: $78load_global.0 = global(_cmp_region: <function _cmp_region at 0x0000029B6B47C430>)
DEBUG:numba.core.ssa:on stmt: $const82.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const86.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $88load_global.5 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $92call_function.7 = call $88load_global.5(a, func=$88load_global.5, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def var='a' stmt=$92call_function.7 = call $88load_global.5(a, func=$88load_global.5, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def_from_top label 78
DEBUG:numba.core.ssa:idom 42 from label 78
DEBUG:numba.core.ssa:find_def_from_bottom label 42
DEBUG:numba.core.ssa:replaced with: $92call_function.7 = call $88load_global.5(a.1, func=$88load_global.5, args=[Var(a.1, unicode.py:476)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $94call_function.8 = call $78load_global.0(a, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a, unicode.py:468), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def var='a' stmt=$94call_function.8 = call $78load_global.0(a, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a, unicode.py:468), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def_from_top label 78
DEBUG:numba.core.ssa:idom 42 from label 78
DEBUG:numba.core.ssa:find_def_from_bottom label 42
DEBUG:numba.core.ssa:replaced with: $94call_function.8 = call $78load_global.0(a.1, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a.1, unicode.py:476), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const96.9 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $98compare_op.10 = $94call_function.8 == $const96.9
DEBUG:numba.core.ssa:on stmt: $100return_value.11 = cast(value=$98compare_op.10)
DEBUG:numba.core.ssa:on stmt: return $100return_value.11
DEBUG:numba.core.ssa:Fix SSA violator on var b
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CE393A0>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:first assign: b
DEBUG:numba.core.ssa:replaced with: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: a_none = a is $const4.1
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: b_none = b is $const12.4
DEBUG:numba.core.ssa:on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $20pred = call bool20(a_none, func=bool20, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $20pred, 26, 22
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 22
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CE393A0>
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24(b_none, func=bool24, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 42
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CE393A0>
DEBUG:numba.core.ssa:on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $28pred = call bool28(a_none, func=bool28, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $28pred, 30, 38
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 30
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CE393A0>
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32(b_none, func=bool32, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 38
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CE393A0>
DEBUG:numba.core.ssa:on stmt: $const34.0 = const(bool, True)
DEBUG:numba.core.ssa:on stmt: $36return_value.1 = cast(value=$const34.0)
DEBUG:numba.core.ssa:on stmt: return $36return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 38
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CE393A0>
DEBUG:numba.core.ssa:on stmt: $const38.0 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: $40return_value.1 = cast(value=$const38.0)
DEBUG:numba.core.ssa:on stmt: return $40return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 42
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CE393A0>
DEBUG:numba.core.ssa:on stmt: $42load_global.0 = global(str: <class 'str'>)
DEBUG:numba.core.ssa:on stmt: a.1 = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $50load_global.3 = global(str: <class 'str'>)
DEBUG:numba.core.ssa:on stmt: b = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:replaced with: b.1 = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $58load_global.6 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $62call_function.8 = call $58load_global.6(a.1, func=$58load_global.6, args=[Var(a.1, unicode.py:476)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $64load_global.9 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $68call_function.11 = call $64load_global.9(b, func=$64load_global.9, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $70compare_op.12 = $62call_function.8 != $68call_function.11
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.12, func=bool72, args=(Var($70compare_op.12, unicode.py:478),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 78
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CE393A0>
DEBUG:numba.core.ssa:on stmt: $const74.0 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: $76return_value.1 = cast(value=$const74.0)
DEBUG:numba.core.ssa:on stmt: return $76return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 78
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6CE393A0>
DEBUG:numba.core.ssa:on stmt: $78load_global.0 = global(_cmp_region: <function _cmp_region at 0x0000029B6B47C430>)
DEBUG:numba.core.ssa:on stmt: $const82.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const86.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $88load_global.5 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $92call_function.7 = call $88load_global.5(a.1, func=$88load_global.5, args=[Var(a.1, unicode.py:476)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $94call_function.8 = call $78load_global.0(a.1, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a.1, unicode.py:476), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const96.9 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $98compare_op.10 = $94call_function.8 == $const96.9
DEBUG:numba.core.ssa:on stmt: $100return_value.11 = cast(value=$98compare_op.10)
DEBUG:numba.core.ssa:on stmt: return $100return_value.11
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000029B6CC8AEB0>],
             42: [<numba.core.ir.Assign object at 0x0000029B6CE313A0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CE393A0>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: a_none = a is $const4.1
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: b_none = b is $const12.4
DEBUG:numba.core.ssa:find_def var='b' stmt=b_none = b is $const12.4
DEBUG:numba.core.ssa:on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $20pred = call bool20(a_none, func=bool20, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $20pred, 26, 22
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 22
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CE393A0>
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24(b_none, func=bool24, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 42
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CE393A0>
DEBUG:numba.core.ssa:on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $28pred = call bool28(a_none, func=bool28, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $28pred, 30, 38
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 30
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CE393A0>
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32(b_none, func=bool32, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 38
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CE393A0>
DEBUG:numba.core.ssa:on stmt: $const34.0 = const(bool, True)
DEBUG:numba.core.ssa:on stmt: $36return_value.1 = cast(value=$const34.0)
DEBUG:numba.core.ssa:on stmt: return $36return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 38
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CE393A0>
DEBUG:numba.core.ssa:on stmt: $const38.0 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: $40return_value.1 = cast(value=$const38.0)
DEBUG:numba.core.ssa:on stmt: return $40return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 42
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CE393A0>
DEBUG:numba.core.ssa:on stmt: $42load_global.0 = global(str: <class 'str'>)
DEBUG:numba.core.ssa:on stmt: a.1 = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $50load_global.3 = global(str: <class 'str'>)
DEBUG:numba.core.ssa:on stmt: b.1 = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def var='b' stmt=b.1 = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def_from_top label 42
DEBUG:numba.core.ssa:idom 22 from label 42
DEBUG:numba.core.ssa:find_def_from_bottom label 22
DEBUG:numba.core.ssa:find_def_from_top label 22
DEBUG:numba.core.ssa:idom 0 from label 22
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:on stmt: $58load_global.6 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $62call_function.8 = call $58load_global.6(a.1, func=$58load_global.6, args=[Var(a.1, unicode.py:476)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $64load_global.9 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $68call_function.11 = call $64load_global.9(b, func=$64load_global.9, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def var='b' stmt=$68call_function.11 = call $64load_global.9(b, func=$64load_global.9, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:replaced with: $68call_function.11 = call $64load_global.9(b.1, func=$64load_global.9, args=[Var(b.1, unicode.py:477)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $70compare_op.12 = $62call_function.8 != $68call_function.11
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.12, func=bool72, args=(Var($70compare_op.12, unicode.py:478),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 78
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CE393A0>
DEBUG:numba.core.ssa:on stmt: $const74.0 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: $76return_value.1 = cast(value=$const74.0)
DEBUG:numba.core.ssa:on stmt: return $76return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 78
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6CE393A0>
DEBUG:numba.core.ssa:on stmt: $78load_global.0 = global(_cmp_region: <function _cmp_region at 0x0000029B6B47C430>)
DEBUG:numba.core.ssa:on stmt: $const82.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const86.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $88load_global.5 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $92call_function.7 = call $88load_global.5(a.1, func=$88load_global.5, args=[Var(a.1, unicode.py:476)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $94call_function.8 = call $78load_global.0(a.1, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a.1, unicode.py:476), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def var='b' stmt=$94call_function.8 = call $78load_global.0(a.1, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a.1, unicode.py:476), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def_from_top label 78
DEBUG:numba.core.ssa:idom 42 from label 78
DEBUG:numba.core.ssa:find_def_from_bottom label 42
DEBUG:numba.core.ssa:replaced with: $94call_function.8 = call $78load_global.0(a.1, $const82.2, b.1, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a.1, unicode.py:476), Var($const82.2, unicode.py:480), Var(b.1, unicode.py:477), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const96.9 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $98compare_op.10 = $94call_function.8 == $const96.9
DEBUG:numba.core.ssa:on stmt: $100return_value.11 = cast(value=$98compare_op.10)
DEBUG:numba.core.ssa:on stmt: return $100return_value.11
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=439)
           2	LOAD_FAST(arg=0, lineno=439)
           4	RETURN_VALUE(arg=None, lineno=439)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=439)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=439)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=439)
DEBUG:numba.core.byteflow:stack ['$s2.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$s2.0'}), (4, {'retval': '$s2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    s = arg(0, name=s)                       ['s']
    $4return_value.1 = cast(value=s)         ['$4return_value.1', 's']
    return $4return_value.1                  ['$4return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C7A0A90>
DEBUG:numba.core.ssa:on stmt: s = arg(0, name=s)
DEBUG:numba.core.ssa:on stmt: $4return_value.1 = cast(value=s)
DEBUG:numba.core.ssa:on stmt: return $4return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$4return_value.1': [<numba.core.ir.Assign object at 0x0000029B6C6726A0>],
             's': [<numba.core.ir.Assign object at 0x0000029B6C7A0550>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=446)
           2	LOAD_FAST(arg=0, lineno=446)
           4	LOAD_ATTR(arg=0, lineno=446)
           6	RETURN_VALUE(arg=None, lineno=446)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=446)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=446)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=446)
DEBUG:numba.core.byteflow:stack ['$s2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=RETURN_VALUE(arg=None, lineno=446)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$s2.0'}), (4, {'item': '$s2.0', 'res': '$4load_attr.1'}), (6, {'retval': '$4load_attr.1', 'castval': '$6return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    s = arg(0, name=s)                       ['s']
    $4load_attr.1 = getattr(value=s, attr=_length) ['$4load_attr.1', 's']
    $6return_value.2 = cast(value=$4load_attr.1) ['$4load_attr.1', '$6return_value.2']
    return $6return_value.2                  ['$6return_value.2']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6B8FD250>
DEBUG:numba.core.ssa:on stmt: s = arg(0, name=s)
DEBUG:numba.core.ssa:on stmt: $4load_attr.1 = getattr(value=s, attr=_length)
DEBUG:numba.core.ssa:on stmt: $6return_value.2 = cast(value=$4load_attr.1)
DEBUG:numba.core.ssa:on stmt: return $6return_value.2
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$4load_attr.1': [<numba.core.ir.Assign object at 0x0000029B69F1A2B0>],
             '$6return_value.2': [<numba.core.ir.Assign object at 0x0000029B6CE3C460>],
             's': [<numba.core.ir.Assign object at 0x0000029B6C06E7C0>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=389)
           2	LOAD_FAST(arg=4, lineno=389)
           4	LOAD_CONST(arg=1, lineno=389)
           6	COMPARE_OP(arg=2, lineno=389)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=389)
          10	LOAD_CONST(arg=1, lineno=390)
          12	RETURN_VALUE(arg=None, lineno=390)
>         14	LOAD_FAST(arg=1, lineno=391)
          16	LOAD_FAST(arg=4, lineno=391)
          18	BINARY_ADD(arg=None, lineno=391)
          20	LOAD_FAST(arg=0, lineno=391)
          22	LOAD_ATTR(arg=0, lineno=391)
          24	COMPARE_OP(arg=4, lineno=391)
          26	POP_JUMP_IF_FALSE(arg=32, lineno=391)
          28	LOAD_CONST(arg=2, lineno=392)
          30	RETURN_VALUE(arg=None, lineno=392)
>         32	LOAD_FAST(arg=3, lineno=393)
          34	LOAD_FAST(arg=4, lineno=393)
          36	BINARY_ADD(arg=None, lineno=393)
          38	LOAD_FAST(arg=2, lineno=393)
          40	LOAD_ATTR(arg=0, lineno=393)
          42	COMPARE_OP(arg=4, lineno=393)
          44	POP_JUMP_IF_FALSE(arg=50, lineno=393)
          46	LOAD_CONST(arg=3, lineno=394)
          48	RETURN_VALUE(arg=None, lineno=394)
>         50	LOAD_GLOBAL(arg=1, lineno=396)
          52	LOAD_FAST(arg=4, lineno=396)
          54	CALL_FUNCTION(arg=1, lineno=396)
          56	GET_ITER(arg=None, lineno=396)
>         58	FOR_ITER(arg=60, lineno=396)
          60	STORE_FAST(arg=5, lineno=396)
          62	LOAD_GLOBAL(arg=2, lineno=397)
          64	LOAD_FAST(arg=0, lineno=397)
          66	LOAD_FAST(arg=1, lineno=397)
          68	LOAD_FAST(arg=5, lineno=397)
          70	BINARY_ADD(arg=None, lineno=397)
          72	CALL_FUNCTION(arg=2, lineno=397)
          74	STORE_FAST(arg=6, lineno=397)
          76	LOAD_GLOBAL(arg=2, lineno=398)
          78	LOAD_FAST(arg=2, lineno=398)
          80	LOAD_FAST(arg=3, lineno=398)
          82	LOAD_FAST(arg=5, lineno=398)
          84	BINARY_ADD(arg=None, lineno=398)
          86	CALL_FUNCTION(arg=2, lineno=398)
          88	STORE_FAST(arg=7, lineno=398)
          90	LOAD_FAST(arg=6, lineno=399)
          92	LOAD_FAST(arg=7, lineno=399)
          94	COMPARE_OP(arg=0, lineno=399)
          96	POP_JUMP_IF_FALSE(arg=104, lineno=399)
          98	POP_TOP(arg=None, lineno=400)
         100	LOAD_CONST(arg=2, lineno=400)
         102	RETURN_VALUE(arg=None, lineno=400)
>        104	LOAD_FAST(arg=6, lineno=401)
         106	LOAD_FAST(arg=7, lineno=401)
         108	COMPARE_OP(arg=4, lineno=401)
         110	POP_JUMP_IF_FALSE(arg=58, lineno=401)
         112	POP_TOP(arg=None, lineno=402)
         114	LOAD_CONST(arg=3, lineno=402)
         116	RETURN_VALUE(arg=None, lineno=402)
         118	JUMP_ABSOLUTE(arg=58, lineno=402)
>        120	LOAD_CONST(arg=1, lineno=404)
         122	RETURN_VALUE(arg=None, lineno=404)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=389)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=4, lineno=389)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=389)
DEBUG:numba.core.byteflow:stack ['$n2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=389)
DEBUG:numba.core.byteflow:stack ['$n2.0', '$const4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=389)
DEBUG:numba.core.byteflow:stack ['$6compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=390)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=390)
DEBUG:numba.core.byteflow:stack ['$const10.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=391)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_FAST(arg=4, lineno=391)
DEBUG:numba.core.byteflow:stack ['$a_offset14.0']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=391)
DEBUG:numba.core.byteflow:stack ['$a_offset14.0', '$n16.1']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=391)
DEBUG:numba.core.byteflow:stack ['$18binary_add.2']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_ATTR(arg=0, lineno=391)
DEBUG:numba.core.byteflow:stack ['$18binary_add.2', '$a20.3']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=COMPARE_OP(arg=4, lineno=391)
DEBUG:numba.core.byteflow:stack ['$18binary_add.2', '$22load_attr.4']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=32, lineno=391)
DEBUG:numba.core.byteflow:stack ['$24compare_op.5']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=392)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=30, inst=RETURN_VALUE(arg=None, lineno=392)
DEBUG:numba.core.byteflow:stack ['$const28.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=32 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=393)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_FAST(arg=4, lineno=393)
DEBUG:numba.core.byteflow:stack ['$b_offset32.0']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=BINARY_ADD(arg=None, lineno=393)
DEBUG:numba.core.byteflow:stack ['$b_offset32.0', '$n34.1']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=393)
DEBUG:numba.core.byteflow:stack ['$36binary_add.2']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_ATTR(arg=0, lineno=393)
DEBUG:numba.core.byteflow:stack ['$36binary_add.2', '$b38.3']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=COMPARE_OP(arg=4, lineno=393)
DEBUG:numba.core.byteflow:stack ['$36binary_add.2', '$40load_attr.4']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=POP_JUMP_IF_FALSE(arg=50, lineno=393)
DEBUG:numba.core.byteflow:stack ['$42compare_op.5']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=46, stack=(), blockstack=(), npush=0), Edge(pc=50, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=46 nstack_initial=0), State(pc_initial=50 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LOAD_CONST(arg=3, lineno=394)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=48, inst=RETURN_VALUE(arg=None, lineno=394)
DEBUG:numba.core.byteflow:stack ['$const46.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=50 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_GLOBAL(arg=1, lineno=396)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_FAST(arg=4, lineno=396)
DEBUG:numba.core.byteflow:stack ['$50load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=396)
DEBUG:numba.core.byteflow:stack ['$50load_global.0', '$n52.1']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=GET_ITER(arg=None, lineno=396)
DEBUG:numba.core.byteflow:stack ['$54call_function.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=58, stack=('$56get_iter.3',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=58 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi58.0']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=FOR_ITER(arg=60, lineno=396)
DEBUG:numba.core.byteflow:stack ['$phi58.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0), Edge(pc=60, stack=('$phi58.0', '$58for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=60 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=120, inst=LOAD_CONST(arg=1, lineno=404)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=122, inst=RETURN_VALUE(arg=None, lineno=404)
DEBUG:numba.core.byteflow:stack ['$const120.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=60 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi60.0', '$phi60.1']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=STORE_FAST(arg=5, lineno=396)
DEBUG:numba.core.byteflow:stack ['$phi60.0', '$phi60.1']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=LOAD_GLOBAL(arg=2, lineno=397)
DEBUG:numba.core.byteflow:stack ['$phi60.0']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_FAST(arg=0, lineno=397)
DEBUG:numba.core.byteflow:stack ['$phi60.0', '$62load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=397)
DEBUG:numba.core.byteflow:stack ['$phi60.0', '$62load_global.2', '$a64.3']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=LOAD_FAST(arg=5, lineno=397)
DEBUG:numba.core.byteflow:stack ['$phi60.0', '$62load_global.2', '$a64.3', '$a_offset66.4']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=BINARY_ADD(arg=None, lineno=397)
DEBUG:numba.core.byteflow:stack ['$phi60.0', '$62load_global.2', '$a64.3', '$a_offset66.4', '$i68.5']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=397)
DEBUG:numba.core.byteflow:stack ['$phi60.0', '$62load_global.2', '$a64.3', '$70binary_add.6']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=STORE_FAST(arg=6, lineno=397)
DEBUG:numba.core.byteflow:stack ['$phi60.0', '$72call_function.7']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_GLOBAL(arg=2, lineno=398)
DEBUG:numba.core.byteflow:stack ['$phi60.0']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=LOAD_FAST(arg=2, lineno=398)
DEBUG:numba.core.byteflow:stack ['$phi60.0', '$76load_global.8']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=LOAD_FAST(arg=3, lineno=398)
DEBUG:numba.core.byteflow:stack ['$phi60.0', '$76load_global.8', '$b78.9']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=LOAD_FAST(arg=5, lineno=398)
DEBUG:numba.core.byteflow:stack ['$phi60.0', '$76load_global.8', '$b78.9', '$b_offset80.10']
DEBUG:numba.core.byteflow:dispatch pc=84, inst=BINARY_ADD(arg=None, lineno=398)
DEBUG:numba.core.byteflow:stack ['$phi60.0', '$76load_global.8', '$b78.9', '$b_offset80.10', '$i82.11']
DEBUG:numba.core.byteflow:dispatch pc=86, inst=CALL_FUNCTION(arg=2, lineno=398)
DEBUG:numba.core.byteflow:stack ['$phi60.0', '$76load_global.8', '$b78.9', '$84binary_add.12']
DEBUG:numba.core.byteflow:dispatch pc=88, inst=STORE_FAST(arg=7, lineno=398)
DEBUG:numba.core.byteflow:stack ['$phi60.0', '$86call_function.13']
DEBUG:numba.core.byteflow:dispatch pc=90, inst=LOAD_FAST(arg=6, lineno=399)
DEBUG:numba.core.byteflow:stack ['$phi60.0']
DEBUG:numba.core.byteflow:dispatch pc=92, inst=LOAD_FAST(arg=7, lineno=399)
DEBUG:numba.core.byteflow:stack ['$phi60.0', '$a_chr90.14']
DEBUG:numba.core.byteflow:dispatch pc=94, inst=COMPARE_OP(arg=0, lineno=399)
DEBUG:numba.core.byteflow:stack ['$phi60.0', '$a_chr90.14', '$b_chr92.15']
DEBUG:numba.core.byteflow:dispatch pc=96, inst=POP_JUMP_IF_FALSE(arg=104, lineno=399)
DEBUG:numba.core.byteflow:stack ['$phi60.0', '$94compare_op.16']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=98, stack=('$phi60.0',), blockstack=(), npush=0), Edge(pc=104, stack=('$phi60.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=98 nstack_initial=1), State(pc_initial=104 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi98.0']
DEBUG:numba.core.byteflow:dispatch pc=98, inst=POP_TOP(arg=None, lineno=400)
DEBUG:numba.core.byteflow:stack ['$phi98.0']
DEBUG:numba.core.byteflow:dispatch pc=100, inst=LOAD_CONST(arg=2, lineno=400)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=102, inst=RETURN_VALUE(arg=None, lineno=400)
DEBUG:numba.core.byteflow:stack ['$const100.1']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=104 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi104.0']
DEBUG:numba.core.byteflow:dispatch pc=104, inst=LOAD_FAST(arg=6, lineno=401)
DEBUG:numba.core.byteflow:stack ['$phi104.0']
DEBUG:numba.core.byteflow:dispatch pc=106, inst=LOAD_FAST(arg=7, lineno=401)
DEBUG:numba.core.byteflow:stack ['$phi104.0', '$a_chr104.1']
DEBUG:numba.core.byteflow:dispatch pc=108, inst=COMPARE_OP(arg=4, lineno=401)
DEBUG:numba.core.byteflow:stack ['$phi104.0', '$a_chr104.1', '$b_chr106.2']
DEBUG:numba.core.byteflow:dispatch pc=110, inst=POP_JUMP_IF_FALSE(arg=58, lineno=401)
DEBUG:numba.core.byteflow:stack ['$phi104.0', '$108compare_op.3']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=112, stack=('$phi104.0',), blockstack=(), npush=0), Edge(pc=58, stack=('$phi104.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=112 nstack_initial=1), State(pc_initial=58 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi112.0']
DEBUG:numba.core.byteflow:dispatch pc=112, inst=POP_TOP(arg=None, lineno=402)
DEBUG:numba.core.byteflow:stack ['$phi112.0']
DEBUG:numba.core.byteflow:dispatch pc=114, inst=LOAD_CONST(arg=3, lineno=402)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=116, inst=RETURN_VALUE(arg=None, lineno=402)
DEBUG:numba.core.byteflow:stack ['$const114.1']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=58 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=1): {'$phi58.0'},
             State(pc_initial=60 nstack_initial=2): {'$phi60.1'},
             State(pc_initial=98 nstack_initial=1): set(),
             State(pc_initial=104 nstack_initial=1): set(),
             State(pc_initial=112 nstack_initial=1): set(),
             State(pc_initial=120 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi58.0': State(pc_initial=50 nstack_initial=0),
 '$phi60.1': State(pc_initial=58 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$phi60.0', State(pc_initial=60 nstack_initial=2))},
             '$phi112.0': {('$phi104.0',
                            State(pc_initial=104 nstack_initial=1))},
             '$phi58.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0)),
                          ('$phi104.0',
                           State(pc_initial=104 nstack_initial=1))},
             '$phi60.0': {('$phi58.0', State(pc_initial=58 nstack_initial=1))},
             '$phi60.1': {('$58for_iter.2',
                           State(pc_initial=58 nstack_initial=1))},
             '$phi98.0': {('$phi60.0', State(pc_initial=60 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$phi58.0', State(pc_initial=58 nstack_initial=1))},
             '$phi112.0': {('$phi58.0', State(pc_initial=58 nstack_initial=1))},
             '$phi58.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0)),
                          ('$phi58.0', State(pc_initial=58 nstack_initial=1))},
             '$phi60.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0))},
             '$phi60.1': {('$58for_iter.2',
                           State(pc_initial=58 nstack_initial=1))},
             '$phi98.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$56get_iter.3',
                            State(pc_initial=50 nstack_initial=0))},
             '$phi112.0': {('$56get_iter.3',
                            State(pc_initial=50 nstack_initial=0))},
             '$phi58.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0))},
             '$phi60.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0))},
             '$phi60.1': {('$58for_iter.2',
                           State(pc_initial=58 nstack_initial=1))},
             '$phi98.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$56get_iter.3',
                            State(pc_initial=50 nstack_initial=0))},
             '$phi112.0': {('$56get_iter.3',
                            State(pc_initial=50 nstack_initial=0))},
             '$phi58.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0))},
             '$phi60.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0))},
             '$phi60.1': {('$58for_iter.2',
                           State(pc_initial=58 nstack_initial=1))},
             '$phi98.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi58.0': {('$56get_iter.3', State(pc_initial=50 nstack_initial=0))},
 '$phi60.1': {('$58for_iter.2', State(pc_initial=58 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=50 nstack_initial=0): {'$phi58.0': '$56get_iter.3'},
             State(pc_initial=58 nstack_initial=1): {'$phi60.1': '$58for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$n2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$n2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$a_offset14.0'}), (16, {'res': '$n16.1'}), (18, {'lhs': '$a_offset14.0', 'rhs': '$n16.1', 'res': '$18binary_add.2'}), (20, {'res': '$a20.3'}), (22, {'item': '$a20.3', 'res': '$22load_attr.4'}), (24, {'lhs': '$18binary_add.2', 'rhs': '$22load_attr.4', 'res': '$24compare_op.5'}), (26, {'pred': '$24compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 32: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$const28.0'}), (30, {'retval': '$const28.0', 'castval': '$30return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$b_offset32.0'}), (34, {'res': '$n34.1'}), (36, {'lhs': '$b_offset32.0', 'rhs': '$n34.1', 'res': '$36binary_add.2'}), (38, {'res': '$b38.3'}), (40, {'item': '$b38.3', 'res': '$40load_attr.4'}), (42, {'lhs': '$36binary_add.2', 'rhs': '$40load_attr.4', 'res': '$42compare_op.5'}), (44, {'pred': '$42compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: (), 50: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=46 nstack_initial=0):
AdaptBlockInfo(insts=((46, {'res': '$const46.0'}), (48, {'retval': '$const46.0', 'castval': '$48return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$50load_global.0'}), (52, {'res': '$n52.1'}), (54, {'func': '$50load_global.0', 'args': ['$n52.1'], 'res': '$54call_function.2'}), (56, {'value': '$54call_function.2', 'res': '$56get_iter.3'})), outgoing_phis={'$phi58.0': '$56get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: ('$56get_iter.3',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=58 nstack_initial=1):
AdaptBlockInfo(insts=((58, {'iterator': '$phi58.0', 'pair': '$58for_iter.1', 'indval': '$58for_iter.2', 'pred': '$58for_iter.3'}),), outgoing_phis={'$phi60.1': '$58for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: (), 60: ('$phi58.0', '$58for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=60 nstack_initial=2):
AdaptBlockInfo(insts=((60, {'value': '$phi60.1'}), (62, {'res': '$62load_global.2'}), (64, {'res': '$a64.3'}), (66, {'res': '$a_offset66.4'}), (68, {'res': '$i68.5'}), (70, {'lhs': '$a_offset66.4', 'rhs': '$i68.5', 'res': '$70binary_add.6'}), (72, {'func': '$62load_global.2', 'args': ['$a64.3', '$70binary_add.6'], 'res': '$72call_function.7'}), (74, {'value': '$72call_function.7'}), (76, {'res': '$76load_global.8'}), (78, {'res': '$b78.9'}), (80, {'res': '$b_offset80.10'}), (82, {'res': '$i82.11'}), (84, {'lhs': '$b_offset80.10', 'rhs': '$i82.11', 'res': '$84binary_add.12'}), (86, {'func': '$76load_global.8', 'args': ['$b78.9', '$84binary_add.12'], 'res': '$86call_function.13'}), (88, {'value': '$86call_function.13'}), (90, {'res': '$a_chr90.14'}), (92, {'res': '$b_chr92.15'}), (94, {'lhs': '$a_chr90.14', 'rhs': '$b_chr92.15', 'res': '$94compare_op.16'}), (96, {'pred': '$94compare_op.16'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={98: ('$phi60.0',), 104: ('$phi60.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=98 nstack_initial=1):
AdaptBlockInfo(insts=((100, {'res': '$const100.1'}), (102, {'retval': '$const100.1', 'castval': '$102return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=104 nstack_initial=1):
AdaptBlockInfo(insts=((104, {'res': '$a_chr104.1'}), (106, {'res': '$b_chr106.2'}), (108, {'lhs': '$a_chr104.1', 'rhs': '$b_chr106.2', 'res': '$108compare_op.3'}), (110, {'pred': '$108compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={112: ('$phi104.0',), 58: ('$phi104.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=112 nstack_initial=1):
AdaptBlockInfo(insts=((114, {'res': '$const114.1'}), (116, {'retval': '$const114.1', 'castval': '$116return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=120 nstack_initial=0):
AdaptBlockInfo(insts=((120, {'res': '$const120.0'}), (122, {'retval': '$const120.0', 'castval': '$122return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    a = arg(0, name=a)                       ['a']
    a_offset = arg(1, name=a_offset)         ['a_offset']
    b = arg(2, name=b)                       ['b']
    b_offset = arg(3, name=b_offset)         ['b_offset']
    n = arg(4, name=n)                       ['n']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = n == $const4.1          ['$6compare_op.2', '$const4.1', 'n']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, unicode.py:389),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    $18binary_add.2 = a_offset + n           ['$18binary_add.2', 'a_offset', 'n']
    $22load_attr.4 = getattr(value=a, attr=_length) ['$22load_attr.4', 'a']
    $24compare_op.5 = $18binary_add.2 > $22load_attr.4 ['$18binary_add.2', '$22load_attr.4', '$24compare_op.5']
    bool26 = global(bool: <class 'bool'>)    ['bool26']
    $26pred = call bool26($24compare_op.5, func=bool26, args=(Var($24compare_op.5, unicode.py:391),), kws=(), vararg=None, target=None) ['$24compare_op.5', '$26pred', 'bool26']
    branch $26pred, 28, 32                   ['$26pred']
label 28:
    $const28.0 = const(int, -1)              ['$const28.0']
    $30return_value.1 = cast(value=$const28.0) ['$30return_value.1', '$const28.0']
    return $30return_value.1                 ['$30return_value.1']
label 32:
    $36binary_add.2 = b_offset + n           ['$36binary_add.2', 'b_offset', 'n']
    $40load_attr.4 = getattr(value=b, attr=_length) ['$40load_attr.4', 'b']
    $42compare_op.5 = $36binary_add.2 > $40load_attr.4 ['$36binary_add.2', '$40load_attr.4', '$42compare_op.5']
    bool44 = global(bool: <class 'bool'>)    ['bool44']
    $44pred = call bool44($42compare_op.5, func=bool44, args=(Var($42compare_op.5, unicode.py:393),), kws=(), vararg=None, target=None) ['$42compare_op.5', '$44pred', 'bool44']
    branch $44pred, 46, 50                   ['$44pred']
label 46:
    $const46.0 = const(int, 1)               ['$const46.0']
    $48return_value.1 = cast(value=$const46.0) ['$48return_value.1', '$const46.0']
    return $48return_value.1                 ['$48return_value.1']
label 50:
    $50load_global.0 = global(range: <class 'range'>) ['$50load_global.0']
    $54call_function.2 = call $50load_global.0(n, func=$50load_global.0, args=[Var(n, unicode.py:389)], kws=(), vararg=None, target=None) ['$50load_global.0', '$54call_function.2', 'n']
    $56get_iter.3 = getiter(value=$54call_function.2) ['$54call_function.2', '$56get_iter.3']
    $phi58.0 = $56get_iter.3                 ['$56get_iter.3', '$phi58.0']
    jump 58                                  []
label 58:
    $58for_iter.1 = iternext(value=$phi58.0) ['$58for_iter.1', '$phi58.0']
    $58for_iter.2 = pair_first(value=$58for_iter.1) ['$58for_iter.1', '$58for_iter.2']
    $58for_iter.3 = pair_second(value=$58for_iter.1) ['$58for_iter.1', '$58for_iter.3']
    $phi60.1 = $58for_iter.2                 ['$58for_iter.2', '$phi60.1']
    branch $58for_iter.3, 60, 120            ['$58for_iter.3']
label 60:
    i = $phi60.1                             ['$phi60.1', 'i']
    $62load_global.2 = global(_get_code_point: <function _get_code_point at 0x0000029B6B477C10>) ['$62load_global.2']
    $70binary_add.6 = a_offset + i           ['$70binary_add.6', 'a_offset', 'i']
    a_chr = call $62load_global.2(a, $70binary_add.6, func=$62load_global.2, args=[Var(a, unicode.py:389), Var($70binary_add.6, unicode.py:397)], kws=(), vararg=None, target=None) ['$62load_global.2', '$70binary_add.6', 'a', 'a_chr']
    $76load_global.8 = global(_get_code_point: <function _get_code_point at 0x0000029B6B477C10>) ['$76load_global.8']
    $84binary_add.12 = b_offset + i          ['$84binary_add.12', 'b_offset', 'i']
    b_chr = call $76load_global.8(b, $84binary_add.12, func=$76load_global.8, args=[Var(b, unicode.py:389), Var($84binary_add.12, unicode.py:398)], kws=(), vararg=None, target=None) ['$76load_global.8', '$84binary_add.12', 'b', 'b_chr']
    $94compare_op.16 = a_chr < b_chr         ['$94compare_op.16', 'a_chr', 'b_chr']
    bool96 = global(bool: <class 'bool'>)    ['bool96']
    $96pred = call bool96($94compare_op.16, func=bool96, args=(Var($94compare_op.16, unicode.py:399),), kws=(), vararg=None, target=None) ['$94compare_op.16', '$96pred', 'bool96']
    branch $96pred, 98, 104                  ['$96pred']
label 98:
    $const100.1 = const(int, -1)             ['$const100.1']
    $102return_value.2 = cast(value=$const100.1) ['$102return_value.2', '$const100.1']
    return $102return_value.2                ['$102return_value.2']
label 104:
    $108compare_op.3 = a_chr > b_chr         ['$108compare_op.3', 'a_chr', 'b_chr']
    bool110 = global(bool: <class 'bool'>)   ['bool110']
    $110pred = call bool110($108compare_op.3, func=bool110, args=(Var($108compare_op.3, unicode.py:401),), kws=(), vararg=None, target=None) ['$108compare_op.3', '$110pred', 'bool110']
    branch $110pred, 112, 58                 ['$110pred']
label 112:
    $const114.1 = const(int, 1)              ['$const114.1']
    $116return_value.2 = cast(value=$const114.1) ['$116return_value.2', '$const114.1']
    return $116return_value.2                ['$116return_value.2']
label 120:
    $const120.0 = const(int, 0)              ['$const120.0']
    $122return_value.1 = cast(value=$const120.0) ['$122return_value.1', '$const120.0']
    return $122return_value.1                ['$122return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C097EE0>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: a_offset = arg(1, name=a_offset)
DEBUG:numba.core.ssa:on stmt: b = arg(2, name=b)
DEBUG:numba.core.ssa:on stmt: b_offset = arg(3, name=b_offset)
DEBUG:numba.core.ssa:on stmt: n = arg(4, name=n)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $6compare_op.2 = n == $const4.1
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, unicode.py:389),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 10, 14
DEBUG:numba.core.ssa:==== SSA block analysis pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C097EE0>
DEBUG:numba.core.ssa:on stmt: $const10.0 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG:numba.core.ssa:on stmt: return $12return_value.1
DEBUG:numba.core.ssa:==== SSA block analysis pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C097EE0>
DEBUG:numba.core.ssa:on stmt: $18binary_add.2 = a_offset + n
DEBUG:numba.core.ssa:on stmt: $22load_attr.4 = getattr(value=a, attr=_length)
DEBUG:numba.core.ssa:on stmt: $24compare_op.5 = $18binary_add.2 > $22load_attr.4
DEBUG:numba.core.ssa:on stmt: bool26 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $26pred = call bool26($24compare_op.5, func=bool26, args=(Var($24compare_op.5, unicode.py:391),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $26pred, 28, 32
DEBUG:numba.core.ssa:==== SSA block analysis pass on 28
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C097EE0>
DEBUG:numba.core.ssa:on stmt: $const28.0 = const(int, -1)
DEBUG:numba.core.ssa:on stmt: $30return_value.1 = cast(value=$const28.0)
DEBUG:numba.core.ssa:on stmt: return $30return_value.1
DEBUG:numba.core.ssa:==== SSA block analysis pass on 32
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C097EE0>
DEBUG:numba.core.ssa:on stmt: $36binary_add.2 = b_offset + n
DEBUG:numba.core.ssa:on stmt: $40load_attr.4 = getattr(value=b, attr=_length)
DEBUG:numba.core.ssa:on stmt: $42compare_op.5 = $36binary_add.2 > $40load_attr.4
DEBUG:numba.core.ssa:on stmt: bool44 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $44pred = call bool44($42compare_op.5, func=bool44, args=(Var($42compare_op.5, unicode.py:393),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $44pred, 46, 50
DEBUG:numba.core.ssa:==== SSA block analysis pass on 46
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C097EE0>
DEBUG:numba.core.ssa:on stmt: $const46.0 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $48return_value.1 = cast(value=$const46.0)
DEBUG:numba.core.ssa:on stmt: return $48return_value.1
DEBUG:numba.core.ssa:==== SSA block analysis pass on 50
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C097EE0>
DEBUG:numba.core.ssa:on stmt: $50load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $54call_function.2 = call $50load_global.0(n, func=$50load_global.0, args=[Var(n, unicode.py:389)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $56get_iter.3 = getiter(value=$54call_function.2)
DEBUG:numba.core.ssa:on stmt: $phi58.0 = $56get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 58
DEBUG:numba.core.ssa:==== SSA block analysis pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C097EE0>
DEBUG:numba.core.ssa:on stmt: $58for_iter.1 = iternext(value=$phi58.0)
DEBUG:numba.core.ssa:on stmt: $58for_iter.2 = pair_first(value=$58for_iter.1)
DEBUG:numba.core.ssa:on stmt: $58for_iter.3 = pair_second(value=$58for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi60.1 = $58for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $58for_iter.3, 60, 120
DEBUG:numba.core.ssa:==== SSA block analysis pass on 60
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C097EE0>
DEBUG:numba.core.ssa:on stmt: i = $phi60.1
DEBUG:numba.core.ssa:on stmt: $62load_global.2 = global(_get_code_point: <function _get_code_point at 0x0000029B6B477C10>)
DEBUG:numba.core.ssa:on stmt: $70binary_add.6 = a_offset + i
DEBUG:numba.core.ssa:on stmt: a_chr = call $62load_global.2(a, $70binary_add.6, func=$62load_global.2, args=[Var(a, unicode.py:389), Var($70binary_add.6, unicode.py:397)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $76load_global.8 = global(_get_code_point: <function _get_code_point at 0x0000029B6B477C10>)
DEBUG:numba.core.ssa:on stmt: $84binary_add.12 = b_offset + i
DEBUG:numba.core.ssa:on stmt: b_chr = call $76load_global.8(b, $84binary_add.12, func=$76load_global.8, args=[Var(b, unicode.py:389), Var($84binary_add.12, unicode.py:398)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $94compare_op.16 = a_chr < b_chr
DEBUG:numba.core.ssa:on stmt: bool96 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $96pred = call bool96($94compare_op.16, func=bool96, args=(Var($94compare_op.16, unicode.py:399),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $96pred, 98, 104
DEBUG:numba.core.ssa:==== SSA block analysis pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C097EE0>
DEBUG:numba.core.ssa:on stmt: $const100.1 = const(int, -1)
DEBUG:numba.core.ssa:on stmt: $102return_value.2 = cast(value=$const100.1)
DEBUG:numba.core.ssa:on stmt: return $102return_value.2
DEBUG:numba.core.ssa:==== SSA block analysis pass on 104
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C097EE0>
DEBUG:numba.core.ssa:on stmt: $108compare_op.3 = a_chr > b_chr
DEBUG:numba.core.ssa:on stmt: bool110 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $110pred = call bool110($108compare_op.3, func=bool110, args=(Var($108compare_op.3, unicode.py:401),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $110pred, 112, 58
DEBUG:numba.core.ssa:==== SSA block analysis pass on 112
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C097EE0>
DEBUG:numba.core.ssa:on stmt: $const114.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $116return_value.2 = cast(value=$const114.1)
DEBUG:numba.core.ssa:on stmt: return $116return_value.2
DEBUG:numba.core.ssa:==== SSA block analysis pass on 120
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C097EE0>
DEBUG:numba.core.ssa:on stmt: $const120.0 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $122return_value.1 = cast(value=$const120.0)
DEBUG:numba.core.ssa:on stmt: return $122return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$102return_value.2': [<numba.core.ir.Assign object at 0x0000029B6C090910>],
             '$108compare_op.3': [<numba.core.ir.Assign object at 0x0000029B6C097370>],
             '$110pred': [<numba.core.ir.Assign object at 0x0000029B6C0975E0>],
             '$116return_value.2': [<numba.core.ir.Assign object at 0x0000029B6C097940>],
             '$122return_value.1': [<numba.core.ir.Assign object at 0x0000029B6C097D60>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x0000029B6C757820>],
             '$18binary_add.2': [<numba.core.ir.Assign object at 0x0000029B6C757D30>],
             '$22load_attr.4': [<numba.core.ir.Assign object at 0x0000029B6C757FA0>],
             '$24compare_op.5': [<numba.core.ir.Assign object at 0x0000029B6C732190>],
             '$26pred': [<numba.core.ir.Assign object at 0x0000029B6C732400>],
             '$30return_value.1': [<numba.core.ir.Assign object at 0x0000029B6C732700>],
             '$36binary_add.2': [<numba.core.ir.Assign object at 0x0000029B6C732C10>],
             '$40load_attr.4': [<numba.core.ir.Assign object at 0x0000029B6C732E80>],
             '$42compare_op.5': [<numba.core.ir.Assign object at 0x0000029B6C060070>],
             '$44pred': [<numba.core.ir.Assign object at 0x0000029B6C0602E0>],
             '$48return_value.1': [<numba.core.ir.Assign object at 0x0000029B6C0605E0>],
             '$50load_global.0': [<numba.core.ir.Assign object at 0x0000029B6C060880>],
             '$54call_function.2': [<numba.core.ir.Assign object at 0x0000029B6C060B80>],
             '$56get_iter.3': [<numba.core.ir.Assign object at 0x0000029B6C060CA0>],
             '$58for_iter.1': [<numba.core.ir.Assign object at 0x0000029B6C060FD0>],
             '$58for_iter.2': [<numba.core.ir.Assign object at 0x0000029B6C07C130>],
             '$58for_iter.3': [<numba.core.ir.Assign object at 0x0000029B6C07C250>],
             '$62load_global.2': [<numba.core.ir.Assign object at 0x0000029B6C07C6A0>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x0000029B6C7571F0>],
             '$70binary_add.6': [<numba.core.ir.Assign object at 0x0000029B6C07CBB0>],
             '$76load_global.8': [<numba.core.ir.Assign object at 0x0000029B6C07CFA0>],
             '$84binary_add.12': [<numba.core.ir.Assign object at 0x0000029B6C0904F0>],
             '$8pred': [<numba.core.ir.Assign object at 0x0000029B6C757460>],
             '$94compare_op.16': [<numba.core.ir.Assign object at 0x0000029B6C090B50>],
             '$96pred': [<numba.core.ir.Assign object at 0x0000029B6C090DC0>],
             '$const10.0': [<numba.core.ir.Assign object at 0x0000029B6C7576A0>],
             '$const100.1': [<numba.core.ir.Assign object at 0x0000029B6C090190>],
             '$const114.1': [<numba.core.ir.Assign object at 0x0000029B6C0977C0>],
             '$const120.0': [<numba.core.ir.Assign object at 0x0000029B6C097BE0>],
             '$const28.0': [<numba.core.ir.Assign object at 0x0000029B6C732580>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000029B6C757040>],
             '$const46.0': [<numba.core.ir.Assign object at 0x0000029B6C060460>],
             '$phi58.0': [<numba.core.ir.Assign object at 0x0000029B6C0609A0>],
             '$phi60.1': [<numba.core.ir.Assign object at 0x0000029B6C060F10>],
             'a': [<numba.core.ir.Assign object at 0x0000029B6C73AD30>],
             'a_chr': [<numba.core.ir.Assign object at 0x0000029B6C07CD60>],
             'a_offset': [<numba.core.ir.Assign object at 0x0000029B6C73A070>],
             'b': [<numba.core.ir.Assign object at 0x0000029B6C73AEE0>],
             'b_chr': [<numba.core.ir.Assign object at 0x0000029B6C0906A0>],
             'b_offset': [<numba.core.ir.Assign object at 0x0000029B6C73A0D0>],
             'bool110': [<numba.core.ir.Assign object at 0x0000029B6C0974C0>],
             'bool26': [<numba.core.ir.Assign object at 0x0000029B6C7322E0>],
             'bool44': [<numba.core.ir.Assign object at 0x0000029B6C0601C0>],
             'bool8': [<numba.core.ir.Assign object at 0x0000029B6C757340>],
             'bool96': [<numba.core.ir.Assign object at 0x0000029B6C090CA0>],
             'i': [<numba.core.ir.Assign object at 0x0000029B6C07C520>],
             'n': [<numba.core.ir.Assign object at 0x0000029B6C73ABE0>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=285)
           2	LOAD_FAST(arg=0, lineno=285)
           4	LOAD_ATTR(arg=0, lineno=285)
           6	LOAD_GLOBAL(arg=1, lineno=285)
           8	COMPARE_OP(arg=2, lineno=285)
          10	POP_JUMP_IF_FALSE(arg=24, lineno=285)
          12	LOAD_GLOBAL(arg=2, lineno=286)
          14	LOAD_FAST(arg=0, lineno=286)
          16	LOAD_ATTR(arg=3, lineno=286)
          18	LOAD_FAST(arg=1, lineno=286)
          20	CALL_FUNCTION(arg=2, lineno=286)
          22	RETURN_VALUE(arg=None, lineno=286)
>         24	LOAD_FAST(arg=0, lineno=287)
          26	LOAD_ATTR(arg=0, lineno=287)
          28	LOAD_GLOBAL(arg=4, lineno=287)
          30	COMPARE_OP(arg=2, lineno=287)
          32	POP_JUMP_IF_FALSE(arg=46, lineno=287)
          34	LOAD_GLOBAL(arg=5, lineno=288)
          36	LOAD_FAST(arg=0, lineno=288)
          38	LOAD_ATTR(arg=3, lineno=288)
          40	LOAD_FAST(arg=1, lineno=288)
          42	CALL_FUNCTION(arg=2, lineno=288)
          44	RETURN_VALUE(arg=None, lineno=288)
>         46	LOAD_FAST(arg=0, lineno=289)
          48	LOAD_ATTR(arg=0, lineno=289)
          50	LOAD_GLOBAL(arg=6, lineno=289)
          52	COMPARE_OP(arg=2, lineno=289)
          54	POP_JUMP_IF_FALSE(arg=68, lineno=289)
          56	LOAD_GLOBAL(arg=7, lineno=290)
          58	LOAD_FAST(arg=0, lineno=290)
          60	LOAD_ATTR(arg=3, lineno=290)
          62	LOAD_FAST(arg=1, lineno=290)
          64	CALL_FUNCTION(arg=2, lineno=290)
          66	RETURN_VALUE(arg=None, lineno=290)
>         68	LOAD_CONST(arg=1, lineno=294)
          70	RETURN_VALUE(arg=None, lineno=294)
          72	LOAD_CONST(arg=0, lineno=294)
          74	RETURN_VALUE(arg=None, lineno=294)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=285)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=285)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=285)
DEBUG:numba.core.byteflow:stack ['$a2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=285)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=COMPARE_OP(arg=2, lineno=285)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$6load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=POP_JUMP_IF_FALSE(arg=24, lineno=285)
DEBUG:numba.core.byteflow:stack ['$8compare_op.3']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_GLOBAL(arg=2, lineno=286)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=286)
DEBUG:numba.core.byteflow:stack ['$12load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=286)
DEBUG:numba.core.byteflow:stack ['$12load_global.0', '$a14.1']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=286)
DEBUG:numba.core.byteflow:stack ['$12load_global.0', '$16load_attr.2']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=CALL_FUNCTION(arg=2, lineno=286)
DEBUG:numba.core.byteflow:stack ['$12load_global.0', '$16load_attr.2', '$i18.3']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=286)
DEBUG:numba.core.byteflow:stack ['$20call_function.4']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=24 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=287)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_ATTR(arg=0, lineno=287)
DEBUG:numba.core.byteflow:stack ['$a24.0']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=LOAD_GLOBAL(arg=4, lineno=287)
DEBUG:numba.core.byteflow:stack ['$26load_attr.1']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=COMPARE_OP(arg=2, lineno=287)
DEBUG:numba.core.byteflow:stack ['$26load_attr.1', '$28load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=46, lineno=287)
DEBUG:numba.core.byteflow:stack ['$30compare_op.3']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=46, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=46 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_GLOBAL(arg=5, lineno=288)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=288)
DEBUG:numba.core.byteflow:stack ['$34load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_ATTR(arg=3, lineno=288)
DEBUG:numba.core.byteflow:stack ['$34load_global.0', '$a36.1']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=288)
DEBUG:numba.core.byteflow:stack ['$34load_global.0', '$38load_attr.2']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=CALL_FUNCTION(arg=2, lineno=288)
DEBUG:numba.core.byteflow:stack ['$34load_global.0', '$38load_attr.2', '$i40.3']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=RETURN_VALUE(arg=None, lineno=288)
DEBUG:numba.core.byteflow:stack ['$42call_function.4']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=46 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=289)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_ATTR(arg=0, lineno=289)
DEBUG:numba.core.byteflow:stack ['$a46.0']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_GLOBAL(arg=6, lineno=289)
DEBUG:numba.core.byteflow:stack ['$48load_attr.1']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=COMPARE_OP(arg=2, lineno=289)
DEBUG:numba.core.byteflow:stack ['$48load_attr.1', '$50load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=POP_JUMP_IF_FALSE(arg=68, lineno=289)
DEBUG:numba.core.byteflow:stack ['$52compare_op.3']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=56, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=56 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=56, inst=LOAD_GLOBAL(arg=7, lineno=290)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_FAST(arg=0, lineno=290)
DEBUG:numba.core.byteflow:stack ['$56load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_ATTR(arg=3, lineno=290)
DEBUG:numba.core.byteflow:stack ['$56load_global.0', '$a58.1']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=290)
DEBUG:numba.core.byteflow:stack ['$56load_global.0', '$60load_attr.2']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=CALL_FUNCTION(arg=2, lineno=290)
DEBUG:numba.core.byteflow:stack ['$56load_global.0', '$60load_attr.2', '$i62.3']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=290)
DEBUG:numba.core.byteflow:stack ['$64call_function.4']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=68 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=68, inst=LOAD_CONST(arg=1, lineno=294)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=70, inst=RETURN_VALUE(arg=None, lineno=294)
DEBUG:numba.core.byteflow:stack ['$const68.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=0): set(),
             State(pc_initial=56 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'res': '$6load_global.2'}), (8, {'lhs': '$4load_attr.1', 'rhs': '$6load_global.2', 'res': '$8compare_op.3'}), (10, {'pred': '$8compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 24: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$a14.1'}), (16, {'item': '$a14.1', 'res': '$16load_attr.2'}), (18, {'res': '$i18.3'}), (20, {'func': '$12load_global.0', 'args': ['$16load_attr.2', '$i18.3'], 'res': '$20call_function.4'}), (22, {'retval': '$20call_function.4', 'castval': '$22return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$a24.0'}), (26, {'item': '$a24.0', 'res': '$26load_attr.1'}), (28, {'res': '$28load_global.2'}), (30, {'lhs': '$26load_attr.1', 'rhs': '$28load_global.2', 'res': '$30compare_op.3'}), (32, {'pred': '$30compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 46: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$34load_global.0'}), (36, {'res': '$a36.1'}), (38, {'item': '$a36.1', 'res': '$38load_attr.2'}), (40, {'res': '$i40.3'}), (42, {'func': '$34load_global.0', 'args': ['$38load_attr.2', '$i40.3'], 'res': '$42call_function.4'}), (44, {'retval': '$42call_function.4', 'castval': '$44return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=46 nstack_initial=0):
AdaptBlockInfo(insts=((46, {'res': '$a46.0'}), (48, {'item': '$a46.0', 'res': '$48load_attr.1'}), (50, {'res': '$50load_global.2'}), (52, {'lhs': '$48load_attr.1', 'rhs': '$50load_global.2', 'res': '$52compare_op.3'}), (54, {'pred': '$52compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={56: (), 68: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'res': '$56load_global.0'}), (58, {'res': '$a58.1'}), (60, {'item': '$a58.1', 'res': '$60load_attr.2'}), (62, {'res': '$i62.3'}), (64, {'func': '$56load_global.0', 'args': ['$60load_attr.2', '$i62.3'], 'res': '$64call_function.4'}), (66, {'retval': '$64call_function.4', 'castval': '$66return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$const68.0'}), (70, {'retval': '$const68.0', 'castval': '$70return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    a = arg(0, name=a)                       ['a']
    i = arg(1, name=i)                       ['i']
    $4load_attr.1 = getattr(value=a, attr=_kind) ['$4load_attr.1', 'a']
    $6load_global.2 = global(PY_UNICODE_1BYTE_KIND: 1) ['$6load_global.2']
    $8compare_op.3 = $4load_attr.1 == $6load_global.2 ['$4load_attr.1', '$6load_global.2', '$8compare_op.3']
    bool10 = global(bool: <class 'bool'>)    ['bool10']
    $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, unicode.py:285),), kws=(), vararg=None, target=None) ['$10pred', '$8compare_op.3', 'bool10']
    branch $10pred, 12, 24                   ['$10pred']
label 12:
    $12load_global.0 = global(deref_uint8: <intrinsic deref_uint8>) ['$12load_global.0']
    $16load_attr.2 = getattr(value=a, attr=_data) ['$16load_attr.2', 'a']
    $20call_function.4 = call $12load_global.0($16load_attr.2, i, func=$12load_global.0, args=[Var($16load_attr.2, unicode.py:286), Var(i, unicode.py:285)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16load_attr.2', '$20call_function.4', 'i']
    $22return_value.5 = cast(value=$20call_function.4) ['$20call_function.4', '$22return_value.5']
    return $22return_value.5                 ['$22return_value.5']
label 24:
    $26load_attr.1 = getattr(value=a, attr=_kind) ['$26load_attr.1', 'a']
    $28load_global.2 = global(PY_UNICODE_2BYTE_KIND: 2) ['$28load_global.2']
    $30compare_op.3 = $26load_attr.1 == $28load_global.2 ['$26load_attr.1', '$28load_global.2', '$30compare_op.3']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($30compare_op.3, func=bool32, args=(Var($30compare_op.3, unicode.py:287),), kws=(), vararg=None, target=None) ['$30compare_op.3', '$32pred', 'bool32']
    branch $32pred, 34, 46                   ['$32pred']
label 34:
    $34load_global.0 = global(deref_uint16: <intrinsic deref_uint16>) ['$34load_global.0']
    $38load_attr.2 = getattr(value=a, attr=_data) ['$38load_attr.2', 'a']
    $42call_function.4 = call $34load_global.0($38load_attr.2, i, func=$34load_global.0, args=[Var($38load_attr.2, unicode.py:288), Var(i, unicode.py:285)], kws=(), vararg=None, target=None) ['$34load_global.0', '$38load_attr.2', '$42call_function.4', 'i']
    $44return_value.5 = cast(value=$42call_function.4) ['$42call_function.4', '$44return_value.5']
    return $44return_value.5                 ['$44return_value.5']
label 46:
    $48load_attr.1 = getattr(value=a, attr=_kind) ['$48load_attr.1', 'a']
    $50load_global.2 = global(PY_UNICODE_4BYTE_KIND: 4) ['$50load_global.2']
    $52compare_op.3 = $48load_attr.1 == $50load_global.2 ['$48load_attr.1', '$50load_global.2', '$52compare_op.3']
    bool54 = global(bool: <class 'bool'>)    ['bool54']
    $54pred = call bool54($52compare_op.3, func=bool54, args=(Var($52compare_op.3, unicode.py:289),), kws=(), vararg=None, target=None) ['$52compare_op.3', '$54pred', 'bool54']
    branch $54pred, 56, 68                   ['$54pred']
label 56:
    $56load_global.0 = global(deref_uint32: <intrinsic deref_uint32>) ['$56load_global.0']
    $60load_attr.2 = getattr(value=a, attr=_data) ['$60load_attr.2', 'a']
    $64call_function.4 = call $56load_global.0($60load_attr.2, i, func=$56load_global.0, args=[Var($60load_attr.2, unicode.py:290), Var(i, unicode.py:285)], kws=(), vararg=None, target=None) ['$56load_global.0', '$60load_attr.2', '$64call_function.4', 'i']
    $66return_value.5 = cast(value=$64call_function.4) ['$64call_function.4', '$66return_value.5']
    return $66return_value.5                 ['$66return_value.5']
label 68:
    $const68.0 = const(int, 0)               ['$const68.0']
    $70return_value.1 = cast(value=$const68.0) ['$70return_value.1', '$const68.0']
    return $70return_value.1                 ['$70return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6B8DE820>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: i = arg(1, name=i)
DEBUG:numba.core.ssa:on stmt: $4load_attr.1 = getattr(value=a, attr=_kind)
DEBUG:numba.core.ssa:on stmt: $6load_global.2 = global(PY_UNICODE_1BYTE_KIND: 1)
DEBUG:numba.core.ssa:on stmt: $8compare_op.3 = $4load_attr.1 == $6load_global.2
DEBUG:numba.core.ssa:on stmt: bool10 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, unicode.py:285),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $10pred, 12, 24
DEBUG:numba.core.ssa:==== SSA block analysis pass on 12
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6B8DE820>
DEBUG:numba.core.ssa:on stmt: $12load_global.0 = global(deref_uint8: <intrinsic deref_uint8>)
DEBUG:numba.core.ssa:on stmt: $16load_attr.2 = getattr(value=a, attr=_data)
DEBUG:numba.core.ssa:on stmt: $20call_function.4 = call $12load_global.0($16load_attr.2, i, func=$12load_global.0, args=[Var($16load_attr.2, unicode.py:286), Var(i, unicode.py:285)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $22return_value.5 = cast(value=$20call_function.4)
DEBUG:numba.core.ssa:on stmt: return $22return_value.5
DEBUG:numba.core.ssa:==== SSA block analysis pass on 24
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6B8DE820>
DEBUG:numba.core.ssa:on stmt: $26load_attr.1 = getattr(value=a, attr=_kind)
DEBUG:numba.core.ssa:on stmt: $28load_global.2 = global(PY_UNICODE_2BYTE_KIND: 2)
DEBUG:numba.core.ssa:on stmt: $30compare_op.3 = $26load_attr.1 == $28load_global.2
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.3, func=bool32, args=(Var($30compare_op.3, unicode.py:287),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 46
DEBUG:numba.core.ssa:==== SSA block analysis pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6B8DE820>
DEBUG:numba.core.ssa:on stmt: $34load_global.0 = global(deref_uint16: <intrinsic deref_uint16>)
DEBUG:numba.core.ssa:on stmt: $38load_attr.2 = getattr(value=a, attr=_data)
DEBUG:numba.core.ssa:on stmt: $42call_function.4 = call $34load_global.0($38load_attr.2, i, func=$34load_global.0, args=[Var($38load_attr.2, unicode.py:288), Var(i, unicode.py:285)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $44return_value.5 = cast(value=$42call_function.4)
DEBUG:numba.core.ssa:on stmt: return $44return_value.5
DEBUG:numba.core.ssa:==== SSA block analysis pass on 46
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6B8DE820>
DEBUG:numba.core.ssa:on stmt: $48load_attr.1 = getattr(value=a, attr=_kind)
DEBUG:numba.core.ssa:on stmt: $50load_global.2 = global(PY_UNICODE_4BYTE_KIND: 4)
DEBUG:numba.core.ssa:on stmt: $52compare_op.3 = $48load_attr.1 == $50load_global.2
DEBUG:numba.core.ssa:on stmt: bool54 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $54pred = call bool54($52compare_op.3, func=bool54, args=(Var($52compare_op.3, unicode.py:289),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $54pred, 56, 68
DEBUG:numba.core.ssa:==== SSA block analysis pass on 56
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6B8DE820>
DEBUG:numba.core.ssa:on stmt: $56load_global.0 = global(deref_uint32: <intrinsic deref_uint32>)
DEBUG:numba.core.ssa:on stmt: $60load_attr.2 = getattr(value=a, attr=_data)
DEBUG:numba.core.ssa:on stmt: $64call_function.4 = call $56load_global.0($60load_attr.2, i, func=$56load_global.0, args=[Var($60load_attr.2, unicode.py:290), Var(i, unicode.py:285)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $66return_value.5 = cast(value=$64call_function.4)
DEBUG:numba.core.ssa:on stmt: return $66return_value.5
DEBUG:numba.core.ssa:==== SSA block analysis pass on 68
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6B8DE820>
DEBUG:numba.core.ssa:on stmt: $const68.0 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $70return_value.1 = cast(value=$const68.0)
DEBUG:numba.core.ssa:on stmt: return $70return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10pred': [<numba.core.ir.Assign object at 0x0000029B6B8CEB80>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x0000029B6B8CEDC0>],
             '$16load_attr.2': [<numba.core.ir.Assign object at 0x0000029B6B8D10A0>],
             '$20call_function.4': [<numba.core.ir.Assign object at 0x0000029B6B8D13A0>],
             '$22return_value.5': [<numba.core.ir.Assign object at 0x0000029B6B8D14C0>],
             '$26load_attr.1': [<numba.core.ir.Assign object at 0x0000029B6B8D17C0>],
             '$28load_global.2': [<numba.core.ir.Assign object at 0x0000029B6B8D1940>],
             '$30compare_op.3': [<numba.core.ir.Assign object at 0x0000029B6B8CE130>],
             '$32pred': [<numba.core.ir.Assign object at 0x0000029B6B8DEEE0>],
             '$34load_global.0': [<numba.core.ir.Assign object at 0x0000029B6B8DE460>],
             '$38load_attr.2': [<numba.core.ir.Assign object at 0x0000029B6C063310>],
             '$42call_function.4': [<numba.core.ir.Assign object at 0x0000029B6B8D1C40>],
             '$44return_value.5': [<numba.core.ir.Assign object at 0x0000029B6B8D1D60>],
             '$48load_attr.1': [<numba.core.ir.Assign object at 0x0000029B6B8D20A0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x0000029B6B8CE5E0>],
             '$50load_global.2': [<numba.core.ir.Assign object at 0x0000029B6B8D2220>],
             '$52compare_op.3': [<numba.core.ir.Assign object at 0x0000029B6B8D23D0>],
             '$54pred': [<numba.core.ir.Assign object at 0x0000029B6B8D2640>],
             '$56load_global.0': [<numba.core.ir.Assign object at 0x0000029B6B8D2880>],
             '$60load_attr.2': [<numba.core.ir.Assign object at 0x0000029B6B8D2B20>],
             '$64call_function.4': [<numba.core.ir.Assign object at 0x0000029B6B8D2E20>],
             '$66return_value.5': [<numba.core.ir.Assign object at 0x0000029B6B8D2F40>],
             '$6load_global.2': [<numba.core.ir.Assign object at 0x0000029B6B8CE760>],
             '$70return_value.1': [<numba.core.ir.Assign object at 0x0000029B6B8CF2E0>],
             '$8compare_op.3': [<numba.core.ir.Assign object at 0x0000029B6B8CE910>],
             '$const68.0': [<numba.core.ir.Assign object at 0x0000029B6B8CF160>],
             'a': [<numba.core.ir.Assign object at 0x0000029B6B8CE220>],
             'bool10': [<numba.core.ir.Assign object at 0x0000029B6B8CEA60>],
             'bool32': [<numba.core.ir.Assign object at 0x0000029B6C73A310>],
             'bool54': [<numba.core.ir.Assign object at 0x0000029B6B8D2520>],
             'i': [<numba.core.ir.Assign object at 0x0000029B6B8CE340>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$tmp04.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG:numba.core.byteflow:stack ['$8call_function.3']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D683BE0>
DEBUG:numba.core.ssa:on stmt: tmp0 = arg(0, name=tmp0)
DEBUG:numba.core.ssa:on stmt: dtype = arg(1, name=dtype)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG:numba.core.ssa:on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG:numba.core.ssa:on stmt: return $10return_value.4
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x0000029B6C9EAFD0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000029B6D672EB0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x0000029B6C9EAEB0>],
             'dtype': [<numba.core.ir.Assign object at 0x0000029B6D635B80>],
             'tmp0': [<numba.core.ir.Assign object at 0x0000029B6D635430>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=3870)
           2	LOAD_GLOBAL(arg=0, lineno=3870)
           4	LOAD_METHOD(arg=1, lineno=3870)
           6	LOAD_FAST(arg=0, lineno=3870)
           8	LOAD_FAST(arg=1, lineno=3870)
          10	CALL_METHOD(arg=2, lineno=3870)
          12	STORE_FAST(arg=2, lineno=3870)
          14	LOAD_GLOBAL(arg=0, lineno=3871)
          16	LOAD_METHOD(arg=2, lineno=3871)
          18	LOAD_FAST(arg=2, lineno=3871)
          20	LOAD_ATTR(arg=3, lineno=3871)
          22	CALL_METHOD(arg=1, lineno=3871)
          24	GET_ITER(arg=None, lineno=3871)
>         26	FOR_ITER(arg=12, lineno=3871)
          28	STORE_FAST(arg=3, lineno=3871)
          30	LOAD_CONST(arg=1, lineno=3872)
          32	LOAD_FAST(arg=2, lineno=3872)
          34	LOAD_FAST(arg=3, lineno=3872)
          36	STORE_SUBSCR(arg=None, lineno=3872)
          38	JUMP_ABSOLUTE(arg=26, lineno=3872)
>         40	LOAD_FAST(arg=2, lineno=3873)
          42	RETURN_VALUE(arg=None, lineno=3873)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=3870)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3870)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=3870)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=3870)
DEBUG:numba.core.byteflow:stack ['$4load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=3870)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$shape6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3870)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$shape6.2', '$dtype8.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=STORE_FAST(arg=2, lineno=3870)
DEBUG:numba.core.byteflow:stack ['$10call_method.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_GLOBAL(arg=0, lineno=3871)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_METHOD(arg=2, lineno=3871)
DEBUG:numba.core.byteflow:stack ['$14load_global.5']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=3871)
DEBUG:numba.core.byteflow:stack ['$16load_method.6']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_ATTR(arg=3, lineno=3871)
DEBUG:numba.core.byteflow:stack ['$16load_method.6', '$arr18.7']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=CALL_METHOD(arg=1, lineno=3871)
DEBUG:numba.core.byteflow:stack ['$16load_method.6', '$20load_attr.8']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=GET_ITER(arg=None, lineno=3871)
DEBUG:numba.core.byteflow:stack ['$22call_method.9']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=26, stack=('$24get_iter.10',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=26 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi26.0']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=FOR_ITER(arg=12, lineno=3871)
DEBUG:numba.core.byteflow:stack ['$phi26.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=('$phi26.0', '$26for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=28 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_FAST(arg=2, lineno=3873)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=3873)
DEBUG:numba.core.byteflow:stack ['$arr40.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=28 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi28.0', '$phi28.1']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=STORE_FAST(arg=3, lineno=3871)
DEBUG:numba.core.byteflow:stack ['$phi28.0', '$phi28.1']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=3872)
DEBUG:numba.core.byteflow:stack ['$phi28.0']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_FAST(arg=2, lineno=3872)
DEBUG:numba.core.byteflow:stack ['$phi28.0', '$const30.2']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_FAST(arg=3, lineno=3872)
DEBUG:numba.core.byteflow:stack ['$phi28.0', '$const30.2', '$arr32.3']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=STORE_SUBSCR(arg=None, lineno=3872)
DEBUG:numba.core.byteflow:stack ['$phi28.0', '$const30.2', '$arr32.3', '$idx34.4']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=JUMP_ABSOLUTE(arg=26, lineno=3872)
DEBUG:numba.core.byteflow:stack ['$phi28.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=26, stack=('$phi28.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=26 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=1): {'$phi26.0'},
             State(pc_initial=28 nstack_initial=2): {'$phi28.1'},
             State(pc_initial=40 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi26.0': State(pc_initial=0 nstack_initial=0),
 '$phi28.1': State(pc_initial=26 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi26.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=2))},
             '$phi28.0': {('$phi26.0', State(pc_initial=26 nstack_initial=1))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi26.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi26.0', State(pc_initial=26 nstack_initial=1))},
             '$phi28.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi26.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi26.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.0': {('$24get_iter.10',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi26.0': {('$24get_iter.10', State(pc_initial=0 nstack_initial=0))},
 '$phi28.1': {('$26for_iter.2', State(pc_initial=26 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi26.0': '$24get_iter.10'},
             State(pc_initial=26 nstack_initial=1): {'$phi28.1': '$26for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$shape6.2'}), (8, {'res': '$dtype8.3'}), (10, {'func': '$4load_method.1', 'args': ['$shape6.2', '$dtype8.3'], 'res': '$10call_method.4'}), (12, {'value': '$10call_method.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_method.6'}), (18, {'res': '$arr18.7'}), (20, {'item': '$arr18.7', 'res': '$20load_attr.8'}), (22, {'func': '$16load_method.6', 'args': ['$20load_attr.8'], 'res': '$22call_method.9'}), (24, {'value': '$22call_method.9', 'res': '$24get_iter.10'})), outgoing_phis={'$phi26.0': '$24get_iter.10'}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ('$24get_iter.10',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=26 nstack_initial=1):
AdaptBlockInfo(insts=((26, {'iterator': '$phi26.0', 'pair': '$26for_iter.1', 'indval': '$26for_iter.2', 'pred': '$26for_iter.3'}),), outgoing_phis={'$phi28.1': '$26for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: (), 28: ('$phi26.0', '$26for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=28 nstack_initial=2):
AdaptBlockInfo(insts=((28, {'value': '$phi28.1'}), (30, {'res': '$const30.2'}), (32, {'res': '$arr32.3'}), (34, {'res': '$idx34.4'}), (36, {'target': '$arr32.3', 'index': '$idx34.4', 'value': '$const30.2'}), (38, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ('$phi28.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$arr40.0'}), (42, {'retval': '$arr40.0', 'castval': '$42return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_method.1']
    arr = call $4load_method.1(shape, dtype, func=$4load_method.1, args=[Var(shape, arrayobj.py:3870), Var(dtype, arrayobj.py:3870)], kws=(), vararg=None, target=None) ['$4load_method.1', 'arr', 'dtype', 'shape']
    $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$14load_global.5']
    $16load_method.6 = getattr(value=$14load_global.5, attr=ndindex) ['$14load_global.5', '$16load_method.6']
    $20load_attr.8 = getattr(value=arr, attr=shape) ['$20load_attr.8', 'arr']
    $22call_method.9 = call $16load_method.6($20load_attr.8, func=$16load_method.6, args=[Var($20load_attr.8, arrayobj.py:3871)], kws=(), vararg=None, target=None) ['$16load_method.6', '$20load_attr.8', '$22call_method.9']
    $24get_iter.10 = getiter(value=$22call_method.9) ['$22call_method.9', '$24get_iter.10']
    $phi26.0 = $24get_iter.10                ['$24get_iter.10', '$phi26.0']
    jump 26                                  []
label 26:
    $26for_iter.1 = iternext(value=$phi26.0) ['$26for_iter.1', '$phi26.0']
    $26for_iter.2 = pair_first(value=$26for_iter.1) ['$26for_iter.1', '$26for_iter.2']
    $26for_iter.3 = pair_second(value=$26for_iter.1) ['$26for_iter.1', '$26for_iter.3']
    $phi28.1 = $26for_iter.2                 ['$26for_iter.2', '$phi28.1']
    branch $26for_iter.3, 28, 40             ['$26for_iter.3']
label 28:
    idx = $phi28.1                           ['$phi28.1', 'idx']
    $const30.2 = const(int, 1)               ['$const30.2']
    arr[idx] = $const30.2                    ['$const30.2', 'arr', 'idx']
    jump 26                                  []
label 40:
    $42return_value.1 = cast(value=arr)      ['$42return_value.1', 'arr']
    return $42return_value.1                 ['$42return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6CE22B50>
DEBUG:numba.core.ssa:on stmt: shape = arg(0, name=shape)
DEBUG:numba.core.ssa:on stmt: dtype = arg(1, name=dtype)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=empty)
DEBUG:numba.core.ssa:on stmt: arr = call $4load_method.1(shape, dtype, func=$4load_method.1, args=[Var(shape, arrayobj.py:3870), Var(dtype, arrayobj.py:3870)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $16load_method.6 = getattr(value=$14load_global.5, attr=ndindex)
DEBUG:numba.core.ssa:on stmt: $20load_attr.8 = getattr(value=arr, attr=shape)
DEBUG:numba.core.ssa:on stmt: $22call_method.9 = call $16load_method.6($20load_attr.8, func=$16load_method.6, args=[Var($20load_attr.8, arrayobj.py:3871)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $24get_iter.10 = getiter(value=$22call_method.9)
DEBUG:numba.core.ssa:on stmt: $phi26.0 = $24get_iter.10
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block analysis pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6CE22B50>
DEBUG:numba.core.ssa:on stmt: $26for_iter.1 = iternext(value=$phi26.0)
DEBUG:numba.core.ssa:on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
DEBUG:numba.core.ssa:on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi28.1 = $26for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $26for_iter.3, 28, 40
DEBUG:numba.core.ssa:==== SSA block analysis pass on 28
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6CE22B50>
DEBUG:numba.core.ssa:on stmt: idx = $phi28.1
DEBUG:numba.core.ssa:on stmt: $const30.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: arr[idx] = $const30.2
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block analysis pass on 40
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6CE22B50>
DEBUG:numba.core.ssa:on stmt: $42return_value.1 = cast(value=arr)
DEBUG:numba.core.ssa:on stmt: return $42return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$14load_global.5': [<numba.core.ir.Assign object at 0x0000029B6CAB1A60>],
             '$16load_method.6': [<numba.core.ir.Assign object at 0x0000029B6CAB1820>],
             '$20load_attr.8': [<numba.core.ir.Assign object at 0x0000029B6CAB1250>],
             '$22call_method.9': [<numba.core.ir.Assign object at 0x0000029B6C571940>],
             '$24get_iter.10': [<numba.core.ir.Assign object at 0x0000029B6C5715E0>],
             '$26for_iter.1': [<numba.core.ir.Assign object at 0x0000029B68B70460>],
             '$26for_iter.2': [<numba.core.ir.Assign object at 0x0000029B6C124EB0>],
             '$26for_iter.3': [<numba.core.ir.Assign object at 0x0000029B6C0DD0D0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000029B6C088490>],
             '$42return_value.1': [<numba.core.ir.Assign object at 0x0000029B6B8DED30>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x0000029B6C088100>],
             '$const30.2': [<numba.core.ir.Assign object at 0x0000029B6B8C4AC0>],
             '$phi26.0': [<numba.core.ir.Assign object at 0x0000029B6CAB11F0>],
             '$phi28.1': [<numba.core.ir.Assign object at 0x0000029B6C5717F0>],
             'arr': [<numba.core.ir.Assign object at 0x0000029B6CAB1D00>],
             'dtype': [<numba.core.ir.Assign object at 0x0000029B6C088520>],
             'idx': [<numba.core.ir.Assign object at 0x0000029B6B8C4C70>],
             'shape': [<numba.core.ir.Assign object at 0x0000029B6B8F5730>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$tmp04.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG:numba.core.byteflow:stack ['$8call_function.3']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'tmp0', 'tmp1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6CE22D00>
DEBUG:numba.core.ssa:on stmt: tmp0 = arg(0, name=tmp0)
DEBUG:numba.core.ssa:on stmt: tmp1 = arg(1, name=tmp1)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG:numba.core.ssa:on stmt: $8call_function.3 = call $2load_global.0(tmp0, tmp1, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG:numba.core.ssa:on stmt: return $10return_value.4
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x0000029B6CAC05E0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000029B6C775EB0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x0000029B6CAC08E0>],
             'tmp0': [<numba.core.ir.Assign object at 0x0000029B6CC8FB20>],
             'tmp1': [<numba.core.ir.Assign object at 0x0000029B6CE3C9A0>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$tmp04.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$tmp04.1', '$dtype6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG:numba.core.byteflow:stack ['$8call_function.3']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$dtype6.2'}), (8, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$dtype6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'dtype', 'tmp0']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D6C47F0>
DEBUG:numba.core.ssa:on stmt: tmp0 = arg(0, name=tmp0)
DEBUG:numba.core.ssa:on stmt: dtype = arg(1, name=dtype)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG:numba.core.ssa:on stmt: $8call_function.3 = call $2load_global.0(tmp0, dtype, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG:numba.core.ssa:on stmt: return $10return_value.4
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x0000029B6D6C2220>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000029B6D6C2A00>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x0000029B6D6C22B0>],
             'dtype': [<numba.core.ir.Assign object at 0x0000029B6D6C6100>],
             'tmp0': [<numba.core.ir.Assign object at 0x0000029B6D6C6760>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=663)
           2	LOAD_FAST(arg=0, lineno=663)
           4	GET_ITER(arg=None, lineno=663)
>          6	FOR_ITER(arg=18, lineno=663)
           8	STORE_FAST(arg=2, lineno=663)
          10	LOAD_FAST(arg=2, lineno=664)
          12	LOAD_FAST(arg=1, lineno=664)
          14	COMPARE_OP(arg=2, lineno=664)
          16	POP_JUMP_IF_FALSE(arg=6, lineno=664)
          18	POP_TOP(arg=None, lineno=665)
          20	LOAD_CONST(arg=1, lineno=665)
          22	RETURN_VALUE(arg=None, lineno=665)
          24	JUMP_ABSOLUTE(arg=6, lineno=665)
>         26	LOAD_CONST(arg=2, lineno=666)
          28	RETURN_VALUE(arg=None, lineno=666)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=663)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=663)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=GET_ITER(arg=None, lineno=663)
DEBUG:numba.core.byteflow:stack ['$lst2.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=6, stack=('$4get_iter.1',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=6 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi6.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=FOR_ITER(arg=18, lineno=663)
DEBUG:numba.core.byteflow:stack ['$phi6.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=8, stack=('$phi6.0', '$6for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=8 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_CONST(arg=2, lineno=666)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=28, inst=RETURN_VALUE(arg=None, lineno=666)
DEBUG:numba.core.byteflow:stack ['$const26.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=8 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi8.0', '$phi8.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=STORE_FAST(arg=2, lineno=663)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_FAST(arg=2, lineno=664)
DEBUG:numba.core.byteflow:stack ['$phi8.0']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=664)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$elem10.2']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=COMPARE_OP(arg=2, lineno=664)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$elem10.2', '$value12.3']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=6, lineno=664)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$14compare_op.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=18, stack=('$phi8.0',), blockstack=(), npush=0), Edge(pc=6, stack=('$phi8.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=18 nstack_initial=1), State(pc_initial=6 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi18.0']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=POP_TOP(arg=None, lineno=665)
DEBUG:numba.core.byteflow:stack ['$phi18.0']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_CONST(arg=1, lineno=665)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=665)
DEBUG:numba.core.byteflow:stack ['$const20.1']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=6 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=6 nstack_initial=1): {'$phi6.0'},
             State(pc_initial=8 nstack_initial=2): {'$phi8.1'},
             State(pc_initial=18 nstack_initial=1): set(),
             State(pc_initial=26 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi6.0': State(pc_initial=0 nstack_initial=0),
 '$phi8.1': State(pc_initial=6 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$phi8.0', State(pc_initial=8 nstack_initial=2))},
             '$phi6.0': {('$4get_iter.1', State(pc_initial=0 nstack_initial=0)),
                         ('$phi8.0', State(pc_initial=8 nstack_initial=2))},
             '$phi8.0': {('$phi6.0', State(pc_initial=6 nstack_initial=1))},
             '$phi8.1': {('$6for_iter.2',
                          State(pc_initial=6 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$phi6.0', State(pc_initial=6 nstack_initial=1))},
             '$phi6.0': {('$4get_iter.1', State(pc_initial=0 nstack_initial=0)),
                         ('$phi6.0', State(pc_initial=6 nstack_initial=1))},
             '$phi8.0': {('$4get_iter.1',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.1': {('$6for_iter.2',
                          State(pc_initial=6 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$4get_iter.1',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi6.0': {('$4get_iter.1',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.0': {('$4get_iter.1',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.1': {('$6for_iter.2',
                          State(pc_initial=6 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$4get_iter.1',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi6.0': {('$4get_iter.1',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.0': {('$4get_iter.1',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.1': {('$6for_iter.2',
                          State(pc_initial=6 nstack_initial=1))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi6.0': {('$4get_iter.1', State(pc_initial=0 nstack_initial=0))},
 '$phi8.1': {('$6for_iter.2', State(pc_initial=6 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi6.0': '$4get_iter.1'},
             State(pc_initial=6 nstack_initial=1): {'$phi8.1': '$6for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$lst2.0'}), (4, {'value': '$lst2.0', 'res': '$4get_iter.1'})), outgoing_phis={'$phi6.0': '$4get_iter.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={6: ('$4get_iter.1',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=6 nstack_initial=1):
AdaptBlockInfo(insts=((6, {'iterator': '$phi6.0', 'pair': '$6for_iter.1', 'indval': '$6for_iter.2', 'pred': '$6for_iter.3'}),), outgoing_phis={'$phi8.1': '$6for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 8: ('$phi6.0', '$6for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=8 nstack_initial=2):
AdaptBlockInfo(insts=((8, {'value': '$phi8.1'}), (10, {'res': '$elem10.2'}), (12, {'res': '$value12.3'}), (14, {'lhs': '$elem10.2', 'rhs': '$value12.3', 'res': '$14compare_op.4'}), (16, {'pred': '$14compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$phi8.0',), 6: ('$phi8.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=18 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'res': '$const20.1'}), (22, {'retval': '$const20.1', 'castval': '$22return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'retval': '$const26.0', 'castval': '$28return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    lst = arg(0, name=lst)                   ['lst']
    value = arg(1, name=value)               ['value']
    $4get_iter.1 = getiter(value=lst)        ['$4get_iter.1', 'lst']
    $phi6.0 = $4get_iter.1                   ['$4get_iter.1', '$phi6.0']
    jump 6                                   []
label 6:
    $6for_iter.1 = iternext(value=$phi6.0)   ['$6for_iter.1', '$phi6.0']
    $6for_iter.2 = pair_first(value=$6for_iter.1) ['$6for_iter.1', '$6for_iter.2']
    $6for_iter.3 = pair_second(value=$6for_iter.1) ['$6for_iter.1', '$6for_iter.3']
    $phi8.1 = $6for_iter.2                   ['$6for_iter.2', '$phi8.1']
    branch $6for_iter.3, 8, 26               ['$6for_iter.3']
label 8:
    elem = $phi8.1                           ['$phi8.1', 'elem']
    $14compare_op.4 = elem == value          ['$14compare_op.4', 'elem', 'value']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.4, func=bool16, args=(Var($14compare_op.4, listobj.py:664),), kws=(), vararg=None, target=None) ['$14compare_op.4', '$16pred', 'bool16']
    branch $16pred, 18, 6                    ['$16pred']
label 18:
    $const20.1 = const(bool, True)           ['$const20.1']
    $22return_value.2 = cast(value=$const20.1) ['$22return_value.2', '$const20.1']
    return $22return_value.2                 ['$22return_value.2']
label 26:
    $const26.0 = const(bool, False)          ['$const26.0']
    $28return_value.1 = cast(value=$const26.0) ['$28return_value.1', '$const26.0']
    return $28return_value.1                 ['$28return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C82FD60>
DEBUG:numba.core.ssa:on stmt: lst = arg(0, name=lst)
DEBUG:numba.core.ssa:on stmt: value = arg(1, name=value)
DEBUG:numba.core.ssa:on stmt: $4get_iter.1 = getiter(value=lst)
DEBUG:numba.core.ssa:on stmt: $phi6.0 = $4get_iter.1
DEBUG:numba.core.ssa:on stmt: jump 6
DEBUG:numba.core.ssa:==== SSA block analysis pass on 6
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C82FD60>
DEBUG:numba.core.ssa:on stmt: $6for_iter.1 = iternext(value=$phi6.0)
DEBUG:numba.core.ssa:on stmt: $6for_iter.2 = pair_first(value=$6for_iter.1)
DEBUG:numba.core.ssa:on stmt: $6for_iter.3 = pair_second(value=$6for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi8.1 = $6for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $6for_iter.3, 8, 26
DEBUG:numba.core.ssa:==== SSA block analysis pass on 8
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C82FD60>
DEBUG:numba.core.ssa:on stmt: elem = $phi8.1
DEBUG:numba.core.ssa:on stmt: $14compare_op.4 = elem == value
DEBUG:numba.core.ssa:on stmt: bool16 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $16pred = call bool16($14compare_op.4, func=bool16, args=(Var($14compare_op.4, listobj.py:664),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $16pred, 18, 6
DEBUG:numba.core.ssa:==== SSA block analysis pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C82FD60>
DEBUG:numba.core.ssa:on stmt: $const20.1 = const(bool, True)
DEBUG:numba.core.ssa:on stmt: $22return_value.2 = cast(value=$const20.1)
DEBUG:numba.core.ssa:on stmt: return $22return_value.2
DEBUG:numba.core.ssa:==== SSA block analysis pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6C82FD60>
DEBUG:numba.core.ssa:on stmt: $const26.0 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: $28return_value.1 = cast(value=$const26.0)
DEBUG:numba.core.ssa:on stmt: return $28return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$14compare_op.4': [<numba.core.ir.Assign object at 0x0000029B6C8376A0>],
             '$16pred': [<numba.core.ir.Assign object at 0x0000029B6C837910>],
             '$22return_value.2': [<numba.core.ir.Assign object at 0x0000029B6C837C70>],
             '$28return_value.1': [<numba.core.ir.Assign object at 0x0000029B6C83D0D0>],
             '$4get_iter.1': [<numba.core.ir.Assign object at 0x0000029B6D6A1A30>],
             '$6for_iter.1': [<numba.core.ir.Assign object at 0x0000029B6D6A1D60>],
             '$6for_iter.2': [<numba.core.ir.Assign object at 0x0000029B6D6A1E80>],
             '$6for_iter.3': [<numba.core.ir.Assign object at 0x0000029B6D6A1FA0>],
             '$const20.1': [<numba.core.ir.Assign object at 0x0000029B6C837AF0>],
             '$const26.0': [<numba.core.ir.Assign object at 0x0000029B6C837F10>],
             '$phi6.0': [<numba.core.ir.Assign object at 0x0000029B6D6A1940>],
             '$phi8.1': [<numba.core.ir.Assign object at 0x0000029B6D6A1CA0>],
             'bool16': [<numba.core.ir.Assign object at 0x0000029B6C8377F0>],
             'elem': [<numba.core.ir.Assign object at 0x0000029B6C8372B0>],
             'lst': [<numba.core.ir.Assign object at 0x0000029B6D6A1040>],
             'value': [<numba.core.ir.Assign object at 0x0000029B6D6A1790>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=468)
           2	LOAD_FAST(arg=0, lineno=468)
           4	LOAD_CONST(arg=0, lineno=468)
           6	IS_OP(arg=0, lineno=468)
           8	STORE_FAST(arg=2, lineno=468)
          10	LOAD_FAST(arg=1, lineno=469)
          12	LOAD_CONST(arg=0, lineno=469)
          14	IS_OP(arg=0, lineno=469)
          16	STORE_FAST(arg=3, lineno=469)
          18	LOAD_FAST(arg=2, lineno=470)
          20	POP_JUMP_IF_TRUE(arg=26, lineno=470)
          22	LOAD_FAST(arg=3, lineno=470)
          24	POP_JUMP_IF_FALSE(arg=42, lineno=470)
>         26	LOAD_FAST(arg=2, lineno=471)
          28	POP_JUMP_IF_FALSE(arg=38, lineno=471)
          30	LOAD_FAST(arg=3, lineno=471)
          32	POP_JUMP_IF_FALSE(arg=38, lineno=471)
          34	LOAD_CONST(arg=1, lineno=472)
          36	RETURN_VALUE(arg=None, lineno=472)
>         38	LOAD_CONST(arg=2, lineno=474)
          40	RETURN_VALUE(arg=None, lineno=474)
>         42	LOAD_GLOBAL(arg=0, lineno=476)
          44	LOAD_FAST(arg=0, lineno=476)
          46	CALL_FUNCTION(arg=1, lineno=476)
          48	STORE_FAST(arg=0, lineno=476)
          50	LOAD_GLOBAL(arg=0, lineno=477)
          52	LOAD_FAST(arg=1, lineno=477)
          54	CALL_FUNCTION(arg=1, lineno=477)
          56	STORE_FAST(arg=1, lineno=477)
          58	LOAD_GLOBAL(arg=1, lineno=478)
          60	LOAD_FAST(arg=0, lineno=478)
          62	CALL_FUNCTION(arg=1, lineno=478)
          64	LOAD_GLOBAL(arg=1, lineno=478)
          66	LOAD_FAST(arg=1, lineno=478)
          68	CALL_FUNCTION(arg=1, lineno=478)
          70	COMPARE_OP(arg=3, lineno=478)
          72	POP_JUMP_IF_FALSE(arg=78, lineno=478)
          74	LOAD_CONST(arg=2, lineno=479)
          76	RETURN_VALUE(arg=None, lineno=479)
>         78	LOAD_GLOBAL(arg=2, lineno=480)
          80	LOAD_FAST(arg=0, lineno=480)
          82	LOAD_CONST(arg=3, lineno=480)
          84	LOAD_FAST(arg=1, lineno=480)
          86	LOAD_CONST(arg=3, lineno=480)
          88	LOAD_GLOBAL(arg=1, lineno=480)
          90	LOAD_FAST(arg=0, lineno=480)
          92	CALL_FUNCTION(arg=1, lineno=480)
          94	CALL_FUNCTION(arg=5, lineno=480)
          96	LOAD_CONST(arg=3, lineno=480)
          98	COMPARE_OP(arg=2, lineno=480)
         100	RETURN_VALUE(arg=None, lineno=480)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=468)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=468)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_CONST(arg=0, lineno=468)
DEBUG:numba.core.byteflow:stack ['$a2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=IS_OP(arg=0, lineno=468)
DEBUG:numba.core.byteflow:stack ['$a2.0', '$const4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=STORE_FAST(arg=2, lineno=468)
DEBUG:numba.core.byteflow:stack ['$6is_op.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=469)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_CONST(arg=0, lineno=469)
DEBUG:numba.core.byteflow:stack ['$b10.3']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=IS_OP(arg=0, lineno=469)
DEBUG:numba.core.byteflow:stack ['$b10.3', '$const12.4']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=3, lineno=469)
DEBUG:numba.core.byteflow:stack ['$14is_op.5']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=470)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=20, inst=POP_JUMP_IF_TRUE(arg=26, lineno=470)
DEBUG:numba.core.byteflow:stack ['$a_none18.6']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=22, stack=(), blockstack=(), npush=0), Edge(pc=26, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=22 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_FAST(arg=3, lineno=470)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=42, lineno=470)
DEBUG:numba.core.byteflow:stack ['$b_none22.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=471)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=38, lineno=471)
DEBUG:numba.core.byteflow:stack ['$a_none26.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=42 nstack_initial=0), State(pc_initial=30 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=30 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_GLOBAL(arg=0, lineno=476)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_FAST(arg=0, lineno=476)
DEBUG:numba.core.byteflow:stack ['$42load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=CALL_FUNCTION(arg=1, lineno=476)
DEBUG:numba.core.byteflow:stack ['$42load_global.0', '$a44.1']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=STORE_FAST(arg=0, lineno=476)
DEBUG:numba.core.byteflow:stack ['$46call_function.2']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_GLOBAL(arg=0, lineno=477)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_FAST(arg=1, lineno=477)
DEBUG:numba.core.byteflow:stack ['$50load_global.3']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=477)
DEBUG:numba.core.byteflow:stack ['$50load_global.3', '$b52.4']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=STORE_FAST(arg=1, lineno=477)
DEBUG:numba.core.byteflow:stack ['$54call_function.5']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_GLOBAL(arg=1, lineno=478)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_FAST(arg=0, lineno=478)
DEBUG:numba.core.byteflow:stack ['$58load_global.6']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=CALL_FUNCTION(arg=1, lineno=478)
DEBUG:numba.core.byteflow:stack ['$58load_global.6', '$a60.7']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_GLOBAL(arg=1, lineno=478)
DEBUG:numba.core.byteflow:stack ['$62call_function.8']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=478)
DEBUG:numba.core.byteflow:stack ['$62call_function.8', '$64load_global.9']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=CALL_FUNCTION(arg=1, lineno=478)
DEBUG:numba.core.byteflow:stack ['$62call_function.8', '$64load_global.9', '$b66.10']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=COMPARE_OP(arg=3, lineno=478)
DEBUG:numba.core.byteflow:stack ['$62call_function.8', '$68call_function.11']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=78, lineno=478)
DEBUG:numba.core.byteflow:stack ['$70compare_op.12']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=78, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=38 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_FAST(arg=3, lineno=471)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=38, lineno=471)
DEBUG:numba.core.byteflow:stack ['$b_none30.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=38 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=34 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=474)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=474)
DEBUG:numba.core.byteflow:stack ['$const38.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=34 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_CONST(arg=2, lineno=479)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=76, inst=RETURN_VALUE(arg=None, lineno=479)
DEBUG:numba.core.byteflow:stack ['$const74.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=34 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=78, inst=LOAD_GLOBAL(arg=2, lineno=480)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=480)
DEBUG:numba.core.byteflow:stack ['$78load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=LOAD_CONST(arg=3, lineno=480)
DEBUG:numba.core.byteflow:stack ['$78load_global.0', '$a80.1']
DEBUG:numba.core.byteflow:dispatch pc=84, inst=LOAD_FAST(arg=1, lineno=480)
DEBUG:numba.core.byteflow:stack ['$78load_global.0', '$a80.1', '$const82.2']
DEBUG:numba.core.byteflow:dispatch pc=86, inst=LOAD_CONST(arg=3, lineno=480)
DEBUG:numba.core.byteflow:stack ['$78load_global.0', '$a80.1', '$const82.2', '$b84.3']
DEBUG:numba.core.byteflow:dispatch pc=88, inst=LOAD_GLOBAL(arg=1, lineno=480)
DEBUG:numba.core.byteflow:stack ['$78load_global.0', '$a80.1', '$const82.2', '$b84.3', '$const86.4']
DEBUG:numba.core.byteflow:dispatch pc=90, inst=LOAD_FAST(arg=0, lineno=480)
DEBUG:numba.core.byteflow:stack ['$78load_global.0', '$a80.1', '$const82.2', '$b84.3', '$const86.4', '$88load_global.5']
DEBUG:numba.core.byteflow:dispatch pc=92, inst=CALL_FUNCTION(arg=1, lineno=480)
DEBUG:numba.core.byteflow:stack ['$78load_global.0', '$a80.1', '$const82.2', '$b84.3', '$const86.4', '$88load_global.5', '$a90.6']
DEBUG:numba.core.byteflow:dispatch pc=94, inst=CALL_FUNCTION(arg=5, lineno=480)
DEBUG:numba.core.byteflow:stack ['$78load_global.0', '$a80.1', '$const82.2', '$b84.3', '$const86.4', '$92call_function.7']
DEBUG:numba.core.byteflow:dispatch pc=96, inst=LOAD_CONST(arg=3, lineno=480)
DEBUG:numba.core.byteflow:stack ['$94call_function.8']
DEBUG:numba.core.byteflow:dispatch pc=98, inst=COMPARE_OP(arg=2, lineno=480)
DEBUG:numba.core.byteflow:stack ['$94call_function.8', '$const96.9']
DEBUG:numba.core.byteflow:dispatch pc=100, inst=RETURN_VALUE(arg=None, lineno=480)
DEBUG:numba.core.byteflow:stack ['$98compare_op.10']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=472)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=472)
DEBUG:numba.core.byteflow:stack ['$const34.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=38 nstack_initial=0)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$a2.0', 'rhs': '$const4.1', 'res': '$6is_op.2'}), (8, {'value': '$6is_op.2'}), (10, {'res': '$b10.3'}), (12, {'res': '$const12.4'}), (14, {'lhs': '$b10.3', 'rhs': '$const12.4', 'res': '$14is_op.5'}), (16, {'value': '$14is_op.5'}), (18, {'res': '$a_none18.6'}), (20, {'pred': '$a_none18.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: (), 26: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$b_none22.0'}), (24, {'pred': '$b_none22.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 42: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$a_none26.0'}), (28, {'pred': '$a_none26.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 38: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$b_none30.0'}), (32, {'pred': '$b_none30.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 38: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$const34.0'}), (36, {'retval': '$const34.0', 'castval': '$36return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {'res': '$const38.0'}), (40, {'retval': '$const38.0', 'castval': '$40return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$42load_global.0'}), (44, {'res': '$a44.1'}), (46, {'func': '$42load_global.0', 'args': ['$a44.1'], 'res': '$46call_function.2'}), (48, {'value': '$46call_function.2'}), (50, {'res': '$50load_global.3'}), (52, {'res': '$b52.4'}), (54, {'func': '$50load_global.3', 'args': ['$b52.4'], 'res': '$54call_function.5'}), (56, {'value': '$54call_function.5'}), (58, {'res': '$58load_global.6'}), (60, {'res': '$a60.7'}), (62, {'func': '$58load_global.6', 'args': ['$a60.7'], 'res': '$62call_function.8'}), (64, {'res': '$64load_global.9'}), (66, {'res': '$b66.10'}), (68, {'func': '$64load_global.9', 'args': ['$b66.10'], 'res': '$68call_function.11'}), (70, {'lhs': '$62call_function.8', 'rhs': '$68call_function.11', 'res': '$70compare_op.12'}), (72, {'pred': '$70compare_op.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 78: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'retval': '$const74.0', 'castval': '$76return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$a80.1'}), (82, {'res': '$const82.2'}), (84, {'res': '$b84.3'}), (86, {'res': '$const86.4'}), (88, {'res': '$88load_global.5'}), (90, {'res': '$a90.6'}), (92, {'func': '$88load_global.5', 'args': ['$a90.6'], 'res': '$92call_function.7'}), (94, {'func': '$78load_global.0', 'args': ['$a80.1', '$const82.2', '$b84.3', '$const86.4', '$92call_function.7'], 'res': '$94call_function.8'}), (96, {'res': '$const96.9'}), (98, {'lhs': '$94call_function.8', 'rhs': '$const96.9', 'res': '$98compare_op.10'}), (100, {'retval': '$98compare_op.10', 'castval': '$100return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $const4.1 = const(NoneType, None)        ['$const4.1']
    a_none = a is $const4.1                  ['$const4.1', 'a', 'a_none']
    $const12.4 = const(NoneType, None)       ['$const12.4']
    b_none = b is $const12.4                 ['$const12.4', 'b', 'b_none']
    bool20 = global(bool: <class 'bool'>)    ['bool20']
    $20pred = call bool20(a_none, func=bool20, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None) ['$20pred', 'a_none', 'bool20']
    branch $20pred, 26, 22                   ['$20pred']
label 22:
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24(b_none, func=bool24, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None) ['$24pred', 'b_none', 'bool24']
    branch $24pred, 26, 42                   ['$24pred']
label 26:
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28(a_none, func=bool28, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None) ['$28pred', 'a_none', 'bool28']
    branch $28pred, 30, 38                   ['$28pred']
label 30:
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32(b_none, func=bool32, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None) ['$32pred', 'b_none', 'bool32']
    branch $32pred, 34, 38                   ['$32pred']
label 34:
    $const34.0 = const(bool, True)           ['$const34.0']
    $36return_value.1 = cast(value=$const34.0) ['$36return_value.1', '$const34.0']
    return $36return_value.1                 ['$36return_value.1']
label 38:
    $const38.0 = const(bool, False)          ['$const38.0']
    $40return_value.1 = cast(value=$const38.0) ['$40return_value.1', '$const38.0']
    return $40return_value.1                 ['$40return_value.1']
label 42:
    $42load_global.0 = global(str: <class 'str'>) ['$42load_global.0']
    a = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None) ['$42load_global.0', 'a', 'a']
    $50load_global.3 = global(str: <class 'str'>) ['$50load_global.3']
    b = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None) ['$50load_global.3', 'b', 'b']
    $58load_global.6 = global(len: <built-in function len>) ['$58load_global.6']
    $62call_function.8 = call $58load_global.6(a, func=$58load_global.6, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None) ['$58load_global.6', '$62call_function.8', 'a']
    $64load_global.9 = global(len: <built-in function len>) ['$64load_global.9']
    $68call_function.11 = call $64load_global.9(b, func=$64load_global.9, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None) ['$64load_global.9', '$68call_function.11', 'b']
    $70compare_op.12 = $62call_function.8 != $68call_function.11 ['$62call_function.8', '$68call_function.11', '$70compare_op.12']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.12, func=bool72, args=(Var($70compare_op.12, unicode.py:478),), kws=(), vararg=None, target=None) ['$70compare_op.12', '$72pred', 'bool72']
    branch $72pred, 74, 78                   ['$72pred']
label 74:
    $const74.0 = const(bool, False)          ['$const74.0']
    $76return_value.1 = cast(value=$const74.0) ['$76return_value.1', '$const74.0']
    return $76return_value.1                 ['$76return_value.1']
label 78:
    $78load_global.0 = global(_cmp_region: <function _cmp_region at 0x0000029B6B47C430>) ['$78load_global.0']
    $const82.2 = const(int, 0)               ['$const82.2']
    $const86.4 = const(int, 0)               ['$const86.4']
    $88load_global.5 = global(len: <built-in function len>) ['$88load_global.5']
    $92call_function.7 = call $88load_global.5(a, func=$88load_global.5, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None) ['$88load_global.5', '$92call_function.7', 'a']
    $94call_function.8 = call $78load_global.0(a, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a, unicode.py:468), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None) ['$78load_global.0', '$92call_function.7', '$94call_function.8', '$const82.2', '$const86.4', 'a', 'b']
    $const96.9 = const(int, 0)               ['$const96.9']
    $98compare_op.10 = $94call_function.8 == $const96.9 ['$94call_function.8', '$98compare_op.10', '$const96.9']
    $100return_value.11 = cast(value=$98compare_op.10) ['$100return_value.11', '$98compare_op.10']
    return $100return_value.11               ['$100return_value.11']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D6D2AC0>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: a_none = a is $const4.1
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: b_none = b is $const12.4
DEBUG:numba.core.ssa:on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $20pred = call bool20(a_none, func=bool20, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $20pred, 26, 22
DEBUG:numba.core.ssa:==== SSA block analysis pass on 22
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D6D2AC0>
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24(b_none, func=bool24, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 42
DEBUG:numba.core.ssa:==== SSA block analysis pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D6D2AC0>
DEBUG:numba.core.ssa:on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $28pred = call bool28(a_none, func=bool28, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $28pred, 30, 38
DEBUG:numba.core.ssa:==== SSA block analysis pass on 30
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D6D2AC0>
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32(b_none, func=bool32, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 38
DEBUG:numba.core.ssa:==== SSA block analysis pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D6D2AC0>
DEBUG:numba.core.ssa:on stmt: $const34.0 = const(bool, True)
DEBUG:numba.core.ssa:on stmt: $36return_value.1 = cast(value=$const34.0)
DEBUG:numba.core.ssa:on stmt: return $36return_value.1
DEBUG:numba.core.ssa:==== SSA block analysis pass on 38
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D6D2AC0>
DEBUG:numba.core.ssa:on stmt: $const38.0 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: $40return_value.1 = cast(value=$const38.0)
DEBUG:numba.core.ssa:on stmt: return $40return_value.1
DEBUG:numba.core.ssa:==== SSA block analysis pass on 42
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D6D2AC0>
DEBUG:numba.core.ssa:on stmt: $42load_global.0 = global(str: <class 'str'>)
DEBUG:numba.core.ssa:on stmt: a = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $50load_global.3 = global(str: <class 'str'>)
DEBUG:numba.core.ssa:on stmt: b = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $58load_global.6 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $62call_function.8 = call $58load_global.6(a, func=$58load_global.6, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $64load_global.9 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $68call_function.11 = call $64load_global.9(b, func=$64load_global.9, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $70compare_op.12 = $62call_function.8 != $68call_function.11
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.12, func=bool72, args=(Var($70compare_op.12, unicode.py:478),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 78
DEBUG:numba.core.ssa:==== SSA block analysis pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D6D2AC0>
DEBUG:numba.core.ssa:on stmt: $const74.0 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: $76return_value.1 = cast(value=$const74.0)
DEBUG:numba.core.ssa:on stmt: return $76return_value.1
DEBUG:numba.core.ssa:==== SSA block analysis pass on 78
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D6D2AC0>
DEBUG:numba.core.ssa:on stmt: $78load_global.0 = global(_cmp_region: <function _cmp_region at 0x0000029B6B47C430>)
DEBUG:numba.core.ssa:on stmt: $const82.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const86.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $88load_global.5 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $92call_function.7 = call $88load_global.5(a, func=$88load_global.5, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $94call_function.8 = call $78load_global.0(a, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a, unicode.py:468), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const96.9 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $98compare_op.10 = $94call_function.8 == $const96.9
DEBUG:numba.core.ssa:on stmt: $100return_value.11 = cast(value=$98compare_op.10)
DEBUG:numba.core.ssa:on stmt: return $100return_value.11
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$100return_value.11': [<numba.core.ir.Assign object at 0x0000029B6D6D4E20>],
             '$20pred': [<numba.core.ir.Assign object at 0x0000029B6D6D8910>],
             '$24pred': [<numba.core.ir.Assign object at 0x0000029B6D6D2B80>],
             '$28pred': [<numba.core.ir.Assign object at 0x0000029B6D6A1670>],
             '$32pred': [<numba.core.ir.Assign object at 0x0000029B6D6DDB20>],
             '$36return_value.1': [<numba.core.ir.Assign object at 0x0000029B6D6DDEE0>],
             '$40return_value.1': [<numba.core.ir.Assign object at 0x0000029B6D6DE340>],
             '$42load_global.0': [<numba.core.ir.Assign object at 0x0000029B6D6DE5E0>],
             '$50load_global.3': [<numba.core.ir.Assign object at 0x0000029B6D6DEAC0>],
             '$58load_global.6': [<numba.core.ir.Assign object at 0x0000029B6D6DEFA0>],
             '$62call_function.8': [<numba.core.ir.Assign object at 0x0000029B6D6E02E0>],
             '$64load_global.9': [<numba.core.ir.Assign object at 0x0000029B6D6E0400>],
             '$68call_function.11': [<numba.core.ir.Assign object at 0x0000029B6D6E0700>],
             '$70compare_op.12': [<numba.core.ir.Assign object at 0x0000029B6D6E0850>],
             '$72pred': [<numba.core.ir.Assign object at 0x0000029B6D6E0AC0>],
             '$76return_value.1': [<numba.core.ir.Assign object at 0x0000029B6D6E0BE0>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x0000029B6D6E0E80>],
             '$88load_global.5': [<numba.core.ir.Assign object at 0x0000029B6D6D4580>],
             '$92call_function.7': [<numba.core.ir.Assign object at 0x0000029B6D6D4880>],
             '$94call_function.8': [<numba.core.ir.Assign object at 0x0000029B6D6D4A00>],
             '$98compare_op.10': [<numba.core.ir.Assign object at 0x0000029B6D6D4CD0>],
             '$const12.4': [<numba.core.ir.Assign object at 0x0000029B6D6DD520>],
             '$const34.0': [<numba.core.ir.Assign object at 0x0000029B6D6DDD60>],
             '$const38.0': [<numba.core.ir.Assign object at 0x0000029B6D6DE1C0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000029B6D6D8FA0>],
             '$const74.0': [<numba.core.ir.Assign object at 0x0000029B6D6DECD0>],
             '$const82.2': [<numba.core.ir.Assign object at 0x0000029B6D6D4160>],
             '$const86.4': [<numba.core.ir.Assign object at 0x0000029B6D6D4400>],
             '$const96.9': [<numba.core.ir.Assign object at 0x0000029B6D6D4B20>],
             'a': [<numba.core.ir.Assign object at 0x0000029B6D6D81C0>,
                   <numba.core.ir.Assign object at 0x0000029B6D6DE8E0>],
             'a_none': [<numba.core.ir.Assign object at 0x0000029B6D6DD190>],
             'b': [<numba.core.ir.Assign object at 0x0000029B6D6D8D00>,
                   <numba.core.ir.Assign object at 0x0000029B6D6DEDC0>],
             'b_none': [<numba.core.ir.Assign object at 0x0000029B6D6DD6D0>],
             'bool20': [<numba.core.ir.Assign object at 0x0000029B6D6D8A30>],
             'bool24': [<numba.core.ir.Assign object at 0x0000029B6D6D29D0>],
             'bool28': [<numba.core.ir.Assign object at 0x0000029B6D6A1400>],
             'bool32': [<numba.core.ir.Assign object at 0x0000029B6D6DDA00>],
             'bool72': [<numba.core.ir.Assign object at 0x0000029B6D6E09A0>]})
DEBUG:numba.core.ssa:SSA violators {'a', 'b'}
DEBUG:numba.core.ssa:Fix SSA violator on var a
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D6D28B0>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:first assign: a
DEBUG:numba.core.ssa:replaced with: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: a_none = a is $const4.1
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: b_none = b is $const12.4
DEBUG:numba.core.ssa:on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $20pred = call bool20(a_none, func=bool20, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $20pred, 26, 22
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 22
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D6D28B0>
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24(b_none, func=bool24, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 42
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D6D28B0>
DEBUG:numba.core.ssa:on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $28pred = call bool28(a_none, func=bool28, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $28pred, 30, 38
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 30
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D6D28B0>
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32(b_none, func=bool32, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 38
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D6D28B0>
DEBUG:numba.core.ssa:on stmt: $const34.0 = const(bool, True)
DEBUG:numba.core.ssa:on stmt: $36return_value.1 = cast(value=$const34.0)
DEBUG:numba.core.ssa:on stmt: return $36return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 38
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D6D28B0>
DEBUG:numba.core.ssa:on stmt: $const38.0 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: $40return_value.1 = cast(value=$const38.0)
DEBUG:numba.core.ssa:on stmt: return $40return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 42
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D6D28B0>
DEBUG:numba.core.ssa:on stmt: $42load_global.0 = global(str: <class 'str'>)
DEBUG:numba.core.ssa:on stmt: a = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:replaced with: a.1 = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $50load_global.3 = global(str: <class 'str'>)
DEBUG:numba.core.ssa:on stmt: b = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $58load_global.6 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $62call_function.8 = call $58load_global.6(a, func=$58load_global.6, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $64load_global.9 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $68call_function.11 = call $64load_global.9(b, func=$64load_global.9, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $70compare_op.12 = $62call_function.8 != $68call_function.11
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.12, func=bool72, args=(Var($70compare_op.12, unicode.py:478),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 78
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D6D28B0>
DEBUG:numba.core.ssa:on stmt: $const74.0 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: $76return_value.1 = cast(value=$const74.0)
DEBUG:numba.core.ssa:on stmt: return $76return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 78
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D6D28B0>
DEBUG:numba.core.ssa:on stmt: $78load_global.0 = global(_cmp_region: <function _cmp_region at 0x0000029B6B47C430>)
DEBUG:numba.core.ssa:on stmt: $const82.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const86.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $88load_global.5 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $92call_function.7 = call $88load_global.5(a, func=$88load_global.5, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $94call_function.8 = call $78load_global.0(a, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a, unicode.py:468), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const96.9 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $98compare_op.10 = $94call_function.8 == $const96.9
DEBUG:numba.core.ssa:on stmt: $100return_value.11 = cast(value=$98compare_op.10)
DEBUG:numba.core.ssa:on stmt: return $100return_value.11
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000029B6D6D8370>],
             42: [<numba.core.ir.Assign object at 0x0000029B6D6D8670>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D6D28B0>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: a_none = a is $const4.1
DEBUG:numba.core.ssa:find_def var='a' stmt=a_none = a is $const4.1
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: b_none = b is $const12.4
DEBUG:numba.core.ssa:on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $20pred = call bool20(a_none, func=bool20, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $20pred, 26, 22
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 22
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D6D28B0>
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24(b_none, func=bool24, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 42
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D6D28B0>
DEBUG:numba.core.ssa:on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $28pred = call bool28(a_none, func=bool28, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $28pred, 30, 38
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 30
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D6D28B0>
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32(b_none, func=bool32, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 38
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D6D28B0>
DEBUG:numba.core.ssa:on stmt: $const34.0 = const(bool, True)
DEBUG:numba.core.ssa:on stmt: $36return_value.1 = cast(value=$const34.0)
DEBUG:numba.core.ssa:on stmt: return $36return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 38
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D6D28B0>
DEBUG:numba.core.ssa:on stmt: $const38.0 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: $40return_value.1 = cast(value=$const38.0)
DEBUG:numba.core.ssa:on stmt: return $40return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 42
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D6D28B0>
DEBUG:numba.core.ssa:on stmt: $42load_global.0 = global(str: <class 'str'>)
DEBUG:numba.core.ssa:on stmt: a.1 = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def var='a' stmt=a.1 = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def_from_top label 42
DEBUG:numba.core.ssa:idom 22 from label 42
DEBUG:numba.core.ssa:find_def_from_bottom label 22
DEBUG:numba.core.ssa:find_def_from_top label 22
DEBUG:numba.core.ssa:idom 0 from label 22
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:on stmt: $50load_global.3 = global(str: <class 'str'>)
DEBUG:numba.core.ssa:on stmt: b = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $58load_global.6 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $62call_function.8 = call $58load_global.6(a, func=$58load_global.6, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def var='a' stmt=$62call_function.8 = call $58load_global.6(a, func=$58load_global.6, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:replaced with: $62call_function.8 = call $58load_global.6(a.1, func=$58load_global.6, args=[Var(a.1, unicode.py:476)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $64load_global.9 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $68call_function.11 = call $64load_global.9(b, func=$64load_global.9, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $70compare_op.12 = $62call_function.8 != $68call_function.11
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.12, func=bool72, args=(Var($70compare_op.12, unicode.py:478),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 78
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D6D28B0>
DEBUG:numba.core.ssa:on stmt: $const74.0 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: $76return_value.1 = cast(value=$const74.0)
DEBUG:numba.core.ssa:on stmt: return $76return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 78
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D6D28B0>
DEBUG:numba.core.ssa:on stmt: $78load_global.0 = global(_cmp_region: <function _cmp_region at 0x0000029B6B47C430>)
DEBUG:numba.core.ssa:on stmt: $const82.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const86.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $88load_global.5 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $92call_function.7 = call $88load_global.5(a, func=$88load_global.5, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def var='a' stmt=$92call_function.7 = call $88load_global.5(a, func=$88load_global.5, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def_from_top label 78
DEBUG:numba.core.ssa:idom 42 from label 78
DEBUG:numba.core.ssa:find_def_from_bottom label 42
DEBUG:numba.core.ssa:replaced with: $92call_function.7 = call $88load_global.5(a.1, func=$88load_global.5, args=[Var(a.1, unicode.py:476)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $94call_function.8 = call $78load_global.0(a, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a, unicode.py:468), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def var='a' stmt=$94call_function.8 = call $78load_global.0(a, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a, unicode.py:468), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def_from_top label 78
DEBUG:numba.core.ssa:idom 42 from label 78
DEBUG:numba.core.ssa:find_def_from_bottom label 42
DEBUG:numba.core.ssa:replaced with: $94call_function.8 = call $78load_global.0(a.1, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a.1, unicode.py:476), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const96.9 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $98compare_op.10 = $94call_function.8 == $const96.9
DEBUG:numba.core.ssa:on stmt: $100return_value.11 = cast(value=$98compare_op.10)
DEBUG:numba.core.ssa:on stmt: return $100return_value.11
DEBUG:numba.core.ssa:Fix SSA violator on var b
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D6D8430>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:first assign: b
DEBUG:numba.core.ssa:replaced with: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: a_none = a is $const4.1
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: b_none = b is $const12.4
DEBUG:numba.core.ssa:on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $20pred = call bool20(a_none, func=bool20, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $20pred, 26, 22
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 22
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D6D8430>
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24(b_none, func=bool24, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 42
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D6D8430>
DEBUG:numba.core.ssa:on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $28pred = call bool28(a_none, func=bool28, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $28pred, 30, 38
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 30
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D6D8430>
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32(b_none, func=bool32, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 38
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D6D8430>
DEBUG:numba.core.ssa:on stmt: $const34.0 = const(bool, True)
DEBUG:numba.core.ssa:on stmt: $36return_value.1 = cast(value=$const34.0)
DEBUG:numba.core.ssa:on stmt: return $36return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 38
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D6D8430>
DEBUG:numba.core.ssa:on stmt: $const38.0 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: $40return_value.1 = cast(value=$const38.0)
DEBUG:numba.core.ssa:on stmt: return $40return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 42
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D6D8430>
DEBUG:numba.core.ssa:on stmt: $42load_global.0 = global(str: <class 'str'>)
DEBUG:numba.core.ssa:on stmt: a.1 = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $50load_global.3 = global(str: <class 'str'>)
DEBUG:numba.core.ssa:on stmt: b = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:replaced with: b.1 = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $58load_global.6 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $62call_function.8 = call $58load_global.6(a.1, func=$58load_global.6, args=[Var(a.1, unicode.py:476)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $64load_global.9 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $68call_function.11 = call $64load_global.9(b, func=$64load_global.9, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $70compare_op.12 = $62call_function.8 != $68call_function.11
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.12, func=bool72, args=(Var($70compare_op.12, unicode.py:478),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 78
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D6D8430>
DEBUG:numba.core.ssa:on stmt: $const74.0 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: $76return_value.1 = cast(value=$const74.0)
DEBUG:numba.core.ssa:on stmt: return $76return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 78
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D6D8430>
DEBUG:numba.core.ssa:on stmt: $78load_global.0 = global(_cmp_region: <function _cmp_region at 0x0000029B6B47C430>)
DEBUG:numba.core.ssa:on stmt: $const82.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const86.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $88load_global.5 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $92call_function.7 = call $88load_global.5(a.1, func=$88load_global.5, args=[Var(a.1, unicode.py:476)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $94call_function.8 = call $78load_global.0(a.1, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a.1, unicode.py:476), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const96.9 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $98compare_op.10 = $94call_function.8 == $const96.9
DEBUG:numba.core.ssa:on stmt: $100return_value.11 = cast(value=$98compare_op.10)
DEBUG:numba.core.ssa:on stmt: return $100return_value.11
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000029B6D6D84F0>],
             42: [<numba.core.ir.Assign object at 0x0000029B6D6F6130>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D6D8430>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: a_none = a is $const4.1
DEBUG:numba.core.ssa:on stmt: $const12.4 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: b_none = b is $const12.4
DEBUG:numba.core.ssa:find_def var='b' stmt=b_none = b is $const12.4
DEBUG:numba.core.ssa:on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $20pred = call bool20(a_none, func=bool20, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $20pred, 26, 22
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 22
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D6D8430>
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24(b_none, func=bool24, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 42
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D6D8430>
DEBUG:numba.core.ssa:on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $28pred = call bool28(a_none, func=bool28, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $28pred, 30, 38
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 30
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D6D8430>
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32(b_none, func=bool32, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 38
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D6D8430>
DEBUG:numba.core.ssa:on stmt: $const34.0 = const(bool, True)
DEBUG:numba.core.ssa:on stmt: $36return_value.1 = cast(value=$const34.0)
DEBUG:numba.core.ssa:on stmt: return $36return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 38
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D6D8430>
DEBUG:numba.core.ssa:on stmt: $const38.0 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: $40return_value.1 = cast(value=$const38.0)
DEBUG:numba.core.ssa:on stmt: return $40return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 42
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D6D8430>
DEBUG:numba.core.ssa:on stmt: $42load_global.0 = global(str: <class 'str'>)
DEBUG:numba.core.ssa:on stmt: a.1 = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $50load_global.3 = global(str: <class 'str'>)
DEBUG:numba.core.ssa:on stmt: b.1 = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def var='b' stmt=b.1 = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def_from_top label 42
DEBUG:numba.core.ssa:idom 22 from label 42
DEBUG:numba.core.ssa:find_def_from_bottom label 22
DEBUG:numba.core.ssa:find_def_from_top label 22
DEBUG:numba.core.ssa:idom 0 from label 22
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:on stmt: $58load_global.6 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $62call_function.8 = call $58load_global.6(a.1, func=$58load_global.6, args=[Var(a.1, unicode.py:476)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $64load_global.9 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $68call_function.11 = call $64load_global.9(b, func=$64load_global.9, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def var='b' stmt=$68call_function.11 = call $64load_global.9(b, func=$64load_global.9, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:replaced with: $68call_function.11 = call $64load_global.9(b.1, func=$64load_global.9, args=[Var(b.1, unicode.py:477)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $70compare_op.12 = $62call_function.8 != $68call_function.11
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.12, func=bool72, args=(Var($70compare_op.12, unicode.py:478),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 78
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D6D8430>
DEBUG:numba.core.ssa:on stmt: $const74.0 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: $76return_value.1 = cast(value=$const74.0)
DEBUG:numba.core.ssa:on stmt: return $76return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 78
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D6D8430>
DEBUG:numba.core.ssa:on stmt: $78load_global.0 = global(_cmp_region: <function _cmp_region at 0x0000029B6B47C430>)
DEBUG:numba.core.ssa:on stmt: $const82.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const86.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $88load_global.5 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $92call_function.7 = call $88load_global.5(a.1, func=$88load_global.5, args=[Var(a.1, unicode.py:476)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $94call_function.8 = call $78load_global.0(a.1, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a.1, unicode.py:476), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def var='b' stmt=$94call_function.8 = call $78load_global.0(a.1, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a.1, unicode.py:476), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def_from_top label 78
DEBUG:numba.core.ssa:idom 42 from label 78
DEBUG:numba.core.ssa:find_def_from_bottom label 42
DEBUG:numba.core.ssa:replaced with: $94call_function.8 = call $78load_global.0(a.1, $const82.2, b.1, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a.1, unicode.py:476), Var($const82.2, unicode.py:480), Var(b.1, unicode.py:477), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const96.9 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $98compare_op.10 = $94call_function.8 == $const96.9
DEBUG:numba.core.ssa:on stmt: $100return_value.11 = cast(value=$98compare_op.10)
DEBUG:numba.core.ssa:on stmt: return $100return_value.11
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=54)
           2	LOAD_FAST(arg=0, lineno=54)
           4	LOAD_FAST(arg=1, lineno=49)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=54)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=54)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=49)
DEBUG:numba.core.byteflow:stack ['$_66call_function_kw_6_12.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$_66call_function_kw_6_12.0', '$K_14.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$6binary_true_divide.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_66call_function_kw_6_12.0'}), (4, {'res': '$K_14.1'}), (6, {'lhs': '$_66call_function_kw_6_12.0', 'rhs': '$K_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    _66call_function_kw_6_1 = arg(0, name=_66call_function_kw_6_1) ['_66call_function_kw_6_1']
    K_1 = arg(1, name=K_1)                   ['K_1']
    $6binary_true_divide.2 = _66call_function_kw_6_1 / K_1 ['$6binary_true_divide.2', 'K_1', '_66call_function_kw_6_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D749BE0>
DEBUG:numba.core.ssa:on stmt: _66call_function_kw_6_1 = arg(0, name=_66call_function_kw_6_1)
DEBUG:numba.core.ssa:on stmt: K_1 = arg(1, name=K_1)
DEBUG:numba.core.ssa:on stmt: $6binary_true_divide.2 = _66call_function_kw_6_1 / K_1
DEBUG:numba.core.ssa:on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $8return_value.3
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x0000029B6D7A8310>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000029B6D7A8460>],
             'K_1': [<numba.core.ir.Assign object at 0x0000029B6D749040>],
             '_66call_function_kw_6_1': [<numba.core.ir.Assign object at 0x0000029B6D7495B0>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
>         26	LOAD_FAST(arg=4, lineno=212)
          28	LOAD_FAST(arg=0, lineno=212)
          30	COMPARE_OP(arg=0, lineno=212)
          32	POP_JUMP_IF_FALSE(arg=120, lineno=212)
          34	LOAD_FAST(arg=1, lineno=213)
          36	LOAD_FAST(arg=4, lineno=213)
          38	BINARY_SUBSCR(arg=None, lineno=213)
          40	STORE_FAST(arg=6, lineno=213)
          42	LOAD_FAST(arg=3, lineno=214)
          44	LOAD_FAST(arg=5, lineno=214)
          46	BINARY_SUBSCR(arg=None, lineno=214)
          48	STORE_FAST(arg=7, lineno=214)
          50	LOAD_FAST(arg=7, lineno=217)
          52	LOAD_CONST(arg=2, lineno=217)
          54	COMPARE_OP(arg=3, lineno=217)
          56	POP_JUMP_IF_FALSE(arg=86, lineno=217)
          58	LOAD_FAST(arg=6, lineno=221)
          60	LOAD_FAST(arg=7, lineno=221)
          62	COMPARE_OP(arg=3, lineno=221)
          64	POP_JUMP_IF_FALSE(arg=102, lineno=221)
          66	LOAD_FAST(arg=6, lineno=221)
          68	LOAD_CONST(arg=2, lineno=221)
          70	COMPARE_OP(arg=3, lineno=221)
          72	POP_JUMP_IF_FALSE(arg=102, lineno=221)
          74	LOAD_FAST(arg=5, lineno=222)
          76	LOAD_CONST(arg=2, lineno=222)
          78	BINARY_ADD(arg=None, lineno=222)
          80	UNARY_NEGATIVE(arg=None, lineno=222)
          82	RETURN_VALUE(arg=None, lineno=222)
          84	JUMP_FORWARD(arg=16, lineno=222)
>         86	LOAD_FAST(arg=6, lineno=223)
          88	LOAD_CONST(arg=2, lineno=223)
          90	COMPARE_OP(arg=3, lineno=223)
          92	POP_JUMP_IF_FALSE(arg=102, lineno=223)
          94	LOAD_FAST(arg=6, lineno=225)
          96	LOAD_FAST(arg=3, lineno=225)
          98	LOAD_FAST(arg=5, lineno=225)
         100	STORE_SUBSCR(arg=None, lineno=225)
>        102	LOAD_FAST(arg=4, lineno=226)
         104	LOAD_CONST(arg=2, lineno=226)
         106	INPLACE_ADD(arg=None, lineno=226)
         108	STORE_FAST(arg=4, lineno=226)
         110	LOAD_FAST(arg=5, lineno=227)
         112	LOAD_CONST(arg=2, lineno=227)
         114	INPLACE_ADD(arg=None, lineno=227)
         116	STORE_FAST(arg=5, lineno=227)
         118	JUMP_ABSOLUTE(arg=26, lineno=227)
>        120	LOAD_FAST(arg=5, lineno=228)
         122	RETURN_VALUE(arg=None, lineno=228)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=205)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
DEBUG:numba.core.byteflow:stack ['$src_ndim2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
DEBUG:numba.core.byteflow:stack ['$src_ndim2.0', '$dest_ndim4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
DEBUG:numba.core.byteflow:stack ['$6compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
DEBUG:numba.core.byteflow:stack ['$const10.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
DEBUG:numba.core.byteflow:stack ['$const14.0']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
DEBUG:numba.core.byteflow:stack ['$dest_ndim18.1']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
DEBUG:numba.core.byteflow:stack ['$dest_ndim18.1', '$src_ndim20.2']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
DEBUG:numba.core.byteflow:stack ['$22binary_subtract.3']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=26 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=212)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=212)
DEBUG:numba.core.byteflow:stack ['$src_index26.0']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=COMPARE_OP(arg=0, lineno=212)
DEBUG:numba.core.byteflow:stack ['$src_index26.0', '$src_ndim28.1']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=120, lineno=212)
DEBUG:numba.core.byteflow:stack ['$30compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=120, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=213)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=213)
DEBUG:numba.core.byteflow:stack ['$src_shape34.0']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=213)
DEBUG:numba.core.byteflow:stack ['$src_shape34.0', '$src_index36.1']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=STORE_FAST(arg=6, lineno=213)
DEBUG:numba.core.byteflow:stack ['$38binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=214)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_FAST(arg=5, lineno=214)
DEBUG:numba.core.byteflow:stack ['$dest_shape42.3']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=214)
DEBUG:numba.core.byteflow:stack ['$dest_shape42.3', '$dest_index44.4']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=STORE_FAST(arg=7, lineno=214)
DEBUG:numba.core.byteflow:stack ['$46binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_FAST(arg=7, lineno=217)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=217)
DEBUG:numba.core.byteflow:stack ['$dest_dim_size50.6']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=COMPARE_OP(arg=3, lineno=217)
DEBUG:numba.core.byteflow:stack ['$dest_dim_size50.6', '$const52.7']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=POP_JUMP_IF_FALSE(arg=86, lineno=217)
DEBUG:numba.core.byteflow:stack ['$54compare_op.8']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=86, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=120, inst=LOAD_FAST(arg=5, lineno=228)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=122, inst=RETURN_VALUE(arg=None, lineno=228)
DEBUG:numba.core.byteflow:stack ['$dest_index120.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_FAST(arg=6, lineno=221)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_FAST(arg=7, lineno=221)
DEBUG:numba.core.byteflow:stack ['$src_dim_size58.0']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=COMPARE_OP(arg=3, lineno=221)
DEBUG:numba.core.byteflow:stack ['$src_dim_size58.0', '$dest_dim_size60.1']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=POP_JUMP_IF_FALSE(arg=102, lineno=221)
DEBUG:numba.core.byteflow:stack ['$62compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=86 nstack_initial=0), State(pc_initial=66 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=86, inst=LOAD_FAST(arg=6, lineno=223)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=88, inst=LOAD_CONST(arg=2, lineno=223)
DEBUG:numba.core.byteflow:stack ['$src_dim_size86.0']
DEBUG:numba.core.byteflow:dispatch pc=90, inst=COMPARE_OP(arg=3, lineno=223)
DEBUG:numba.core.byteflow:stack ['$src_dim_size86.0', '$const88.1']
DEBUG:numba.core.byteflow:dispatch pc=92, inst=POP_JUMP_IF_FALSE(arg=102, lineno=223)
DEBUG:numba.core.byteflow:stack ['$90compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=94, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_FAST(arg=6, lineno=221)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=221)
DEBUG:numba.core.byteflow:stack ['$src_dim_size66.0']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=COMPARE_OP(arg=3, lineno=221)
DEBUG:numba.core.byteflow:stack ['$src_dim_size66.0', '$const68.1']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=102, lineno=221)
DEBUG:numba.core.byteflow:stack ['$70compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=102, inst=LOAD_FAST(arg=4, lineno=226)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=104, inst=LOAD_CONST(arg=2, lineno=226)
DEBUG:numba.core.byteflow:stack ['$src_index102.0']
DEBUG:numba.core.byteflow:dispatch pc=106, inst=INPLACE_ADD(arg=None, lineno=226)
DEBUG:numba.core.byteflow:stack ['$src_index102.0', '$const104.1']
DEBUG:numba.core.byteflow:dispatch pc=108, inst=STORE_FAST(arg=4, lineno=226)
DEBUG:numba.core.byteflow:stack ['$106inplace_add.2']
DEBUG:numba.core.byteflow:dispatch pc=110, inst=LOAD_FAST(arg=5, lineno=227)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=112, inst=LOAD_CONST(arg=2, lineno=227)
DEBUG:numba.core.byteflow:stack ['$dest_index110.3']
DEBUG:numba.core.byteflow:dispatch pc=114, inst=INPLACE_ADD(arg=None, lineno=227)
DEBUG:numba.core.byteflow:stack ['$dest_index110.3', '$const112.4']
DEBUG:numba.core.byteflow:dispatch pc=116, inst=STORE_FAST(arg=5, lineno=227)
DEBUG:numba.core.byteflow:stack ['$114inplace_add.5']
DEBUG:numba.core.byteflow:dispatch pc=118, inst=JUMP_ABSOLUTE(arg=26, lineno=227)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=94, inst=LOAD_FAST(arg=6, lineno=225)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=225)
DEBUG:numba.core.byteflow:stack ['$src_dim_size94.0']
DEBUG:numba.core.byteflow:dispatch pc=98, inst=LOAD_FAST(arg=5, lineno=225)
DEBUG:numba.core.byteflow:stack ['$src_dim_size94.0', '$dest_shape96.1']
DEBUG:numba.core.byteflow:dispatch pc=100, inst=STORE_SUBSCR(arg=None, lineno=225)
DEBUG:numba.core.byteflow:stack ['$src_dim_size94.0', '$dest_shape96.1', '$dest_index98.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_FAST(arg=5, lineno=222)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_CONST(arg=2, lineno=222)
DEBUG:numba.core.byteflow:stack ['$dest_index74.0']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=BINARY_ADD(arg=None, lineno=222)
DEBUG:numba.core.byteflow:stack ['$dest_index74.0', '$const76.1']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=UNARY_NEGATIVE(arg=None, lineno=222)
DEBUG:numba.core.byteflow:stack ['$78binary_add.2']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=222)
DEBUG:numba.core.byteflow:stack ['$80unary_negative.3']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=86 nstack_initial=0): set(),
             State(pc_initial=94 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$src_index26.0'}), (28, {'res': '$src_ndim28.1'}), (30, {'lhs': '$src_index26.0', 'rhs': '$src_ndim28.1', 'res': '$30compare_op.2'}), (32, {'pred': '$30compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 120: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$src_shape34.0'}), (36, {'res': '$src_index36.1'}), (38, {'index': '$src_index36.1', 'target': '$src_shape34.0', 'res': '$38binary_subscr.2'}), (40, {'value': '$38binary_subscr.2'}), (42, {'res': '$dest_shape42.3'}), (44, {'res': '$dest_index44.4'}), (46, {'index': '$dest_index44.4', 'target': '$dest_shape42.3', 'res': '$46binary_subscr.5'}), (48, {'value': '$46binary_subscr.5'}), (50, {'res': '$dest_dim_size50.6'}), (52, {'res': '$const52.7'}), (54, {'lhs': '$dest_dim_size50.6', 'rhs': '$const52.7', 'res': '$54compare_op.8'}), (56, {'pred': '$54compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 86: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$src_dim_size58.0'}), (60, {'res': '$dest_dim_size60.1'}), (62, {'lhs': '$src_dim_size58.0', 'rhs': '$dest_dim_size60.1', 'res': '$62compare_op.2'}), (64, {'pred': '$62compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 102: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$src_dim_size66.0'}), (68, {'res': '$const68.1'}), (70, {'lhs': '$src_dim_size66.0', 'rhs': '$const68.1', 'res': '$70compare_op.2'}), (72, {'pred': '$70compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 102: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$dest_index74.0'}), (76, {'res': '$const76.1'}), (78, {'lhs': '$dest_index74.0', 'rhs': '$const76.1', 'res': '$78binary_add.2'}), (80, {'value': '$78binary_add.2', 'res': '$80unary_negative.3'}), (82, {'retval': '$80unary_negative.3', 'castval': '$82return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=86 nstack_initial=0):
AdaptBlockInfo(insts=((86, {'res': '$src_dim_size86.0'}), (88, {'res': '$const88.1'}), (90, {'lhs': '$src_dim_size86.0', 'rhs': '$const88.1', 'res': '$90compare_op.2'}), (92, {'pred': '$90compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={94: (), 102: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=94 nstack_initial=0):
AdaptBlockInfo(insts=((94, {'res': '$src_dim_size94.0'}), (96, {'res': '$dest_shape96.1'}), (98, {'res': '$dest_index98.2'}), (100, {'target': '$dest_shape96.1', 'index': '$dest_index98.2', 'value': '$src_dim_size94.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$src_index102.0'}), (104, {'res': '$const104.1'}), (106, {'lhs': '$src_index102.0', 'rhs': '$const104.1', 'res': '$106inplace_add.2'}), (108, {'value': '$106inplace_add.2'}), (110, {'res': '$dest_index110.3'}), (112, {'res': '$const112.4'}), (114, {'lhs': '$dest_index110.3', 'rhs': '$const112.4', 'res': '$114inplace_add.5'}), (116, {'value': '$114inplace_add.5'}), (118, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=120 nstack_initial=0):
AdaptBlockInfo(insts=((120, {'res': '$dest_index120.0'}), (122, {'retval': '$dest_index120.0', 'castval': '$122return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    $30compare_op.2 = src_index < src_ndim   ['$30compare_op.2', 'src_index', 'src_ndim']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$30compare_op.2', '$32pred', 'bool32']
    branch $32pred, 34, 120                  ['$32pred']
label 34:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const52.7 = const(int, 1)               ['$const52.7']
    $54compare_op.8 = dest_dim_size != $const52.7 ['$54compare_op.8', '$const52.7', 'dest_dim_size']
    bool56 = global(bool: <class 'bool'>)    ['bool56']
    $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$54compare_op.8', '$56pred', 'bool56']
    branch $56pred, 58, 86                   ['$56pred']
label 58:
    $62compare_op.2 = src_dim_size != dest_dim_size ['$62compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$62compare_op.2', '$64pred', 'bool64']
    branch $64pred, 66, 102                  ['$64pred']
label 66:
    $const68.1 = const(int, 1)               ['$const68.1']
    $70compare_op.2 = src_dim_size != $const68.1 ['$70compare_op.2', '$const68.1', 'src_dim_size']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$70compare_op.2', '$72pred', 'bool72']
    branch $72pred, 74, 102                  ['$72pred']
label 74:
    $const76.1 = const(int, 1)               ['$const76.1']
    $78binary_add.2 = dest_index + $const76.1 ['$78binary_add.2', '$const76.1', 'dest_index']
    $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2) ['$78binary_add.2', '$80unary_negative.3']
    $82return_value.4 = cast(value=$80unary_negative.3) ['$80unary_negative.3', '$82return_value.4']
    return $82return_value.4                 ['$82return_value.4']
label 86:
    $const88.1 = const(int, 1)               ['$const88.1']
    $90compare_op.2 = src_dim_size != $const88.1 ['$90compare_op.2', '$const88.1', 'src_dim_size']
    bool92 = global(bool: <class 'bool'>)    ['bool92']
    $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$90compare_op.2', '$92pred', 'bool92']
    branch $92pred, 94, 102                  ['$92pred']
label 94:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 102                                 []
label 102:
    $const104.1 = const(int, 1)              ['$const104.1']
    $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined) ['$106inplace_add.2', '$const104.1', 'src_index']
    src_index = $106inplace_add.2            ['$106inplace_add.2', 'src_index']
    $const112.4 = const(int, 1)              ['$const112.4']
    $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined) ['$114inplace_add.5', '$const112.4', 'dest_index']
    dest_index = $114inplace_add.5           ['$114inplace_add.5', 'dest_index']
    jump 26                                  []
label 120:
    $122return_value.1 = cast(value=dest_index) ['$122return_value.1', 'dest_index']
    return $122return_value.1                ['$122return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D7C9D90>
DEBUG:numba.core.ssa:on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG:numba.core.ssa:on stmt: src_shape = arg(1, name=src_shape)
DEBUG:numba.core.ssa:on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG:numba.core.ssa:on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG:numba.core.ssa:on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 10, 14
DEBUG:numba.core.ssa:==== SSA block analysis pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D7C9D90>
DEBUG:numba.core.ssa:on stmt: $const10.0 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG:numba.core.ssa:on stmt: return $12return_value.1
DEBUG:numba.core.ssa:==== SSA block analysis pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D7C9D90>
DEBUG:numba.core.ssa:on stmt: src_index = const(int, 0)
DEBUG:numba.core.ssa:on stmt: dest_index = dest_ndim - src_ndim
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block analysis pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D7C9D90>
DEBUG:numba.core.ssa:on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 120
DEBUG:numba.core.ssa:==== SSA block analysis pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D7C9D90>
DEBUG:numba.core.ssa:on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const52.7 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG:numba.core.ssa:on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $56pred, 58, 86
DEBUG:numba.core.ssa:==== SSA block analysis pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D7C9D90>
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 102
DEBUG:numba.core.ssa:==== SSA block analysis pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D7C9D90>
DEBUG:numba.core.ssa:on stmt: $const68.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 102
DEBUG:numba.core.ssa:==== SSA block analysis pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D7C9D90>
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG:numba.core.ssa:on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG:numba.core.ssa:on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG:numba.core.ssa:on stmt: return $82return_value.4
DEBUG:numba.core.ssa:==== SSA block analysis pass on 86
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D7C9D90>
DEBUG:numba.core.ssa:on stmt: $const88.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG:numba.core.ssa:on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $92pred, 94, 102
DEBUG:numba.core.ssa:==== SSA block analysis pass on 94
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D7C9D90>
DEBUG:numba.core.ssa:on stmt: dest_shape[dest_index] = src_dim_size
DEBUG:numba.core.ssa:on stmt: jump 102
DEBUG:numba.core.ssa:==== SSA block analysis pass on 102
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D7C9D90>
DEBUG:numba.core.ssa:on stmt: $const104.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: src_index = $106inplace_add.2
DEBUG:numba.core.ssa:on stmt: $const112.4 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: dest_index = $114inplace_add.5
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block analysis pass on 120
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D7C9D90>
DEBUG:numba.core.ssa:on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG:numba.core.ssa:on stmt: return $122return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$106inplace_add.2': [<numba.core.ir.Assign object at 0x0000029B6D7CD7C0>],
             '$114inplace_add.5': [<numba.core.ir.Assign object at 0x0000029B6D7CDCA0>],
             '$122return_value.1': [<numba.core.ir.Assign object at 0x0000029B6D7C90D0>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x0000029B6D7D3BB0>],
             '$30compare_op.2': [<numba.core.ir.Assign object at 0x0000029B6D7CE820>],
             '$32pred': [<numba.core.ir.Assign object at 0x0000029B6D7CEA90>],
             '$54compare_op.8': [<numba.core.ir.Assign object at 0x0000029B6D7AD940>],
             '$56pred': [<numba.core.ir.Assign object at 0x0000029B6D7ADBB0>],
             '$62compare_op.2': [<numba.core.ir.Assign object at 0x0000029B6D7ADE20>],
             '$64pred': [<numba.core.ir.Assign object at 0x0000029B6D7A62E0>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x0000029B6D7432E0>],
             '$70compare_op.2': [<numba.core.ir.Assign object at 0x0000029B6D7A6FA0>],
             '$72pred': [<numba.core.ir.Assign object at 0x0000029B6D7AD6A0>],
             '$78binary_add.2': [<numba.core.ir.Assign object at 0x0000029B6D7B3400>],
             '$80unary_negative.3': [<numba.core.ir.Assign object at 0x0000029B6D7B3550>],
             '$82return_value.4': [<numba.core.ir.Assign object at 0x0000029B6D7B36D0>],
             '$8pred': [<numba.core.ir.Assign object at 0x0000029B6D749EE0>],
             '$90compare_op.2': [<numba.core.ir.Assign object at 0x0000029B6D7B3BE0>],
             '$92pred': [<numba.core.ir.Assign object at 0x0000029B6D7B3E50>],
             '$const10.0': [<numba.core.ir.Assign object at 0x0000029B6D7492E0>],
             '$const104.1': [<numba.core.ir.Assign object at 0x0000029B6D7CD610>],
             '$const112.4': [<numba.core.ir.Assign object at 0x0000029B6D7CDAF0>],
             '$const52.7': [<numba.core.ir.Assign object at 0x0000029B6D7AD790>],
             '$const68.1': [<numba.core.ir.Assign object at 0x0000029B6D7A6E50>],
             '$const76.1': [<numba.core.ir.Assign object at 0x0000029B6D7B3250>],
             '$const88.1': [<numba.core.ir.Assign object at 0x0000029B6D7B3A30>],
             'bool32': [<numba.core.ir.Assign object at 0x0000029B6D7CE970>],
             'bool56': [<numba.core.ir.Assign object at 0x0000029B6D7ADA90>],
             'bool64': [<numba.core.ir.Assign object at 0x0000029B6D7A6070>],
             'bool72': [<numba.core.ir.Assign object at 0x0000029B6D7A2400>],
             'bool8': [<numba.core.ir.Assign object at 0x0000029B6D749760>],
             'bool92': [<numba.core.ir.Assign object at 0x0000029B6D7B3D30>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x0000029B6D7AD400>],
             'dest_index': [<numba.core.ir.Assign object at 0x0000029B6D7CE3A0>,
                            <numba.core.ir.Assign object at 0x0000029B6D7CDD60>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x0000029B6D7A8670>],
             'dest_shape': [<numba.core.ir.Assign object at 0x0000029B6D7A85B0>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x0000029B6D7CEEE0>],
             'src_index': [<numba.core.ir.Assign object at 0x0000029B6D7D3E50>,
                           <numba.core.ir.Assign object at 0x0000029B6D7CD880>],
             'src_ndim': [<numba.core.ir.Assign object at 0x0000029B6D7A8E20>],
             'src_shape': [<numba.core.ir.Assign object at 0x0000029B6D7A8820>]})
DEBUG:numba.core.ssa:SSA violators {'dest_index', 'src_index'}
DEBUG:numba.core.ssa:Fix SSA violator on var dest_index
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG:numba.core.ssa:on stmt: src_shape = arg(1, name=src_shape)
DEBUG:numba.core.ssa:on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG:numba.core.ssa:on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG:numba.core.ssa:on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 10, 14
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: $const10.0 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG:numba.core.ssa:on stmt: return $12return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: src_index = const(int, 0)
DEBUG:numba.core.ssa:on stmt: dest_index = dest_ndim - src_ndim
DEBUG:numba.core.ssa:first assign: dest_index
DEBUG:numba.core.ssa:replaced with: dest_index = dest_ndim - src_ndim
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 120
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const52.7 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG:numba.core.ssa:on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $56pred, 58, 86
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: $const68.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG:numba.core.ssa:on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG:numba.core.ssa:on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG:numba.core.ssa:on stmt: return $82return_value.4
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 86
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: $const88.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG:numba.core.ssa:on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $92pred, 94, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 94
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: dest_shape[dest_index] = src_dim_size
DEBUG:numba.core.ssa:on stmt: jump 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 102
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: $const104.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: src_index = $106inplace_add.2
DEBUG:numba.core.ssa:on stmt: $const112.4 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: dest_index = $114inplace_add.5
DEBUG:numba.core.ssa:replaced with: dest_index.1 = $114inplace_add.5
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 120
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG:numba.core.ssa:on stmt: return $122return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x0000029B6D7A6B50>],
             102: [<numba.core.ir.Assign object at 0x0000029B6D7C9D90>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG:numba.core.ssa:on stmt: src_shape = arg(1, name=src_shape)
DEBUG:numba.core.ssa:on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG:numba.core.ssa:on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG:numba.core.ssa:on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 10, 14
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: $const10.0 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG:numba.core.ssa:on stmt: return $12return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: src_index = const(int, 0)
DEBUG:numba.core.ssa:on stmt: dest_index = dest_ndim - src_ndim
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 120
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 26 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:find_def_from_top label 26
DEBUG:numba.core.ssa:insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 26
DEBUG:numba.core.ssa:find_def_from_bottom label 102
DEBUG:numba.core.ssa:incoming_def dest_index.1 = $114inplace_add.5
DEBUG:numba.core.ssa:find_def_from_bottom label 14
DEBUG:numba.core.ssa:incoming_def dest_index = dest_ndim - src_ndim
DEBUG:numba.core.ssa:replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const52.7 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG:numba.core.ssa:on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $56pred, 58, 86
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: $const68.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG:numba.core.ssa:find_def var='dest_index' stmt=$78binary_add.2 = dest_index + $const76.1
DEBUG:numba.core.ssa:find_def_from_top label 74
DEBUG:numba.core.ssa:idom 66 from label 74
DEBUG:numba.core.ssa:find_def_from_bottom label 66
DEBUG:numba.core.ssa:find_def_from_top label 66
DEBUG:numba.core.ssa:idom 58 from label 66
DEBUG:numba.core.ssa:find_def_from_bottom label 58
DEBUG:numba.core.ssa:find_def_from_top label 58
DEBUG:numba.core.ssa:idom 34 from label 58
DEBUG:numba.core.ssa:find_def_from_bottom label 34
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 26 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:replaced with: $78binary_add.2 = dest_index.2 + $const76.1
DEBUG:numba.core.ssa:on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG:numba.core.ssa:on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG:numba.core.ssa:on stmt: return $82return_value.4
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 86
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: $const88.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG:numba.core.ssa:on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $92pred, 94, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 94
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: dest_shape[dest_index] = src_dim_size
DEBUG:numba.core.ssa:find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
DEBUG:numba.core.ssa:find_def_from_top label 94
DEBUG:numba.core.ssa:idom 86 from label 94
DEBUG:numba.core.ssa:find_def_from_bottom label 86
DEBUG:numba.core.ssa:find_def_from_top label 86
DEBUG:numba.core.ssa:idom 34 from label 86
DEBUG:numba.core.ssa:find_def_from_bottom label 34
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 26 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:replaced with: dest_shape[dest_index.2] = src_dim_size
DEBUG:numba.core.ssa:on stmt: jump 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 102
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: $const104.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: src_index = $106inplace_add.2
DEBUG:numba.core.ssa:on stmt: $const112.4 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='dest_index' stmt=$114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 102
DEBUG:numba.core.ssa:idom 34 from label 102
DEBUG:numba.core.ssa:find_def_from_bottom label 34
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 26 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:replaced with: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: dest_index.1 = $114inplace_add.5
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 120
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG:numba.core.ssa:find_def var='dest_index' stmt=$122return_value.1 = cast(value=dest_index)
DEBUG:numba.core.ssa:find_def_from_top label 120
DEBUG:numba.core.ssa:idom 26 from label 120
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:replaced with: $122return_value.1 = cast(value=dest_index.2)
DEBUG:numba.core.ssa:on stmt: return $122return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var src_index
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D755CD0>
DEBUG:numba.core.ssa:on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG:numba.core.ssa:on stmt: src_shape = arg(1, name=src_shape)
DEBUG:numba.core.ssa:on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG:numba.core.ssa:on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG:numba.core.ssa:on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 10, 14
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D755CD0>
DEBUG:numba.core.ssa:on stmt: $const10.0 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG:numba.core.ssa:on stmt: return $12return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D755CD0>
DEBUG:numba.core.ssa:on stmt: src_index = const(int, 0)
DEBUG:numba.core.ssa:first assign: src_index
DEBUG:numba.core.ssa:replaced with: src_index = const(int, 0)
DEBUG:numba.core.ssa:on stmt: dest_index = dest_ndim - src_ndim
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D755CD0>
DEBUG:numba.core.ssa:on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[102, 14])
DEBUG:numba.core.ssa:on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 120
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D755CD0>
DEBUG:numba.core.ssa:on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const52.7 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG:numba.core.ssa:on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $56pred, 58, 86
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D755CD0>
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D755CD0>
DEBUG:numba.core.ssa:on stmt: $const68.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D755CD0>
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $78binary_add.2 = dest_index.2 + $const76.1
DEBUG:numba.core.ssa:on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG:numba.core.ssa:on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG:numba.core.ssa:on stmt: return $82return_value.4
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 86
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D755CD0>
DEBUG:numba.core.ssa:on stmt: $const88.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG:numba.core.ssa:on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $92pred, 94, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 94
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D755CD0>
DEBUG:numba.core.ssa:on stmt: dest_shape[dest_index.2] = src_dim_size
DEBUG:numba.core.ssa:on stmt: jump 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 102
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D755CD0>
DEBUG:numba.core.ssa:on stmt: $const104.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: src_index = $106inplace_add.2
DEBUG:numba.core.ssa:replaced with: src_index.1 = $106inplace_add.2
DEBUG:numba.core.ssa:on stmt: $const112.4 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: dest_index.1 = $114inplace_add.5
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 120
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D755CD0>
DEBUG:numba.core.ssa:on stmt: $122return_value.1 = cast(value=dest_index.2)
DEBUG:numba.core.ssa:on stmt: return $122return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x0000029B6D7A6160>],
             102: [<numba.core.ir.Assign object at 0x0000029B6D7DD5B0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG:numba.core.ssa:on stmt: src_shape = arg(1, name=src_shape)
DEBUG:numba.core.ssa:on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG:numba.core.ssa:on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG:numba.core.ssa:on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 10, 14
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: $const10.0 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG:numba.core.ssa:on stmt: return $12return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: src_index = const(int, 0)
DEBUG:numba.core.ssa:on stmt: dest_index = dest_ndim - src_ndim
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[102, 14])
DEBUG:numba.core.ssa:on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG:numba.core.ssa:find_def var='src_index' stmt=$30compare_op.2 = src_index < src_ndim
DEBUG:numba.core.ssa:find_def_from_top label 26
DEBUG:numba.core.ssa:insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 26
DEBUG:numba.core.ssa:find_def_from_bottom label 102
DEBUG:numba.core.ssa:incoming_def src_index.1 = $106inplace_add.2
DEBUG:numba.core.ssa:find_def_from_bottom label 14
DEBUG:numba.core.ssa:incoming_def src_index = const(int, 0)
DEBUG:numba.core.ssa:replaced with: $30compare_op.2 = src_index.2 < src_ndim
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 120
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 26 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const52.7 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG:numba.core.ssa:on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $56pred, 58, 86
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: $const68.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $78binary_add.2 = dest_index.2 + $const76.1
DEBUG:numba.core.ssa:on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG:numba.core.ssa:on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG:numba.core.ssa:on stmt: return $82return_value.4
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 86
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: $const88.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG:numba.core.ssa:on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $92pred, 94, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 94
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: dest_shape[dest_index.2] = src_dim_size
DEBUG:numba.core.ssa:on stmt: jump 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 102
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: $const104.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='src_index' stmt=$106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 102
DEBUG:numba.core.ssa:idom 34 from label 102
DEBUG:numba.core.ssa:find_def_from_bottom label 34
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 26 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:replaced with: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: src_index.1 = $106inplace_add.2
DEBUG:numba.core.ssa:on stmt: $const112.4 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: dest_index.1 = $114inplace_add.5
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 120
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D7A67F0>
DEBUG:numba.core.ssa:on stmt: $122return_value.1 = cast(value=dest_index.2)
DEBUG:numba.core.ssa:on stmt: return $122return_value.1
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=56)
           6	CALL_FUNCTION(arg=1, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=56)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$_106binary_subscr_13_14.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$6call_function.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$_106binary_subscr_13_14.1'}), (6, {'func': '$2load_global.0', 'args': ['$_106binary_subscr_13_14.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    _106binary_subscr_13_1 = arg(0, name=_106binary_subscr_13_1) ['_106binary_subscr_13_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x29b624629a: <ufunc 'absolute'>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(_106binary_subscr_13_1, func=$2load_global.0, args=[Var(_106binary_subscr_13_1, c3s1_post_processing.py:1)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', '_106binary_subscr_13_1']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D81F3A0>
DEBUG:numba.core.ssa:on stmt: _106binary_subscr_13_1 = arg(0, name=_106binary_subscr_13_1)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(__ufunc_or_dufunc_0x29b624629a: <ufunc 'absolute'>)
DEBUG:numba.core.ssa:on stmt: $6call_function.2 = call $2load_global.0(_106binary_subscr_13_1, func=$2load_global.0, args=[Var(_106binary_subscr_13_1, c3s1_post_processing.py:1)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG:numba.core.ssa:on stmt: return $8return_value.3
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x0000029B6D8132E0>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x0000029B6D824400>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000029B6D824520>],
             '_106binary_subscr_13_1': [<numba.core.ir.Assign object at 0x0000029B6D81F7F0>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=171)
           2	LOAD_DEREF(arg=0, lineno=171)
           4	STORE_FAST(arg=1, lineno=171)
           6	LOAD_GLOBAL(arg=0, lineno=172)
           8	LOAD_METHOD(arg=1, lineno=172)
          10	LOAD_FAST(arg=0, lineno=172)
          12	CALL_METHOD(arg=1, lineno=172)
          14	GET_ITER(arg=None, lineno=172)
>         16	FOR_ITER(arg=16, lineno=172)
          18	STORE_FAST(arg=2, lineno=172)
          20	LOAD_FAST(arg=1, lineno=173)
          22	LOAD_FAST(arg=2, lineno=173)
          24	LOAD_METHOD(arg=2, lineno=173)
          26	CALL_METHOD(arg=0, lineno=173)
          28	INPLACE_ADD(arg=None, lineno=173)
          30	STORE_FAST(arg=1, lineno=173)
          32	JUMP_ABSOLUTE(arg=16, lineno=173)
>         34	LOAD_FAST(arg=1, lineno=174)
          36	RETURN_VALUE(arg=None, lineno=174)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=171)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=171)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=STORE_FAST(arg=1, lineno=171)
DEBUG:numba.core.byteflow:stack ['$2load_deref.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=172)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_METHOD(arg=1, lineno=172)
DEBUG:numba.core.byteflow:stack ['$6load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=172)
DEBUG:numba.core.byteflow:stack ['$8load_method.2']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=172)
DEBUG:numba.core.byteflow:stack ['$8load_method.2', '$arr10.3']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=GET_ITER(arg=None, lineno=172)
DEBUG:numba.core.byteflow:stack ['$12call_method.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=16, stack=('$14get_iter.5',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=16 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi16.0']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=FOR_ITER(arg=16, lineno=172)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=('$phi16.0', '$16for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=18 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=174)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=174)
DEBUG:numba.core.byteflow:stack ['$c34.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=18 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi18.0', '$phi18.1']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=STORE_FAST(arg=2, lineno=172)
DEBUG:numba.core.byteflow:stack ['$phi18.0', '$phi18.1']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=173)
DEBUG:numba.core.byteflow:stack ['$phi18.0']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=173)
DEBUG:numba.core.byteflow:stack ['$phi18.0', '$c20.2']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=173)
DEBUG:numba.core.byteflow:stack ['$phi18.0', '$c20.2', '$v22.3']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=CALL_METHOD(arg=0, lineno=173)
DEBUG:numba.core.byteflow:stack ['$phi18.0', '$c20.2', '$24load_method.4']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=INPLACE_ADD(arg=None, lineno=173)
DEBUG:numba.core.byteflow:stack ['$phi18.0', '$c20.2', '$26call_method.5']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=STORE_FAST(arg=1, lineno=173)
DEBUG:numba.core.byteflow:stack ['$phi18.0', '$28inplace_add.6']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=JUMP_ABSOLUTE(arg=16, lineno=173)
DEBUG:numba.core.byteflow:stack ['$phi18.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=16, stack=('$phi18.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=16 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=1): {'$phi16.0'},
             State(pc_initial=18 nstack_initial=2): {'$phi18.1'},
             State(pc_initial=34 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi16.0': State(pc_initial=0 nstack_initial=0),
 '$phi18.1': State(pc_initial=16 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=2))},
             '$phi18.0': {('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi16.0': {('$14get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi18.1': {('$16for_iter.2', State(pc_initial=16 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi16.0': '$14get_iter.5'},
             State(pc_initial=16 nstack_initial=1): {'$phi18.1': '$16for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'value': '$2load_deref.0'}), (6, {'res': '$6load_global.1'}), (8, {'item': '$6load_global.1', 'res': '$8load_method.2'}), (10, {'res': '$arr10.3'}), (12, {'func': '$8load_method.2', 'args': ['$arr10.3'], 'res': '$12call_method.4'}), (14, {'value': '$12call_method.4', 'res': '$14get_iter.5'})), outgoing_phis={'$phi16.0': '$14get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$14get_iter.5',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=16 nstack_initial=1):
AdaptBlockInfo(insts=((16, {'iterator': '$phi16.0', 'pair': '$16for_iter.1', 'indval': '$16for_iter.2', 'pred': '$16for_iter.3'}),), outgoing_phis={'$phi18.1': '$16for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 18: ('$phi16.0', '$16for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=18 nstack_initial=2):
AdaptBlockInfo(insts=((18, {'value': '$phi18.1'}), (20, {'res': '$c20.2'}), (22, {'res': '$v22.3'}), (24, {'item': '$v22.3', 'res': '$24load_method.4'}), (26, {'func': '$24load_method.4', 'args': [], 'res': '$26call_method.5'}), (28, {'lhs': '$c20.2', 'rhs': '$26call_method.5', 'res': '$28inplace_add.6'}), (30, {'value': '$28inplace_add.6'}), (32, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$phi18.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$c34.0'}), (36, {'retval': '$c34.0', 'castval': '$36return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    arr = arg(0, name=arr)                   ['arr']
    c = freevar(zero: 0.0)                   ['c']
    $6load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$6load_global.1']
    $8load_method.2 = getattr(value=$6load_global.1, attr=nditer) ['$6load_global.1', '$8load_method.2']
    $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:171)], kws=(), vararg=None, target=None) ['$12call_method.4', '$8load_method.2', 'arr']
    $14get_iter.5 = getiter(value=$12call_method.4) ['$12call_method.4', '$14get_iter.5']
    $phi16.0 = $14get_iter.5                 ['$14get_iter.5', '$phi16.0']
    jump 16                                  []
label 16:
    $16for_iter.1 = iternext(value=$phi16.0) ['$16for_iter.1', '$phi16.0']
    $16for_iter.2 = pair_first(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.2']
    $16for_iter.3 = pair_second(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.3']
    $phi18.1 = $16for_iter.2                 ['$16for_iter.2', '$phi18.1']
    branch $16for_iter.3, 18, 34             ['$16for_iter.3']
label 18:
    v = $phi18.1                             ['$phi18.1', 'v']
    $24load_method.4 = getattr(value=v, attr=item) ['$24load_method.4', 'v']
    $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None) ['$24load_method.4', '$26call_method.5']
    $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$26call_method.5', '$28inplace_add.6', 'c']
    c = $28inplace_add.6                     ['$28inplace_add.6', 'c']
    jump 16                                  []
label 34:
    $36return_value.1 = cast(value=c)        ['$36return_value.1', 'c']
    return $36return_value.1                 ['$36return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D8B6B80>
DEBUG:numba.core.ssa:on stmt: arr = arg(0, name=arr)
DEBUG:numba.core.ssa:on stmt: c = freevar(zero: 0.0)
DEBUG:numba.core.ssa:on stmt: $6load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
DEBUG:numba.core.ssa:on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:171)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
DEBUG:numba.core.ssa:on stmt: $phi16.0 = $14get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 16
DEBUG:numba.core.ssa:==== SSA block analysis pass on 16
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D8B6B80>
DEBUG:numba.core.ssa:on stmt: $16for_iter.1 = iternext(value=$phi16.0)
DEBUG:numba.core.ssa:on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
DEBUG:numba.core.ssa:on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi18.1 = $16for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $16for_iter.3, 18, 34
DEBUG:numba.core.ssa:==== SSA block analysis pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D8B6B80>
DEBUG:numba.core.ssa:on stmt: v = $phi18.1
DEBUG:numba.core.ssa:on stmt: $24load_method.4 = getattr(value=v, attr=item)
DEBUG:numba.core.ssa:on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: c = $28inplace_add.6
DEBUG:numba.core.ssa:on stmt: jump 16
DEBUG:numba.core.ssa:==== SSA block analysis pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D8B6B80>
DEBUG:numba.core.ssa:on stmt: $36return_value.1 = cast(value=c)
DEBUG:numba.core.ssa:on stmt: return $36return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$12call_method.4': [<numba.core.ir.Assign object at 0x0000029B6D8559D0>],
             '$14get_iter.5': [<numba.core.ir.Assign object at 0x0000029B6D855AC0>],
             '$16for_iter.1': [<numba.core.ir.Assign object at 0x0000029B6D855D90>],
             '$16for_iter.2': [<numba.core.ir.Assign object at 0x0000029B6D855EB0>],
             '$16for_iter.3': [<numba.core.ir.Assign object at 0x0000029B6D855FD0>],
             '$24load_method.4': [<numba.core.ir.Assign object at 0x0000029B6D85D6A0>],
             '$26call_method.5': [<numba.core.ir.Assign object at 0x0000029B6D85D8B0>],
             '$28inplace_add.6': [<numba.core.ir.Assign object at 0x0000029B6D85D9D0>],
             '$36return_value.1': [<numba.core.ir.Assign object at 0x0000029B6D85DDC0>],
             '$6load_global.1': [<numba.core.ir.Assign object at 0x0000029B6D855520>],
             '$8load_method.2': [<numba.core.ir.Assign object at 0x0000029B6D8556A0>],
             '$phi16.0': [<numba.core.ir.Assign object at 0x0000029B6D8553A0>],
             '$phi18.1': [<numba.core.ir.Assign object at 0x0000029B6D855CD0>],
             'arr': [<numba.core.ir.Assign object at 0x0000029B6D851250>],
             'c': [<numba.core.ir.Assign object at 0x0000029B6D855280>,
                   <numba.core.ir.Assign object at 0x0000029B6D85DA90>],
             'v': [<numba.core.ir.Assign object at 0x0000029B6D85D2E0>]})
DEBUG:numba.core.ssa:SSA violators {'c'}
DEBUG:numba.core.ssa:Fix SSA violator on var c
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D8B6DF0>
DEBUG:numba.core.ssa:on stmt: arr = arg(0, name=arr)
DEBUG:numba.core.ssa:on stmt: c = freevar(zero: 0.0)
DEBUG:numba.core.ssa:first assign: c
DEBUG:numba.core.ssa:replaced with: c = freevar(zero: 0.0)
DEBUG:numba.core.ssa:on stmt: $6load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
DEBUG:numba.core.ssa:on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:171)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
DEBUG:numba.core.ssa:on stmt: $phi16.0 = $14get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 16
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 16
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D8B6DF0>
DEBUG:numba.core.ssa:on stmt: $16for_iter.1 = iternext(value=$phi16.0)
DEBUG:numba.core.ssa:on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
DEBUG:numba.core.ssa:on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi18.1 = $16for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $16for_iter.3, 18, 34
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D8B6DF0>
DEBUG:numba.core.ssa:on stmt: v = $phi18.1
DEBUG:numba.core.ssa:on stmt: $24load_method.4 = getattr(value=v, attr=item)
DEBUG:numba.core.ssa:on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: c = $28inplace_add.6
DEBUG:numba.core.ssa:replaced with: c.1 = $28inplace_add.6
DEBUG:numba.core.ssa:on stmt: jump 16
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6D8B6DF0>
DEBUG:numba.core.ssa:on stmt: $36return_value.1 = cast(value=c)
DEBUG:numba.core.ssa:on stmt: return $36return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000029B6D8B90A0>],
             18: [<numba.core.ir.Assign object at 0x0000029B6D8B91F0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D8B6DF0>
DEBUG:numba.core.ssa:on stmt: arr = arg(0, name=arr)
DEBUG:numba.core.ssa:on stmt: c = freevar(zero: 0.0)
DEBUG:numba.core.ssa:on stmt: $6load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
DEBUG:numba.core.ssa:on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:171)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
DEBUG:numba.core.ssa:on stmt: $phi16.0 = $14get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 16
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 16
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D8B6DF0>
DEBUG:numba.core.ssa:on stmt: $16for_iter.1 = iternext(value=$phi16.0)
DEBUG:numba.core.ssa:on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
DEBUG:numba.core.ssa:on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi18.1 = $16for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $16for_iter.3, 18, 34
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D8B6DF0>
DEBUG:numba.core.ssa:on stmt: v = $phi18.1
DEBUG:numba.core.ssa:on stmt: $24load_method.4 = getattr(value=v, attr=item)
DEBUG:numba.core.ssa:on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='c' stmt=$28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 18
DEBUG:numba.core.ssa:idom 16 from label 18
DEBUG:numba.core.ssa:find_def_from_bottom label 16
DEBUG:numba.core.ssa:find_def_from_top label 16
DEBUG:numba.core.ssa:insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 16
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def c = freevar(zero: 0.0)
DEBUG:numba.core.ssa:find_def_from_bottom label 18
DEBUG:numba.core.ssa:incoming_def c.1 = $28inplace_add.6
DEBUG:numba.core.ssa:replaced with: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: c.1 = $28inplace_add.6
DEBUG:numba.core.ssa:on stmt: jump 16
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6D8B6DF0>
DEBUG:numba.core.ssa:on stmt: $36return_value.1 = cast(value=c)
DEBUG:numba.core.ssa:find_def var='c' stmt=$36return_value.1 = cast(value=c)
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 16 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 16
DEBUG:numba.core.ssa:replaced with: $36return_value.1 = cast(value=c.2)
DEBUG:numba.core.ssa:on stmt: return $36return_value.1
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=2941)
           2	LOAD_GLOBAL(arg=0, lineno=2941)
           4	LOAD_FAST(arg=0, lineno=2941)
           6	CALL_FUNCTION(arg=1, lineno=2941)
           8	STORE_FAST(arg=2, lineno=2941)
          10	LOAD_GLOBAL(arg=1, lineno=2942)
          12	LOAD_FAST(arg=2, lineno=2942)
          14	CALL_FUNCTION(arg=1, lineno=2942)
          16	GET_ITER(arg=None, lineno=2942)
>         18	FOR_ITER(arg=40, lineno=2942)
          20	STORE_FAST(arg=3, lineno=2942)
          22	LOAD_FAST(arg=0, lineno=2943)
          24	LOAD_FAST(arg=3, lineno=2943)
          26	BINARY_SUBSCR(arg=None, lineno=2943)
          28	LOAD_FAST(arg=1, lineno=2943)
          30	LOAD_GLOBAL(arg=0, lineno=2943)
          32	LOAD_FAST(arg=1, lineno=2943)
          34	CALL_FUNCTION(arg=1, lineno=2943)
          36	LOAD_FAST(arg=2, lineno=2943)
          38	BINARY_SUBTRACT(arg=None, lineno=2943)
          40	LOAD_FAST(arg=3, lineno=2943)
          42	BINARY_ADD(arg=None, lineno=2943)
          44	BINARY_SUBSCR(arg=None, lineno=2943)
          46	COMPARE_OP(arg=3, lineno=2943)
          48	POP_JUMP_IF_FALSE(arg=18, lineno=2943)
          50	LOAD_GLOBAL(arg=2, lineno=2944)
          52	LOAD_CONST(arg=1, lineno=2944)
          54	CALL_FUNCTION(arg=1, lineno=2944)
          56	RAISE_VARARGS(arg=1, lineno=2944)
          58	JUMP_ABSOLUTE(arg=18, lineno=2944)
>         60	LOAD_CONST(arg=0, lineno=2944)
          62	RETURN_VALUE(arg=None, lineno=2944)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=2941)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2941)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2941)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=2941)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$shape4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=STORE_FAST(arg=2, lineno=2941)
DEBUG:numba.core.byteflow:stack ['$6call_function.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=2942)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=2942)
DEBUG:numba.core.byteflow:stack ['$10load_global.3']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=2942)
DEBUG:numba.core.byteflow:stack ['$10load_global.3', '$n12.4']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=GET_ITER(arg=None, lineno=2942)
DEBUG:numba.core.byteflow:stack ['$14call_function.5']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=18, stack=('$16get_iter.6',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=18 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi18.0']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=FOR_ITER(arg=40, lineno=2942)
DEBUG:numba.core.byteflow:stack ['$phi18.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=('$phi18.0', '$18for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=20 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_CONST(arg=0, lineno=2944)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=62, inst=RETURN_VALUE(arg=None, lineno=2944)
DEBUG:numba.core.byteflow:stack ['$const60.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=20 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi20.0', '$phi20.1']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=STORE_FAST(arg=3, lineno=2942)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$phi20.1']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=2943)
DEBUG:numba.core.byteflow:stack ['$phi20.0']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=2943)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$shape22.2']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=2943)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$shape22.2', '$i24.3']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=2943)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$26binary_subscr.4']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_GLOBAL(arg=0, lineno=2943)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=2943)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$30load_global.6']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=CALL_FUNCTION(arg=1, lineno=2943)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$30load_global.6', '$main_shape32.7']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=2943)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$34call_function.8']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=BINARY_SUBTRACT(arg=None, lineno=2943)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$34call_function.8', '$n36.9']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_FAST(arg=3, lineno=2943)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$38binary_subtract.10']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=BINARY_ADD(arg=None, lineno=2943)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$38binary_subtract.10', '$i40.11']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=2943)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$42binary_add.12']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=COMPARE_OP(arg=3, lineno=2943)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$26binary_subscr.4', '$44binary_subscr.13']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=POP_JUMP_IF_FALSE(arg=18, lineno=2943)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$46compare_op.14']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=50, stack=('$phi20.0',), blockstack=(), npush=0), Edge(pc=18, stack=('$phi20.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=18 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi50.0']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_GLOBAL(arg=2, lineno=2944)
DEBUG:numba.core.byteflow:stack ['$phi50.0']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=2944)
DEBUG:numba.core.byteflow:stack ['$phi50.0', '$50load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=2944)
DEBUG:numba.core.byteflow:stack ['$phi50.0', '$50load_global.1', '$const52.2']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=RAISE_VARARGS(arg=1, lineno=2944)
DEBUG:numba.core.byteflow:stack ['$phi50.0', '$54call_function.3']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=18 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=1): {'$phi18.0'},
             State(pc_initial=20 nstack_initial=2): {'$phi20.1'},
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi18.0': State(pc_initial=0 nstack_initial=0),
 '$phi20.1': State(pc_initial=18 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.0': {('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$phi20.0', State(pc_initial=20 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi18.0': {('$16get_iter.6', State(pc_initial=0 nstack_initial=0))},
 '$phi20.1': {('$18for_iter.2', State(pc_initial=18 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi18.0': '$16get_iter.6'},
             State(pc_initial=18 nstack_initial=1): {'$phi20.1': '$18for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'func': '$2load_global.0', 'args': ['$shape4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$n12.4'}), (14, {'func': '$10load_global.3', 'args': ['$n12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5', 'res': '$16get_iter.6'})), outgoing_phis={'$phi18.0': '$16get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$16get_iter.6',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=18 nstack_initial=1):
AdaptBlockInfo(insts=((18, {'iterator': '$phi18.0', 'pair': '$18for_iter.1', 'indval': '$18for_iter.2', 'pred': '$18for_iter.3'}),), outgoing_phis={'$phi20.1': '$18for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 20: ('$phi18.0', '$18for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=20 nstack_initial=2):
AdaptBlockInfo(insts=((20, {'value': '$phi20.1'}), (22, {'res': '$shape22.2'}), (24, {'res': '$i24.3'}), (26, {'index': '$i24.3', 'target': '$shape22.2', 'res': '$26binary_subscr.4'}), (28, {'res': '$main_shape28.5'}), (30, {'res': '$30load_global.6'}), (32, {'res': '$main_shape32.7'}), (34, {'func': '$30load_global.6', 'args': ['$main_shape32.7'], 'res': '$34call_function.8'}), (36, {'res': '$n36.9'}), (38, {'lhs': '$34call_function.8', 'rhs': '$n36.9', 'res': '$38binary_subtract.10'}), (40, {'res': '$i40.11'}), (42, {'lhs': '$38binary_subtract.10', 'rhs': '$i40.11', 'res': '$42binary_add.12'}), (44, {'index': '$42binary_add.12', 'target': '$main_shape28.5', 'res': '$44binary_subscr.13'}), (46, {'lhs': '$26binary_subscr.4', 'rhs': '$44binary_subscr.13', 'res': '$46compare_op.14'}), (48, {'pred': '$46compare_op.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: ('$phi20.0',), 18: ('$phi20.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$50load_global.1'}), (52, {'res': '$const52.2'}), (54, {'func': '$50load_global.1', 'args': ['$const52.2'], 'res': '$54call_function.3'}), (56, {'exc': '$54call_function.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$const60.0'}), (62, {'retval': '$const60.0', 'castval': '$62return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    shape = arg(0, name=shape)               ['shape']
    main_shape = arg(1, name=main_shape)     ['main_shape']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    n = call $2load_global.0(shape, func=$2load_global.0, args=[Var(shape, arrayobj.py:2941)], kws=(), vararg=None, target=None) ['$2load_global.0', 'n', 'shape']
    $10load_global.3 = global(range: <class 'range'>) ['$10load_global.3']
    $14call_function.5 = call $10load_global.3(n, func=$10load_global.3, args=[Var(n, arrayobj.py:2941)], kws=(), vararg=None, target=None) ['$10load_global.3', '$14call_function.5', 'n']
    $16get_iter.6 = getiter(value=$14call_function.5) ['$14call_function.5', '$16get_iter.6']
    $phi18.0 = $16get_iter.6                 ['$16get_iter.6', '$phi18.0']
    jump 18                                  []
label 18:
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 60             ['$18for_iter.3']
label 20:
    i = $phi20.1                             ['$phi20.1', 'i']
    $26binary_subscr.4 = getitem(value=shape, index=i, fn=<built-in function getitem>) ['$26binary_subscr.4', 'i', 'shape']
    $30load_global.6 = global(len: <built-in function len>) ['$30load_global.6']
    $34call_function.8 = call $30load_global.6(main_shape, func=$30load_global.6, args=[Var(main_shape, arrayobj.py:2941)], kws=(), vararg=None, target=None) ['$30load_global.6', '$34call_function.8', 'main_shape']
    $38binary_subtract.10 = $34call_function.8 - n ['$34call_function.8', '$38binary_subtract.10', 'n']
    $42binary_add.12 = $38binary_subtract.10 + i ['$38binary_subtract.10', '$42binary_add.12', 'i']
    $44binary_subscr.13 = getitem(value=main_shape, index=$42binary_add.12, fn=<built-in function getitem>) ['$42binary_add.12', '$44binary_subscr.13', 'main_shape']
    $46compare_op.14 = $26binary_subscr.4 != $44binary_subscr.13 ['$26binary_subscr.4', '$44binary_subscr.13', '$46compare_op.14']
    bool48 = global(bool: <class 'bool'>)    ['bool48']
    $48pred = call bool48($46compare_op.14, func=bool48, args=(Var($46compare_op.14, arrayobj.py:2943),), kws=(), vararg=None, target=None) ['$46compare_op.14', '$48pred', 'bool48']
    branch $48pred, 50, 18                   ['$48pred']
label 50:
    $50load_global.1 = global(ValueError: <class 'ValueError'>) ['$50load_global.1']
    $const52.2 = const(str, nditer(): operands could not be broadcast together) ['$const52.2']
    $54call_function.3 = call $50load_global.1($const52.2, func=$50load_global.1, args=[Var($const52.2, arrayobj.py:2944)], kws=(), vararg=None, target=None) ['$50load_global.1', '$54call_function.3', '$const52.2']
    raise $54call_function.3                 ['$54call_function.3']
label 60:
    $const60.0 = const(NoneType, None)       ['$const60.0']
    $62return_value.1 = cast(value=$const60.0) ['$62return_value.1', '$const60.0']
    return $62return_value.1                 ['$62return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D8E4730>
DEBUG:numba.core.ssa:on stmt: shape = arg(0, name=shape)
DEBUG:numba.core.ssa:on stmt: main_shape = arg(1, name=main_shape)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: n = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $10load_global.3 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $14call_function.5 = call $10load_global.3(n, func=$10load_global.3, args=[Var(n, arrayobj.py:2941)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $16get_iter.6 = getiter(value=$14call_function.5)
DEBUG:numba.core.ssa:on stmt: $phi18.0 = $16get_iter.6
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:==== SSA block analysis pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D8E4730>
DEBUG:numba.core.ssa:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG:numba.core.ssa:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi20.1 = $18for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $18for_iter.3, 20, 60
DEBUG:numba.core.ssa:==== SSA block analysis pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D8E4730>
DEBUG:numba.core.ssa:on stmt: i = $phi20.1
DEBUG:numba.core.ssa:on stmt: $26binary_subscr.4 = getitem(value=shape, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $30load_global.6 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $34call_function.8 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $38binary_subtract.10 = $34call_function.8 - n
DEBUG:numba.core.ssa:on stmt: $42binary_add.12 = $38binary_subtract.10 + i
DEBUG:numba.core.ssa:on stmt: $44binary_subscr.13 = getitem(value=main_shape, index=$42binary_add.12, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $46compare_op.14 = $26binary_subscr.4 != $44binary_subscr.13
DEBUG:numba.core.ssa:on stmt: bool48 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $48pred = call bool48($46compare_op.14, func=bool48, args=(Var($46compare_op.14, arrayobj.py:2943),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $48pred, 50, 18
DEBUG:numba.core.ssa:==== SSA block analysis pass on 50
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D8E4730>
DEBUG:numba.core.ssa:on stmt: $50load_global.1 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const52.2 = const(str, nditer(): operands could not be broadcast together)
DEBUG:numba.core.ssa:on stmt: $54call_function.3 = call $50load_global.1($const52.2, func=$50load_global.1, args=[Var($const52.2, arrayobj.py:2944)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('nditer(): operands could not be broadcast together')
DEBUG:numba.core.ssa:==== SSA block analysis pass on 60
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D8E4730>
DEBUG:numba.core.ssa:on stmt: $const60.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $62return_value.1 = cast(value=$const60.0)
DEBUG:numba.core.ssa:on stmt: return $62return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10load_global.3': [<numba.core.ir.Assign object at 0x0000029B6D8DCAC0>],
             '$14call_function.5': [<numba.core.ir.Assign object at 0x0000029B6D8DCDC0>],
             '$16get_iter.6': [<numba.core.ir.Assign object at 0x0000029B6D8DCEE0>],
             '$18for_iter.1': [<numba.core.ir.Assign object at 0x0000029B6D8DF190>],
             '$18for_iter.2': [<numba.core.ir.Assign object at 0x0000029B6D8DF2B0>],
             '$18for_iter.3': [<numba.core.ir.Assign object at 0x0000029B6D8DF3D0>],
             '$26binary_subscr.4': [<numba.core.ir.Assign object at 0x0000029B6D8DFA90>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000029B6D8DC580>],
             '$30load_global.6': [<numba.core.ir.Assign object at 0x0000029B6D8DFD00>],
             '$34call_function.8': [<numba.core.ir.Assign object at 0x0000029B6D8E2040>],
             '$38binary_subtract.10': [<numba.core.ir.Assign object at 0x0000029B6D8E22B0>],
             '$42binary_add.12': [<numba.core.ir.Assign object at 0x0000029B6D8E2550>],
             '$44binary_subscr.13': [<numba.core.ir.Assign object at 0x0000029B6D8E26D0>],
             '$46compare_op.14': [<numba.core.ir.Assign object at 0x0000029B6D8E2850>],
             '$48pred': [<numba.core.ir.Assign object at 0x0000029B6D8E2AC0>],
             '$50load_global.1': [<numba.core.ir.Assign object at 0x0000029B6D8E2190>],
             '$54call_function.3': [<numba.core.ir.Assign object at 0x0000029B6D8E2E80>],
             '$62return_value.1': [<numba.core.ir.Assign object at 0x0000029B6D8E42E0>],
             '$const52.2': [<numba.core.ir.Assign object at 0x0000029B6D8E2CA0>],
             '$const60.0': [<numba.core.ir.Assign object at 0x0000029B6D8E4160>],
             '$phi18.0': [<numba.core.ir.Assign object at 0x0000029B6D8DC730>],
             '$phi20.1': [<numba.core.ir.Assign object at 0x0000029B6D8DF0D0>],
             'bool48': [<numba.core.ir.Assign object at 0x0000029B6D8E29A0>],
             'i': [<numba.core.ir.Assign object at 0x0000029B6D8DF6A0>],
             'main_shape': [<numba.core.ir.Assign object at 0x0000029B6D8DC400>],
             'n': [<numba.core.ir.Assign object at 0x0000029B6D8DC880>],
             'shape': [<numba.core.ir.Assign object at 0x0000029B6D8DC2E0>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=58)
           2	LOAD_FAST(arg=0, lineno=58)
           4	LOAD_FAST(arg=1, lineno=56)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=58)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=58)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=56)
DEBUG:numba.core.byteflow:stack ['$_134binary_subscr_8_12.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$_134binary_subscr_8_12.0', '$s_34.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$6binary_true_divide.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_134binary_subscr_8_12.0'}), (4, {'res': '$s_34.1'}), (6, {'lhs': '$_134binary_subscr_8_12.0', 'rhs': '$s_34.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    _134binary_subscr_8_1 = arg(0, name=_134binary_subscr_8_1) ['_134binary_subscr_8_1']
    s_3 = arg(1, name=s_3)                   ['s_3']
    $6binary_true_divide.2 = _134binary_subscr_8_1 / s_3 ['$6binary_true_divide.2', '_134binary_subscr_8_1', 's_3']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6D8CFDC0>
DEBUG:numba.core.ssa:on stmt: _134binary_subscr_8_1 = arg(0, name=_134binary_subscr_8_1)
DEBUG:numba.core.ssa:on stmt: s_3 = arg(1, name=s_3)
DEBUG:numba.core.ssa:on stmt: $6binary_true_divide.2 = _134binary_subscr_8_1 / s_3
DEBUG:numba.core.ssa:on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $8return_value.3
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x0000029B6D904340>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000029B6D904310>],
             '_134binary_subscr_8_1': [<numba.core.ir.Assign object at 0x0000029B6D904B80>],
             's_3': [<numba.core.ir.Assign object at 0x0000029B6D904D00>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=64)
           2	LOAD_FAST(arg=0, lineno=64)
           4	LOAD_FAST(arg=1, lineno=64)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=64)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=64)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=64)
DEBUG:numba.core.byteflow:stack ['$_204call_function_kw_6_12.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$_204call_function_kw_6_12.0', '$_212call_method_10_14.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$6binary_true_divide.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_204call_function_kw_6_12.0'}), (4, {'res': '$_212call_method_10_14.1'}), (6, {'lhs': '$_204call_function_kw_6_12.0', 'rhs': '$_212call_method_10_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    _204call_function_kw_6_1 = arg(0, name=_204call_function_kw_6_1) ['_204call_function_kw_6_1']
    _212call_method_10_1 = arg(1, name=_212call_method_10_1) ['_212call_method_10_1']
    $6binary_true_divide.2 = _204call_function_kw_6_1 / _212call_method_10_1 ['$6binary_true_divide.2', '_204call_function_kw_6_1', '_212call_method_10_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DA91C10>
DEBUG:numba.core.ssa:on stmt: _204call_function_kw_6_1 = arg(0, name=_204call_function_kw_6_1)
DEBUG:numba.core.ssa:on stmt: _212call_method_10_1 = arg(1, name=_212call_method_10_1)
DEBUG:numba.core.ssa:on stmt: $6binary_true_divide.2 = _204call_function_kw_6_1 / _212call_method_10_1
DEBUG:numba.core.ssa:on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $8return_value.3
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x0000029B6DA9A820>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000029B6DA9A970>],
             '_204call_function_kw_6_1': [<numba.core.ir.Assign object at 0x0000029B6DA91790>],
             '_212call_method_10_1': [<numba.core.ir.Assign object at 0x0000029B6DA915B0>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=66)
           2	LOAD_FAST(arg=0, lineno=66)
           4	LOAD_CONST(arg=1, lineno=1)
           6	BINARY_POWER(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=66)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=66)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1)
DEBUG:numba.core.byteflow:stack ['$_250binary_subscr_13_12.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=BINARY_POWER(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$_250binary_subscr_13_12.0', '$const4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$6binary_power.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_250binary_subscr_13_12.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$_250binary_subscr_13_12.0', 'rhs': '$const4.1', 'res': '$6binary_power.2'}), (8, {'retval': '$6binary_power.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    _250binary_subscr_13_1 = arg(0, name=_250binary_subscr_13_1) ['_250binary_subscr_13_1']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_power.2 = _250binary_subscr_13_1 ** $const4.1 ['$6binary_power.2', '$const4.1', '_250binary_subscr_13_1']
    $8return_value.3 = cast(value=$6binary_power.2) ['$6binary_power.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DB0AD00>
DEBUG:numba.core.ssa:on stmt: _250binary_subscr_13_1 = arg(0, name=_250binary_subscr_13_1)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $6binary_power.2 = _250binary_subscr_13_1 ** $const4.1
DEBUG:numba.core.ssa:on stmt: $8return_value.3 = cast(value=$6binary_power.2)
DEBUG:numba.core.ssa:on stmt: return $8return_value.3
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$6binary_power.2': [<numba.core.ir.Assign object at 0x0000029B6DB0F7F0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000029B6DB0F940>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000029B6DB0F640>],
             '_250binary_subscr_13_1': [<numba.core.ir.Assign object at 0x0000029B6DB0F3A0>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=217)
           2	LOAD_DEREF(arg=1, lineno=217)
           4	LOAD_CONST(arg=1, lineno=217)
           6	CALL_FUNCTION(arg=1, lineno=217)
           8	STORE_FAST(arg=2, lineno=217)
          10	LOAD_DEREF(arg=1, lineno=218)
          12	LOAD_FAST(arg=0, lineno=218)
          14	CALL_FUNCTION(arg=1, lineno=218)
          16	STORE_FAST(arg=0, lineno=218)
          18	LOAD_FAST(arg=1, lineno=219)
          20	LOAD_CONST(arg=2, lineno=219)
          22	COMPARE_OP(arg=0, lineno=219)
          24	POP_JUMP_IF_FALSE(arg=98, lineno=219)
          26	LOAD_CONST(arg=3, lineno=220)
          28	STORE_FAST(arg=3, lineno=220)
          30	LOAD_FAST(arg=1, lineno=221)
          32	UNARY_NEGATIVE(arg=None, lineno=221)
          34	STORE_FAST(arg=4, lineno=221)
          36	LOAD_FAST(arg=4, lineno=222)
          38	LOAD_CONST(arg=2, lineno=222)
          40	COMPARE_OP(arg=0, lineno=222)
          42	POP_JUMP_IF_FALSE(arg=48, lineno=222)
          44	LOAD_GLOBAL(arg=0, lineno=223)
          46	RAISE_VARARGS(arg=1, lineno=223)
>         48	LOAD_DEREF(arg=0, lineno=224)
          50	POP_JUMP_IF_FALSE(arg=106, lineno=224)
          52	LOAD_FAST(arg=0, lineno=225)
          54	LOAD_CONST(arg=2, lineno=225)
          56	COMPARE_OP(arg=2, lineno=225)
          58	POP_JUMP_IF_FALSE(arg=76, lineno=225)
          60	LOAD_DEREF(arg=2, lineno=226)
          62	POP_JUMP_IF_FALSE(arg=68, lineno=226)
          64	LOAD_DEREF(arg=2, lineno=227)
          66	RETURN_VALUE(arg=None, lineno=227)
>         68	LOAD_GLOBAL(arg=1, lineno=229)
          70	LOAD_CONST(arg=4, lineno=229)
          72	CALL_FUNCTION(arg=1, lineno=229)
          74	RAISE_VARARGS(arg=1, lineno=229)
>         76	LOAD_FAST(arg=0, lineno=230)
          78	LOAD_CONST(arg=1, lineno=230)
          80	COMPARE_OP(arg=3, lineno=230)
          82	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          84	LOAD_FAST(arg=0, lineno=230)
          86	LOAD_CONST(arg=5, lineno=230)
          88	COMPARE_OP(arg=3, lineno=230)
          90	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          92	LOAD_CONST(arg=2, lineno=231)
          94	RETURN_VALUE(arg=None, lineno=231)
          96	JUMP_FORWARD(arg=8, lineno=231)
>         98	LOAD_CONST(arg=6, lineno=233)
         100	STORE_FAST(arg=3, lineno=233)
         102	LOAD_FAST(arg=1, lineno=234)
         104	STORE_FAST(arg=4, lineno=234)
>        106	LOAD_FAST(arg=4, lineno=235)
         108	LOAD_CONST(arg=7, lineno=235)
         110	COMPARE_OP(arg=4, lineno=235)
         112	POP_JUMP_IF_FALSE(arg=130, lineno=235)
         114	LOAD_GLOBAL(arg=2, lineno=237)
         116	LOAD_METHOD(arg=3, lineno=237)
         118	LOAD_FAST(arg=0, lineno=237)
         120	LOAD_GLOBAL(arg=4, lineno=237)
         122	LOAD_FAST(arg=1, lineno=237)
         124	CALL_FUNCTION(arg=1, lineno=237)
         126	CALL_METHOD(arg=2, lineno=237)
         128	RETURN_VALUE(arg=None, lineno=237)
>        130	LOAD_FAST(arg=4, lineno=238)
         132	LOAD_CONST(arg=2, lineno=238)
         134	COMPARE_OP(arg=3, lineno=238)
         136	POP_JUMP_IF_FALSE(arg=172, lineno=238)
         138	LOAD_FAST(arg=4, lineno=239)
         140	LOAD_CONST(arg=1, lineno=239)
         142	BINARY_AND(arg=None, lineno=239)
         144	POP_JUMP_IF_FALSE(arg=154, lineno=239)
         146	LOAD_FAST(arg=2, lineno=240)
         148	LOAD_FAST(arg=0, lineno=240)
         150	INPLACE_MULTIPLY(arg=None, lineno=240)
         152	STORE_FAST(arg=2, lineno=240)
>        154	LOAD_FAST(arg=4, lineno=241)
         156	LOAD_CONST(arg=1, lineno=241)
         158	INPLACE_RSHIFT(arg=None, lineno=241)
         160	STORE_FAST(arg=4, lineno=241)
         162	LOAD_FAST(arg=0, lineno=242)
         164	LOAD_FAST(arg=0, lineno=242)
         166	INPLACE_MULTIPLY(arg=None, lineno=242)
         168	STORE_FAST(arg=0, lineno=242)
         170	JUMP_ABSOLUTE(arg=130, lineno=242)
>        172	LOAD_FAST(arg=3, lineno=244)
         174	POP_JUMP_IF_FALSE(arg=184, lineno=244)
         176	LOAD_CONST(arg=8, lineno=244)
         178	LOAD_FAST(arg=2, lineno=244)
         180	BINARY_TRUE_DIVIDE(arg=None, lineno=244)
         182	RETURN_VALUE(arg=None, lineno=244)
>        184	LOAD_FAST(arg=2, lineno=244)
         186	RETURN_VALUE(arg=None, lineno=244)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=217)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=217)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=217)
DEBUG:numba.core.byteflow:stack ['$2load_deref.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=217)
DEBUG:numba.core.byteflow:stack ['$2load_deref.0', '$const4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=STORE_FAST(arg=2, lineno=217)
DEBUG:numba.core.byteflow:stack ['$6call_function.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=218)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=218)
DEBUG:numba.core.byteflow:stack ['$10load_deref.3']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=218)
DEBUG:numba.core.byteflow:stack ['$10load_deref.3', '$a12.4']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=0, lineno=218)
DEBUG:numba.core.byteflow:stack ['$14call_function.5']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=219)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=219)
DEBUG:numba.core.byteflow:stack ['$b18.6']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=219)
DEBUG:numba.core.byteflow:stack ['$b18.6', '$const20.7']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=98, lineno=219)
DEBUG:numba.core.byteflow:stack ['$22compare_op.8']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=220)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=28, inst=STORE_FAST(arg=3, lineno=220)
DEBUG:numba.core.byteflow:stack ['$const26.0']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=221)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=221)
DEBUG:numba.core.byteflow:stack ['$b30.1']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=STORE_FAST(arg=4, lineno=221)
DEBUG:numba.core.byteflow:stack ['$32unary_negative.2']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=222)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=222)
DEBUG:numba.core.byteflow:stack ['$exp36.3']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=222)
DEBUG:numba.core.byteflow:stack ['$exp36.3', '$const38.4']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=48, lineno=222)
DEBUG:numba.core.byteflow:stack ['$40compare_op.5']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=233)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=100, inst=STORE_FAST(arg=3, lineno=233)
DEBUG:numba.core.byteflow:stack ['$const98.0']
DEBUG:numba.core.byteflow:dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=234)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=104, inst=STORE_FAST(arg=4, lineno=234)
DEBUG:numba.core.byteflow:stack ['$b102.1']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=223)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=223)
DEBUG:numba.core.byteflow:stack ['$44load_global.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=224)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=106, lineno=224)
DEBUG:numba.core.byteflow:stack ['$48load_deref.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=235)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=235)
DEBUG:numba.core.byteflow:stack ['$exp106.0']
DEBUG:numba.core.byteflow:dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=235)
DEBUG:numba.core.byteflow:stack ['$exp106.0', '$const108.1']
DEBUG:numba.core.byteflow:dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=130, lineno=235)
DEBUG:numba.core.byteflow:stack ['$110compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=225)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=225)
DEBUG:numba.core.byteflow:stack ['$a52.0']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=225)
DEBUG:numba.core.byteflow:stack ['$a52.0', '$const54.1']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=76, lineno=225)
DEBUG:numba.core.byteflow:stack ['$56compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=237)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=237)
DEBUG:numba.core.byteflow:stack ['$114load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=237)
DEBUG:numba.core.byteflow:stack ['$116load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=237)
DEBUG:numba.core.byteflow:stack ['$116load_method.1', '$a118.2']
DEBUG:numba.core.byteflow:dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=237)
DEBUG:numba.core.byteflow:stack ['$116load_method.1', '$a118.2', '$120load_global.3']
DEBUG:numba.core.byteflow:dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=237)
DEBUG:numba.core.byteflow:stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
DEBUG:numba.core.byteflow:dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=237)
DEBUG:numba.core.byteflow:stack ['$116load_method.1', '$a118.2', '$124call_function.5']
DEBUG:numba.core.byteflow:dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=237)
DEBUG:numba.core.byteflow:stack ['$126call_method.6']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=238)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=132, inst=LOAD_CONST(arg=2, lineno=238)
DEBUG:numba.core.byteflow:stack ['$exp130.0']
DEBUG:numba.core.byteflow:dispatch pc=134, inst=COMPARE_OP(arg=3, lineno=238)
DEBUG:numba.core.byteflow:stack ['$exp130.0', '$const132.1']
DEBUG:numba.core.byteflow:dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=172, lineno=238)
DEBUG:numba.core.byteflow:stack ['$134compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=172, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=226)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=68, lineno=226)
DEBUG:numba.core.byteflow:stack ['$60load_deref.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=230)
DEBUG:numba.core.byteflow:stack ['$a76.0']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG:numba.core.byteflow:stack ['$a76.0', '$const78.1']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG:numba.core.byteflow:stack ['$80compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=138, inst=LOAD_FAST(arg=4, lineno=239)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=140, inst=LOAD_CONST(arg=1, lineno=239)
DEBUG:numba.core.byteflow:stack ['$exp138.0']
DEBUG:numba.core.byteflow:dispatch pc=142, inst=BINARY_AND(arg=None, lineno=239)
DEBUG:numba.core.byteflow:stack ['$exp138.0', '$const140.1']
DEBUG:numba.core.byteflow:dispatch pc=144, inst=POP_JUMP_IF_FALSE(arg=154, lineno=239)
DEBUG:numba.core.byteflow:stack ['$142binary_and.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=172, inst=LOAD_FAST(arg=3, lineno=244)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=174, inst=POP_JUMP_IF_FALSE(arg=184, lineno=244)
DEBUG:numba.core.byteflow:stack ['$invert172.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0), Edge(pc=184, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=227)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=227)
DEBUG:numba.core.byteflow:stack ['$64load_deref.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=229)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=229)
DEBUG:numba.core.byteflow:stack ['$68load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=229)
DEBUG:numba.core.byteflow:stack ['$68load_global.0', '$const70.1']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=229)
DEBUG:numba.core.byteflow:stack ['$72call_function.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=230)
DEBUG:numba.core.byteflow:stack ['$a84.0']
DEBUG:numba.core.byteflow:dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG:numba.core.byteflow:stack ['$a84.0', '$const86.1']
DEBUG:numba.core.byteflow:dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG:numba.core.byteflow:stack ['$88compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=240)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=148, inst=LOAD_FAST(arg=0, lineno=240)
DEBUG:numba.core.byteflow:stack ['$r146.0']
DEBUG:numba.core.byteflow:dispatch pc=150, inst=INPLACE_MULTIPLY(arg=None, lineno=240)
DEBUG:numba.core.byteflow:stack ['$r146.0', '$a148.1']
DEBUG:numba.core.byteflow:dispatch pc=152, inst=STORE_FAST(arg=2, lineno=240)
DEBUG:numba.core.byteflow:stack ['$150inplace_multiply.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=154, inst=LOAD_FAST(arg=4, lineno=241)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=156, inst=LOAD_CONST(arg=1, lineno=241)
DEBUG:numba.core.byteflow:stack ['$exp154.0']
DEBUG:numba.core.byteflow:dispatch pc=158, inst=INPLACE_RSHIFT(arg=None, lineno=241)
DEBUG:numba.core.byteflow:stack ['$exp154.0', '$const156.1']
DEBUG:numba.core.byteflow:dispatch pc=160, inst=STORE_FAST(arg=4, lineno=241)
DEBUG:numba.core.byteflow:stack ['$158inplace_rshift.2']
DEBUG:numba.core.byteflow:dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG:numba.core.byteflow:stack ['$a162.3']
DEBUG:numba.core.byteflow:dispatch pc=166, inst=INPLACE_MULTIPLY(arg=None, lineno=242)
DEBUG:numba.core.byteflow:stack ['$a162.3', '$a164.4']
DEBUG:numba.core.byteflow:dispatch pc=168, inst=STORE_FAST(arg=0, lineno=242)
DEBUG:numba.core.byteflow:stack ['$166inplace_multiply.5']
DEBUG:numba.core.byteflow:dispatch pc=170, inst=JUMP_ABSOLUTE(arg=130, lineno=242)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=176, inst=LOAD_CONST(arg=8, lineno=244)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=178, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG:numba.core.byteflow:stack ['$const176.0']
DEBUG:numba.core.byteflow:dispatch pc=180, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=244)
DEBUG:numba.core.byteflow:stack ['$const176.0', '$r178.1']
DEBUG:numba.core.byteflow:dispatch pc=182, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG:numba.core.byteflow:stack ['$180binary_true_divide.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=186, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG:numba.core.byteflow:stack ['$r184.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=231)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=231)
DEBUG:numba.core.byteflow:stack ['$const92.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=130 nstack_initial=0)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=172 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=184 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 106: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 106: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 106: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$exp130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$exp130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 172: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$exp138.0'}), (140, {'res': '$const140.1'}), (142, {'lhs': '$exp138.0', 'rhs': '$const140.1', 'res': '$142binary_and.2'}), (144, {'pred': '$142binary_and.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: (), 154: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$r146.0'}), (148, {'res': '$a148.1'}), (150, {'lhs': '$r146.0', 'rhs': '$a148.1', 'res': '$150inplace_multiply.2'}), (152, {'value': '$150inplace_multiply.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$exp154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$exp154.0', 'rhs': '$const156.1', 'res': '$158inplace_rshift.2'}), (160, {'value': '$158inplace_rshift.2'}), (162, {'res': '$a162.3'}), (164, {'res': '$a164.4'}), (166, {'lhs': '$a162.3', 'rhs': '$a164.4', 'res': '$166inplace_multiply.5'}), (168, {'value': '$166inplace_multiply.5'}), (170, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=172 nstack_initial=0):
AdaptBlockInfo(insts=((172, {'res': '$invert172.0'}), (174, {'pred': '$invert172.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: (), 184: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$const176.0'}), (178, {'res': '$r178.1'}), (180, {'lhs': '$const176.0', 'rhs': '$r178.1', 'res': '$180binary_true_divide.2'}), (182, {'retval': '$180binary_true_divide.2', 'castval': '$182return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=184 nstack_initial=0):
AdaptBlockInfo(insts=((184, {'res': '$r184.0'}), (186, {'retval': '$r184.0', 'castval': '$186return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_deref.0 = freevar(tp: float32)    ['$2load_deref.0']
    $const4.1 = const(int, 1)                ['$const4.1']
    r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None) ['$2load_deref.0', '$const4.1', 'r']
    $10load_deref.3 = freevar(tp: float32)   ['$10load_deref.3']
    a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None) ['$10load_deref.3', 'a', 'a.1']
    $const20.7 = const(int, 0)               ['$const20.7']
    $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None) ['$22compare_op.8', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None) ['$40compare_op.5', '$42pred', 'bool42']
    branch $42pred, 44, 48                   ['$42pred']
label 44:
    $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
    raise $44load_global.0                   ['$44load_global.0']
label 48:
    $48load_deref.0 = freevar(is_integer: False) ['$48load_deref.0']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None) ['$48load_deref.0', '$50pred', 'bool50']
    branch $50pred, 52, 106                  ['$50pred']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None) ['$56compare_op.2', '$58pred', 'bool58']
    branch $58pred, 60, 76                   ['$58pred']
label 60:
    $60load_deref.0 = freevar(zerodiv_return: False) ['$60load_deref.0']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None) ['$60load_deref.0', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $64load_deref.0 = freevar(zerodiv_return: False) ['$64load_deref.0']
    $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
    $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:229)], kws=(), vararg=None, target=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
    branch $82pred, 84, 106                  ['$82pred']
label 84:
    $const86.1 = const(int, -1)              ['$const86.1']
    $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 106                  ['$90pred']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']
label 98:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const108.1 = const(int, 65536)          ['$const108.1']
    $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None) ['$110compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 130                ['$112pred']
label 114:
    $114load_global.0 = global(math: <module 'math' (built-in)>) ['$114load_global.0']
    $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
    $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
    $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None) ['$120load_global.3', '$124call_function.5', 'b']
    $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
    $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
    return $128return_value.7                ['$128return_value.7']
label 130:
    $const132.1 = const(int, 0)              ['$const132.1']
    $134compare_op.2 = exp != $const132.1    ['$134compare_op.2', '$const132.1', 'exp']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 172                ['$136pred']
label 138:
    $const140.1 = const(int, 1)              ['$const140.1']
    $142binary_and.2 = exp & $const140.1     ['$142binary_and.2', '$const140.1', 'exp']
    bool144 = global(bool: <class 'bool'>)   ['bool144']
    $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None) ['$142binary_and.2', '$144pred', 'bool144']
    branch $144pred, 146, 154                ['$144pred']
label 146:
    $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$150inplace_multiply.2', 'a.1', 'r']
    r = $150inplace_multiply.2               ['$150inplace_multiply.2', 'r']
    jump 154                                 []
label 154:
    $const156.1 = const(int, 1)              ['$const156.1']
    $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined) ['$158inplace_rshift.2', '$const156.1', 'exp']
    exp = $158inplace_rshift.2               ['$158inplace_rshift.2', 'exp']
    $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$166inplace_multiply.5', 'a.1', 'a.1']
    a.1 = $166inplace_multiply.5             ['$166inplace_multiply.5', 'a.1']
    jump 130                                 []
label 172:
    bool174 = global(bool: <class 'bool'>)   ['bool174']
    $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None) ['$174pred', 'bool174', 'invert']
    branch $174pred, 176, 184                ['$174pred']
label 176:
    $const176.0 = const(float, 1.0)          ['$const176.0']
    $180binary_true_divide.2 = $const176.0 / r ['$180binary_true_divide.2', '$const176.0', 'r']
    $182return_value.3 = cast(value=$180binary_true_divide.2) ['$180binary_true_divide.2', '$182return_value.3']
    return $182return_value.3                ['$182return_value.3']
label 184:
    $186return_value.1 = cast(value=r)       ['$186return_value.1', 'r']
    return $186return_value.1                ['$186return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DB0FEE0>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float32)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float32)
DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
DEBUG:numba.core.ssa:==== SSA block analysis pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DB0FEE0>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
DEBUG:numba.core.ssa:==== SSA block analysis pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DB0FEE0>
DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
DEBUG:numba.core.ssa:==== SSA block analysis pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DB0FEE0>
DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block analysis pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DB0FEE0>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
DEBUG:numba.core.ssa:on stmt: exp = b
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block analysis pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DB0FEE0>
DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp > $const108.1
DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
DEBUG:numba.core.ssa:==== SSA block analysis pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DB0FEE0>
DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG:numba.core.ssa:on stmt: return $128return_value.7
DEBUG:numba.core.ssa:==== SSA block analysis pass on 130
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DB0FEE0>
DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp != $const132.1
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
DEBUG:numba.core.ssa:==== SSA block analysis pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DB0FEE0>
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp & $const140.1
DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
DEBUG:numba.core.ssa:==== SSA block analysis pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DB0FEE0>
DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: r = $150inplace_multiply.2
DEBUG:numba.core.ssa:on stmt: jump 154
DEBUG:numba.core.ssa:==== SSA block analysis pass on 154
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DB0FEE0>
DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: exp = $158inplace_rshift.2
DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: a.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 130
DEBUG:numba.core.ssa:==== SSA block analysis pass on 172
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DB0FEE0>
DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
DEBUG:numba.core.ssa:==== SSA block analysis pass on 176
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DB0FEE0>
DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $182return_value.3
DEBUG:numba.core.ssa:==== SSA block analysis pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DB0FEE0>
DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r)
DEBUG:numba.core.ssa:on stmt: return $186return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [<numba.core.ir.Assign object at 0x0000029B6DB34460>],
             '$110compare_op.2': [<numba.core.ir.Assign object at 0x0000029B6DB3FDF0>],
             '$112pred': [<numba.core.ir.Assign object at 0x0000029B6DB410A0>],
             '$114load_global.0': [<numba.core.ir.Assign object at 0x0000029B6DB412E0>],
             '$116load_method.1': [<numba.core.ir.Assign object at 0x0000029B6DB41460>],
             '$120load_global.3': [<numba.core.ir.Assign object at 0x0000029B6DB41700>],
             '$124call_function.5': [<numba.core.ir.Assign object at 0x0000029B6DB41A00>],
             '$126call_method.6': [<numba.core.ir.Assign object at 0x0000029B6DB41BB0>],
             '$128return_value.7': [<numba.core.ir.Assign object at 0x0000029B6DB41CA0>],
             '$134compare_op.2': [<numba.core.ir.Assign object at 0x0000029B6DB43190>],
             '$136pred': [<numba.core.ir.Assign object at 0x0000029B6DB43400>],
             '$142binary_and.2': [<numba.core.ir.Assign object at 0x0000029B6DB43910>],
             '$144pred': [<numba.core.ir.Assign object at 0x0000029B6DB43B80>],
             '$150inplace_multiply.2': [<numba.core.ir.Assign object at 0x0000029B6DB45070>],
             '$158inplace_rshift.2': [<numba.core.ir.Assign object at 0x0000029B6DB455B0>],
             '$166inplace_multiply.5': [<numba.core.ir.Assign object at 0x0000029B6DB45A30>],
             '$174pred': [<numba.core.ir.Assign object at 0x0000029B6DB45EE0>],
             '$180binary_true_divide.2': [<numba.core.ir.Assign object at 0x0000029B6DB47430>],
             '$182return_value.3': [<numba.core.ir.Assign object at 0x0000029B6DB47580>],
             '$186return_value.1': [<numba.core.ir.Assign object at 0x0000029B6DB478E0>],
             '$22compare_op.8': [<numba.core.ir.Assign object at 0x0000029B6DB34C70>],
             '$24pred': [<numba.core.ir.Assign object at 0x0000029B6DB0AFA0>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x0000029B6DB1DE80>],
             '$40compare_op.5': [<numba.core.ir.Assign object at 0x0000029B6DB38070>],
             '$42pred': [<numba.core.ir.Assign object at 0x0000029B6DB382E0>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x0000029B6DB38400>],
             '$48load_deref.0': [<numba.core.ir.Assign object at 0x0000029B6DB38700>],
             '$50pred': [<numba.core.ir.Assign object at 0x0000029B6DB389A0>],
             '$const108.1': [<numba.core.ir.Assign object at 0x0000029B6DB3FC40>],
             '$const132.1': [<numba.core.ir.Assign object at 0x0000029B6DB41FA0>],
             '$const140.1': [<numba.core.ir.Assign object at 0x0000029B6DB43760>],
             '$const156.1': [<numba.core.ir.Assign object at 0x0000029B6DB45400>],
             '$const176.0': [<numba.core.ir.Assign object at 0x0000029B6DB47160>],
             '$const20.7': [<numba.core.ir.Assign object at 0x0000029B6DB34AC0>],
             '$const38.4': [<numba.core.ir.Assign object at 0x0000029B6DB34E80>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000029B6DB34040>],
             'a': [<numba.core.ir.Assign object at 0x0000029B6DB1DAC0>],
             'a.1': [<numba.core.ir.Assign object at 0x0000029B6DB34760>,
                     <numba.core.ir.Assign object at 0x0000029B6DB45AF0>],
             'b': [<numba.core.ir.Assign object at 0x0000029B6DB1DDC0>],
             'bool112': [<numba.core.ir.Assign object at 0x0000029B6DB3FF40>],
             'bool136': [<numba.core.ir.Assign object at 0x0000029B6DB432E0>],
             'bool144': [<numba.core.ir.Assign object at 0x0000029B6DB43A60>],
             'bool174': [<numba.core.ir.Assign object at 0x0000029B6DB45DC0>],
             'bool24': [<numba.core.ir.Assign object at 0x0000029B6DB0ACD0>],
             'bool42': [<numba.core.ir.Assign object at 0x0000029B6DB381C0>],
             'bool50': [<numba.core.ir.Assign object at 0x0000029B6DB38880>],
             'exp': [<numba.core.ir.Assign object at 0x0000029B6DB1A250>,
                     <numba.core.ir.Assign object at 0x0000029B6DB3F9D0>,
                     <numba.core.ir.Assign object at 0x0000029B6DB45670>],
             'invert': [<numba.core.ir.Assign object at 0x0000029B6DB004C0>,
                        <numba.core.ir.Assign object at 0x0000029B6DB3F700>],
             'r': [<numba.core.ir.Assign object at 0x0000029B6DB34220>,
                   <numba.core.ir.Assign object at 0x0000029B6DB45130>]})
DEBUG:numba.core.ssa:SSA violators {'r', 'exp', 'a.1', 'invert'}
DEBUG:numba.core.ssa:Fix SSA violator on var r
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float32)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:first assign: r
DEBUG:numba.core.ssa:replaced with: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float32)
DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
DEBUG:numba.core.ssa:on stmt: exp = b
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp > $const108.1
DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG:numba.core.ssa:on stmt: return $128return_value.7
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp != $const132.1
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp & $const140.1
DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: r = $150inplace_multiply.2
DEBUG:numba.core.ssa:replaced with: r.1 = $150inplace_multiply.2
DEBUG:numba.core.ssa:on stmt: jump 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: exp = $158inplace_rshift.2
DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: a.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $182return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r)
DEBUG:numba.core.ssa:on stmt: return $186return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000029B6DB1AD30>],
             146: [<numba.core.ir.Assign object at 0x0000029B6DB16760>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float32)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float32)
DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
DEBUG:numba.core.ssa:on stmt: exp = b
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp > $const108.1
DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG:numba.core.ssa:on stmt: return $128return_value.7
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp != $const132.1
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp & $const140.1
DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='r' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 146
DEBUG:numba.core.ssa:idom 138 from label 146
DEBUG:numba.core.ssa:find_def_from_bottom label 138
DEBUG:numba.core.ssa:find_def_from_top label 138
DEBUG:numba.core.ssa:idom 130 from label 138
DEBUG:numba.core.ssa:find_def_from_bottom label 130
DEBUG:numba.core.ssa:find_def_from_top label 130
DEBUG:numba.core.ssa:insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG:numba.core.ssa:find_def_from_bottom label 106
DEBUG:numba.core.ssa:find_def_from_top label 106
DEBUG:numba.core.ssa:idom 0 from label 106
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def_from_bottom label 154
DEBUG:numba.core.ssa:find_def_from_top label 154
DEBUG:numba.core.ssa:insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 154
DEBUG:numba.core.ssa:find_def_from_bottom label 138
DEBUG:numba.core.ssa:find_def_from_top label 138
DEBUG:numba.core.ssa:idom 130 from label 138
DEBUG:numba.core.ssa:find_def_from_bottom label 130
DEBUG:numba.core.ssa:incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:217)], incoming_blocks=[106])
DEBUG:numba.core.ssa:find_def_from_bottom label 146
DEBUG:numba.core.ssa:incoming_def r.1 = $150inplace_multiply.2
DEBUG:numba.core.ssa:incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG:numba.core.ssa:replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: r.1 = $150inplace_multiply.2
DEBUG:numba.core.ssa:on stmt: jump 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: exp = $158inplace_rshift.2
DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: a.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG:numba.core.ssa:find_def var='r' stmt=$180binary_true_divide.2 = $const176.0 / r
DEBUG:numba.core.ssa:find_def_from_top label 176
DEBUG:numba.core.ssa:idom 172 from label 176
DEBUG:numba.core.ssa:find_def_from_bottom label 172
DEBUG:numba.core.ssa:find_def_from_top label 172
DEBUG:numba.core.ssa:idom 130 from label 172
DEBUG:numba.core.ssa:find_def_from_bottom label 130
DEBUG:numba.core.ssa:replaced with: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $182return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r)
DEBUG:numba.core.ssa:find_def var='r' stmt=$186return_value.1 = cast(value=r)
DEBUG:numba.core.ssa:find_def_from_top label 184
DEBUG:numba.core.ssa:idom 172 from label 184
DEBUG:numba.core.ssa:find_def_from_bottom label 172
DEBUG:numba.core.ssa:find_def_from_top label 172
DEBUG:numba.core.ssa:idom 130 from label 172
DEBUG:numba.core.ssa:find_def_from_bottom label 130
DEBUG:numba.core.ssa:replaced with: $186return_value.1 = cast(value=r.2)
DEBUG:numba.core.ssa:on stmt: return $186return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var exp
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float32)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float32)
DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:first assign: exp
DEBUG:numba.core.ssa:replaced with: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
DEBUG:numba.core.ssa:on stmt: exp = b
DEBUG:numba.core.ssa:replaced with: exp.1 = b
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp > $const108.1
DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG:numba.core.ssa:on stmt: return $128return_value.7
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp != $const132.1
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp & $const140.1
DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: r.1 = $150inplace_multiply.2
DEBUG:numba.core.ssa:on stmt: jump 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: exp = $158inplace_rshift.2
DEBUG:numba.core.ssa:replaced with: exp.2 = $158inplace_rshift.2
DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: a.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $182return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r.2)
DEBUG:numba.core.ssa:on stmt: return $186return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x0000029B6DB16640>],
             98: [<numba.core.ir.Assign object at 0x0000029B6DB16790>],
             154: [<numba.core.ir.Assign object at 0x0000029B6DB6FC70>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float32)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float32)
DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:find_def var='exp' stmt=$40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
DEBUG:numba.core.ssa:on stmt: exp.1 = b
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp > $const108.1
DEBUG:numba.core.ssa:find_def var='exp' stmt=$110compare_op.2 = exp > $const108.1
DEBUG:numba.core.ssa:find_def_from_top label 106
DEBUG:numba.core.ssa:insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG:numba.core.ssa:find_def_from_bottom label 48
DEBUG:numba.core.ssa:find_def_from_top label 48
DEBUG:numba.core.ssa:idom 26 from label 48
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:incoming_def exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:find_def_from_bottom label 98
DEBUG:numba.core.ssa:incoming_def exp.1 = b
DEBUG:numba.core.ssa:replaced with: $110compare_op.2 = exp.3 > $const108.1
DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG:numba.core.ssa:on stmt: return $128return_value.7
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp != $const132.1
DEBUG:numba.core.ssa:find_def var='exp' stmt=$134compare_op.2 = exp != $const132.1
DEBUG:numba.core.ssa:find_def_from_top label 130
DEBUG:numba.core.ssa:insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG:numba.core.ssa:find_def_from_bottom label 106
DEBUG:numba.core.ssa:incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG:numba.core.ssa:find_def_from_bottom label 154
DEBUG:numba.core.ssa:incoming_def exp.2 = $158inplace_rshift.2
DEBUG:numba.core.ssa:replaced with: $134compare_op.2 = exp.4 != $const132.1
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp & $const140.1
DEBUG:numba.core.ssa:find_def var='exp' stmt=$142binary_and.2 = exp & $const140.1
DEBUG:numba.core.ssa:find_def_from_top label 138
DEBUG:numba.core.ssa:idom 130 from label 138
DEBUG:numba.core.ssa:find_def_from_bottom label 130
DEBUG:numba.core.ssa:replaced with: $142binary_and.2 = exp.4 & $const140.1
DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: r.1 = $150inplace_multiply.2
DEBUG:numba.core.ssa:on stmt: jump 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='exp' stmt=$158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 154
DEBUG:numba.core.ssa:idom 138 from label 154
DEBUG:numba.core.ssa:find_def_from_bottom label 138
DEBUG:numba.core.ssa:find_def_from_top label 138
DEBUG:numba.core.ssa:idom 130 from label 138
DEBUG:numba.core.ssa:find_def_from_bottom label 130
DEBUG:numba.core.ssa:replaced with: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: exp.2 = $158inplace_rshift.2
DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: a.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $182return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB1AD60>
DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r.2)
DEBUG:numba.core.ssa:on stmt: return $186return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var a.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6FE20>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float32)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float32)
DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:first assign: a.1
DEBUG:numba.core.ssa:replaced with: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6FE20>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6FE20>
DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6FE20>
DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6FE20>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
DEBUG:numba.core.ssa:on stmt: exp.1 = b
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6FE20>
DEBUG:numba.core.ssa:on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6FE20>
DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG:numba.core.ssa:on stmt: return $128return_value.7
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6FE20>
DEBUG:numba.core.ssa:on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6FE20>
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6FE20>
DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: r.1 = $150inplace_multiply.2
DEBUG:numba.core.ssa:on stmt: jump 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6FE20>
DEBUG:numba.core.ssa:on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: exp.2 = $158inplace_rshift.2
DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: a.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:replaced with: a.1.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6FE20>
DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6FE20>
DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $182return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6FE20>
DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r.2)
DEBUG:numba.core.ssa:on stmt: return $186return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000029B6DB6FBB0>],
             154: [<numba.core.ir.Assign object at 0x0000029B6DB166A0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float32)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float32)
DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
DEBUG:numba.core.ssa:on stmt: exp.1 = b
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def var='a.1' stmt=$126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def_from_top label 114
DEBUG:numba.core.ssa:idom 106 from label 114
DEBUG:numba.core.ssa:find_def_from_bottom label 106
DEBUG:numba.core.ssa:find_def_from_top label 106
DEBUG:numba.core.ssa:idom 0 from label 106
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG:numba.core.ssa:on stmt: return $128return_value.7
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='a.1' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 146
DEBUG:numba.core.ssa:idom 138 from label 146
DEBUG:numba.core.ssa:find_def_from_bottom label 138
DEBUG:numba.core.ssa:find_def_from_top label 138
DEBUG:numba.core.ssa:idom 130 from label 138
DEBUG:numba.core.ssa:find_def_from_bottom label 130
DEBUG:numba.core.ssa:find_def_from_top label 130
DEBUG:numba.core.ssa:insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG:numba.core.ssa:find_def_from_bottom label 106
DEBUG:numba.core.ssa:find_def_from_top label 106
DEBUG:numba.core.ssa:idom 0 from label 106
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def_from_bottom label 154
DEBUG:numba.core.ssa:incoming_def a.1.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: r.1 = $150inplace_multiply.2
DEBUG:numba.core.ssa:on stmt: jump 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: exp.2 = $158inplace_rshift.2
DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='a.1' stmt=$166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 154
DEBUG:numba.core.ssa:idom 138 from label 154
DEBUG:numba.core.ssa:find_def_from_bottom label 138
DEBUG:numba.core.ssa:find_def_from_top label 138
DEBUG:numba.core.ssa:idom 130 from label 138
DEBUG:numba.core.ssa:find_def_from_bottom label 130
DEBUG:numba.core.ssa:replaced with: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: a.1.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $182return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB16580>
DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r.2)
DEBUG:numba.core.ssa:on stmt: return $186return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var invert
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6F7C0>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float32)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float32)
DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6F7C0>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
DEBUG:numba.core.ssa:first assign: invert
DEBUG:numba.core.ssa:replaced with: invert = const(bool, True)
DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6F7C0>
DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6F7C0>
DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6F7C0>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
DEBUG:numba.core.ssa:replaced with: invert.1 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: exp.1 = b
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6F7C0>
DEBUG:numba.core.ssa:on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6F7C0>
DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG:numba.core.ssa:on stmt: return $128return_value.7
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6F7C0>
DEBUG:numba.core.ssa:on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6F7C0>
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6F7C0>
DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: r.1 = $150inplace_multiply.2
DEBUG:numba.core.ssa:on stmt: jump 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6F7C0>
DEBUG:numba.core.ssa:on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: exp.2 = $158inplace_rshift.2
DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: a.1.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6F7C0>
DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6F7C0>
DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $182return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DB6F7C0>
DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r.2)
DEBUG:numba.core.ssa:on stmt: return $186return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x0000029B6DB6F0A0>],
             98: [<numba.core.ir.Assign object at 0x0000029B6DB160D0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB6F8E0>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float32)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float32)
DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB6F8E0>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB6F8E0>
DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB6F8E0>
DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB6F8E0>
DEBUG:numba.core.ssa:on stmt: invert.1 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: exp.1 = b
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB6F8E0>
DEBUG:numba.core.ssa:on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB6F8E0>
DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG:numba.core.ssa:on stmt: return $128return_value.7
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB6F8E0>
DEBUG:numba.core.ssa:on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB6F8E0>
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB6F8E0>
DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: r.1 = $150inplace_multiply.2
DEBUG:numba.core.ssa:on stmt: jump 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB6F8E0>
DEBUG:numba.core.ssa:on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: exp.2 = $158inplace_rshift.2
DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: a.1.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB6F8E0>
DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def var='invert' stmt=$174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def_from_top label 172
DEBUG:numba.core.ssa:idom 130 from label 172
DEBUG:numba.core.ssa:find_def_from_bottom label 130
DEBUG:numba.core.ssa:find_def_from_top label 130
DEBUG:numba.core.ssa:idom 106 from label 130
DEBUG:numba.core.ssa:find_def_from_bottom label 106
DEBUG:numba.core.ssa:find_def_from_top label 106
DEBUG:numba.core.ssa:insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG:numba.core.ssa:find_def_from_bottom label 48
DEBUG:numba.core.ssa:find_def_from_top label 48
DEBUG:numba.core.ssa:idom 26 from label 48
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:incoming_def invert = const(bool, True)
DEBUG:numba.core.ssa:find_def_from_bottom label 98
DEBUG:numba.core.ssa:incoming_def invert.1 = const(bool, False)
DEBUG:numba.core.ssa:replaced with: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB6F8E0>
DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $182return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DB6F8E0>
DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r.2)
DEBUG:numba.core.ssa:on stmt: return $186return_value.1
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=68)
           2	LOAD_FAST(arg=0, lineno=68)
           4	LOAD_FAST(arg=1, lineno=66)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=68)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=68)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=66)
DEBUG:numba.core.byteflow:stack ['$_284binary_subscr_8_12.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$_284binary_subscr_8_12.0', '$s_1_14.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$6binary_true_divide.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_284binary_subscr_8_12.0'}), (4, {'res': '$s_1_14.1'}), (6, {'lhs': '$_284binary_subscr_8_12.0', 'rhs': '$s_1_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    _284binary_subscr_8_1 = arg(0, name=_284binary_subscr_8_1) ['_284binary_subscr_8_1']
    s_1_1 = arg(1, name=s_1_1)               ['s_1_1']
    $6binary_true_divide.2 = _284binary_subscr_8_1 / s_1_1 ['$6binary_true_divide.2', '_284binary_subscr_8_1', 's_1_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DBB8B50>
DEBUG:numba.core.ssa:on stmt: _284binary_subscr_8_1 = arg(0, name=_284binary_subscr_8_1)
DEBUG:numba.core.ssa:on stmt: s_1_1 = arg(1, name=s_1_1)
DEBUG:numba.core.ssa:on stmt: $6binary_true_divide.2 = _284binary_subscr_8_1 / s_1_1
DEBUG:numba.core.ssa:on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $8return_value.3
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x0000029B6DBBA6D0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000029B6DBBA820>],
             '_284binary_subscr_8_1': [<numba.core.ir.Assign object at 0x0000029B6DBB81C0>],
             's_1_1': [<numba.core.ir.Assign object at 0x0000029B6DBB85E0>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=76)
           6	CALL_FUNCTION(arg=1, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=76)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$_392binary_subscr_13_14.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$6call_function.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$_392binary_subscr_13_14.1'}), (6, {'func': '$2load_global.0', 'args': ['$_392binary_subscr_13_14.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    _392binary_subscr_13_1 = arg(0, name=_392binary_subscr_13_1) ['_392binary_subscr_13_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x29b624629a: <ufunc 'absolute'>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(_392binary_subscr_13_1, func=$2load_global.0, args=[Var(_392binary_subscr_13_1, c3s1_post_processing.py:1)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', '_392binary_subscr_13_1']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DD1CFA0>
DEBUG:numba.core.ssa:on stmt: _392binary_subscr_13_1 = arg(0, name=_392binary_subscr_13_1)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(__ufunc_or_dufunc_0x29b624629a: <ufunc 'absolute'>)
DEBUG:numba.core.ssa:on stmt: $6call_function.2 = call $2load_global.0(_392binary_subscr_13_1, func=$2load_global.0, args=[Var(_392binary_subscr_13_1, c3s1_post_processing.py:1)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG:numba.core.ssa:on stmt: return $8return_value.3
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x0000029B6DD220D0>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x0000029B6DD22A00>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000029B6DD22B20>],
             '_392binary_subscr_13_1': [<numba.core.ir.Assign object at 0x0000029B6DD22250>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=604)
           2	LOAD_FAST(arg=0, lineno=604)
           4	LOAD_ATTR(arg=0, lineno=604)
           6	LOAD_CONST(arg=1, lineno=604)
           8	COMPARE_OP(arg=2, lineno=604)
          10	POP_JUMP_IF_FALSE(arg=20, lineno=604)
          12	LOAD_GLOBAL(arg=1, lineno=605)
          14	LOAD_DEREF(arg=0, lineno=605)
          16	CALL_FUNCTION(arg=1, lineno=605)
          18	RAISE_VARARGS(arg=1, lineno=605)
>         20	LOAD_GLOBAL(arg=2, lineno=607)
          22	LOAD_METHOD(arg=3, lineno=607)
          24	LOAD_FAST(arg=0, lineno=607)
          26	CALL_METHOD(arg=1, lineno=607)
          28	STORE_FAST(arg=1, lineno=607)
          30	LOAD_GLOBAL(arg=4, lineno=608)
          32	LOAD_FAST(arg=1, lineno=608)
          34	CALL_FUNCTION(arg=1, lineno=608)
          36	LOAD_METHOD(arg=5, lineno=608)
          38	LOAD_CONST(arg=1, lineno=608)
          40	CALL_METHOD(arg=1, lineno=608)
          42	STORE_FAST(arg=2, lineno=608)
          44	LOAD_GLOBAL(arg=2, lineno=609)
          46	LOAD_METHOD(arg=6, lineno=609)
          48	LOAD_FAST(arg=2, lineno=609)
          50	CALL_METHOD(arg=1, lineno=609)
          52	POP_JUMP_IF_FALSE(arg=58, lineno=609)
          54	LOAD_FAST(arg=2, lineno=610)
          56	RETURN_VALUE(arg=None, lineno=610)
>         58	LOAD_FAST(arg=1, lineno=612)
          60	GET_ITER(arg=None, lineno=612)
>         62	FOR_ITER(arg=42, lineno=612)
          64	STORE_FAST(arg=3, lineno=612)
          66	LOAD_FAST(arg=3, lineno=613)
          68	LOAD_METHOD(arg=7, lineno=613)
          70	CALL_METHOD(arg=0, lineno=613)
          72	STORE_FAST(arg=4, lineno=613)
          74	LOAD_GLOBAL(arg=2, lineno=614)
          76	LOAD_METHOD(arg=6, lineno=614)
          78	LOAD_FAST(arg=4, lineno=614)
          80	CALL_METHOD(arg=1, lineno=614)
          82	POP_JUMP_IF_FALSE(arg=92, lineno=614)
          84	LOAD_FAST(arg=4, lineno=615)
          86	ROT_TWO(arg=None, lineno=615)
          88	POP_TOP(arg=None, lineno=615)
          90	RETURN_VALUE(arg=None, lineno=615)
>         92	LOAD_FAST(arg=4, lineno=616)
          94	LOAD_FAST(arg=2, lineno=616)
          96	COMPARE_OP(arg=4, lineno=616)
          98	POP_JUMP_IF_FALSE(arg=62, lineno=616)
         100	LOAD_FAST(arg=4, lineno=617)
         102	STORE_FAST(arg=2, lineno=617)
         104	JUMP_ABSOLUTE(arg=62, lineno=617)
>        106	LOAD_FAST(arg=2, lineno=618)
         108	RETURN_VALUE(arg=None, lineno=618)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=604)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=604)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=604)
DEBUG:numba.core.byteflow:stack ['$arry2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=604)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=COMPARE_OP(arg=2, lineno=604)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$const6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=POP_JUMP_IF_FALSE(arg=20, lineno=604)
DEBUG:numba.core.byteflow:stack ['$8compare_op.3']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=20 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=605)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_DEREF(arg=0, lineno=605)
DEBUG:numba.core.byteflow:stack ['$12load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=605)
DEBUG:numba.core.byteflow:stack ['$12load_global.0', '$14load_deref.1']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=RAISE_VARARGS(arg=1, lineno=605)
DEBUG:numba.core.byteflow:stack ['$16call_function.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=20 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_GLOBAL(arg=2, lineno=607)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_METHOD(arg=3, lineno=607)
DEBUG:numba.core.byteflow:stack ['$20load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=607)
DEBUG:numba.core.byteflow:stack ['$22load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=CALL_METHOD(arg=1, lineno=607)
DEBUG:numba.core.byteflow:stack ['$22load_method.1', '$arry24.2']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=STORE_FAST(arg=1, lineno=607)
DEBUG:numba.core.byteflow:stack ['$26call_method.3']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_GLOBAL(arg=4, lineno=608)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=608)
DEBUG:numba.core.byteflow:stack ['$30load_global.4']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=CALL_FUNCTION(arg=1, lineno=608)
DEBUG:numba.core.byteflow:stack ['$30load_global.4', '$it32.5']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_METHOD(arg=5, lineno=608)
DEBUG:numba.core.byteflow:stack ['$34call_function.6']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=608)
DEBUG:numba.core.byteflow:stack ['$36load_method.7']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=CALL_METHOD(arg=1, lineno=608)
DEBUG:numba.core.byteflow:stack ['$36load_method.7', '$const38.8']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=STORE_FAST(arg=2, lineno=608)
DEBUG:numba.core.byteflow:stack ['$40call_method.9']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_GLOBAL(arg=2, lineno=609)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LOAD_METHOD(arg=6, lineno=609)
DEBUG:numba.core.byteflow:stack ['$44load_global.10']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_FAST(arg=2, lineno=609)
DEBUG:numba.core.byteflow:stack ['$46load_method.11']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=CALL_METHOD(arg=1, lineno=609)
DEBUG:numba.core.byteflow:stack ['$46load_method.11', '$max_value48.12']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=POP_JUMP_IF_FALSE(arg=58, lineno=609)
DEBUG:numba.core.byteflow:stack ['$50call_method.13']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=58, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_FAST(arg=2, lineno=610)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=610)
DEBUG:numba.core.byteflow:stack ['$max_value54.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=58 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_FAST(arg=1, lineno=612)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=60, inst=GET_ITER(arg=None, lineno=612)
DEBUG:numba.core.byteflow:stack ['$it58.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=62, stack=('$60get_iter.1',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=62 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi62.0']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=FOR_ITER(arg=42, lineno=612)
DEBUG:numba.core.byteflow:stack ['$phi62.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0), Edge(pc=64, stack=('$phi62.0', '$62for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=64 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=106, inst=LOAD_FAST(arg=2, lineno=618)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=108, inst=RETURN_VALUE(arg=None, lineno=618)
DEBUG:numba.core.byteflow:stack ['$max_value106.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=64 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi64.0', '$phi64.1']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=STORE_FAST(arg=3, lineno=612)
DEBUG:numba.core.byteflow:stack ['$phi64.0', '$phi64.1']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_FAST(arg=3, lineno=613)
DEBUG:numba.core.byteflow:stack ['$phi64.0']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=LOAD_METHOD(arg=7, lineno=613)
DEBUG:numba.core.byteflow:stack ['$phi64.0', '$view66.2']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=CALL_METHOD(arg=0, lineno=613)
DEBUG:numba.core.byteflow:stack ['$phi64.0', '$68load_method.3']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=STORE_FAST(arg=4, lineno=613)
DEBUG:numba.core.byteflow:stack ['$phi64.0', '$70call_method.4']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_GLOBAL(arg=2, lineno=614)
DEBUG:numba.core.byteflow:stack ['$phi64.0']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_METHOD(arg=6, lineno=614)
DEBUG:numba.core.byteflow:stack ['$phi64.0', '$74load_global.5']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=LOAD_FAST(arg=4, lineno=614)
DEBUG:numba.core.byteflow:stack ['$phi64.0', '$76load_method.6']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=CALL_METHOD(arg=1, lineno=614)
DEBUG:numba.core.byteflow:stack ['$phi64.0', '$76load_method.6', '$v78.7']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=92, lineno=614)
DEBUG:numba.core.byteflow:stack ['$phi64.0', '$80call_method.8']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=84, stack=('$phi64.0',), blockstack=(), npush=0), Edge(pc=92, stack=('$phi64.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=84 nstack_initial=1), State(pc_initial=92 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi84.0']
DEBUG:numba.core.byteflow:dispatch pc=84, inst=LOAD_FAST(arg=4, lineno=615)
DEBUG:numba.core.byteflow:stack ['$phi84.0']
DEBUG:numba.core.byteflow:dispatch pc=86, inst=ROT_TWO(arg=None, lineno=615)
DEBUG:numba.core.byteflow:stack ['$phi84.0', '$v84.1']
DEBUG:numba.core.byteflow:dispatch pc=88, inst=POP_TOP(arg=None, lineno=615)
DEBUG:numba.core.byteflow:stack ['$v84.1', '$phi84.0']
DEBUG:numba.core.byteflow:dispatch pc=90, inst=RETURN_VALUE(arg=None, lineno=615)
DEBUG:numba.core.byteflow:stack ['$v84.1']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=92 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi92.0']
DEBUG:numba.core.byteflow:dispatch pc=92, inst=LOAD_FAST(arg=4, lineno=616)
DEBUG:numba.core.byteflow:stack ['$phi92.0']
DEBUG:numba.core.byteflow:dispatch pc=94, inst=LOAD_FAST(arg=2, lineno=616)
DEBUG:numba.core.byteflow:stack ['$phi92.0', '$v92.1']
DEBUG:numba.core.byteflow:dispatch pc=96, inst=COMPARE_OP(arg=4, lineno=616)
DEBUG:numba.core.byteflow:stack ['$phi92.0', '$v92.1', '$max_value94.2']
DEBUG:numba.core.byteflow:dispatch pc=98, inst=POP_JUMP_IF_FALSE(arg=62, lineno=616)
DEBUG:numba.core.byteflow:stack ['$phi92.0', '$96compare_op.3']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=100, stack=('$phi92.0',), blockstack=(), npush=0), Edge(pc=62, stack=('$phi92.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=100 nstack_initial=1), State(pc_initial=62 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi100.0']
DEBUG:numba.core.byteflow:dispatch pc=100, inst=LOAD_FAST(arg=4, lineno=617)
DEBUG:numba.core.byteflow:stack ['$phi100.0']
DEBUG:numba.core.byteflow:dispatch pc=102, inst=STORE_FAST(arg=2, lineno=617)
DEBUG:numba.core.byteflow:stack ['$phi100.0', '$v100.1']
DEBUG:numba.core.byteflow:dispatch pc=104, inst=JUMP_ABSOLUTE(arg=62, lineno=617)
DEBUG:numba.core.byteflow:stack ['$phi100.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=62, stack=('$phi100.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=62 nstack_initial=1), State(pc_initial=62 nstack_initial=1)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=62 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=54 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=1): {'$phi62.0'},
             State(pc_initial=64 nstack_initial=2): {'$phi64.1'},
             State(pc_initial=84 nstack_initial=1): set(),
             State(pc_initial=92 nstack_initial=1): set(),
             State(pc_initial=100 nstack_initial=1): set(),
             State(pc_initial=106 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi62.0': State(pc_initial=58 nstack_initial=0),
 '$phi64.1': State(pc_initial=62 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi100.0': {('$phi92.0', State(pc_initial=92 nstack_initial=1))},
             '$phi62.0': {('$60get_iter.1',
                           State(pc_initial=58 nstack_initial=0)),
                          ('$phi100.0', State(pc_initial=100 nstack_initial=1)),
                          ('$phi92.0', State(pc_initial=92 nstack_initial=1))},
             '$phi64.0': {('$phi62.0', State(pc_initial=62 nstack_initial=1))},
             '$phi64.1': {('$62for_iter.2',
                           State(pc_initial=62 nstack_initial=1))},
             '$phi84.0': {('$phi64.0', State(pc_initial=64 nstack_initial=2))},
             '$phi92.0': {('$phi64.0', State(pc_initial=64 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi100.0': {('$phi64.0', State(pc_initial=64 nstack_initial=2))},
             '$phi62.0': {('$60get_iter.1',
                           State(pc_initial=58 nstack_initial=0)),
                          ('$phi64.0', State(pc_initial=64 nstack_initial=2))},
             '$phi64.0': {('$60get_iter.1',
                           State(pc_initial=58 nstack_initial=0)),
                          ('$phi64.0', State(pc_initial=64 nstack_initial=2))},
             '$phi64.1': {('$62for_iter.2',
                           State(pc_initial=62 nstack_initial=1))},
             '$phi84.0': {('$60get_iter.1',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi92.0': {('$60get_iter.1',
                           State(pc_initial=58 nstack_initial=0))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi100.0': {('$60get_iter.1',
                            State(pc_initial=58 nstack_initial=0))},
             '$phi62.0': {('$60get_iter.1',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi64.0': {('$60get_iter.1',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi64.1': {('$62for_iter.2',
                           State(pc_initial=62 nstack_initial=1))},
             '$phi84.0': {('$60get_iter.1',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi92.0': {('$60get_iter.1',
                           State(pc_initial=58 nstack_initial=0))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi100.0': {('$60get_iter.1',
                            State(pc_initial=58 nstack_initial=0))},
             '$phi62.0': {('$60get_iter.1',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi64.0': {('$60get_iter.1',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi64.1': {('$62for_iter.2',
                           State(pc_initial=62 nstack_initial=1))},
             '$phi84.0': {('$60get_iter.1',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi92.0': {('$60get_iter.1',
                           State(pc_initial=58 nstack_initial=0))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi62.0': {('$60get_iter.1', State(pc_initial=58 nstack_initial=0))},
 '$phi64.1': {('$62for_iter.2', State(pc_initial=62 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=58 nstack_initial=0): {'$phi62.0': '$60get_iter.1'},
             State(pc_initial=62 nstack_initial=1): {'$phi64.1': '$62for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arry2.0'}), (4, {'item': '$arry2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'lhs': '$4load_attr.1', 'rhs': '$const6.2', 'res': '$8compare_op.3'}), (10, {'pred': '$8compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 20: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$14load_deref.1'}), (16, {'func': '$12load_global.0', 'args': ['$14load_deref.1'], 'res': '$16call_function.2'}), (18, {'exc': '$16call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$20load_global.0'}), (22, {'item': '$20load_global.0', 'res': '$22load_method.1'}), (24, {'res': '$arry24.2'}), (26, {'func': '$22load_method.1', 'args': ['$arry24.2'], 'res': '$26call_method.3'}), (28, {'value': '$26call_method.3'}), (30, {'res': '$30load_global.4'}), (32, {'res': '$it32.5'}), (34, {'func': '$30load_global.4', 'args': ['$it32.5'], 'res': '$34call_function.6'}), (36, {'item': '$34call_function.6', 'res': '$36load_method.7'}), (38, {'res': '$const38.8'}), (40, {'func': '$36load_method.7', 'args': ['$const38.8'], 'res': '$40call_method.9'}), (42, {'value': '$40call_method.9'}), (44, {'res': '$44load_global.10'}), (46, {'item': '$44load_global.10', 'res': '$46load_method.11'}), (48, {'res': '$max_value48.12'}), (50, {'func': '$46load_method.11', 'args': ['$max_value48.12'], 'res': '$50call_method.13'}), (52, {'pred': '$50call_method.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 58: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$max_value54.0'}), (56, {'retval': '$max_value54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$it58.0'}), (60, {'value': '$it58.0', 'res': '$60get_iter.1'})), outgoing_phis={'$phi62.0': '$60get_iter.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$60get_iter.1',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=62 nstack_initial=1):
AdaptBlockInfo(insts=((62, {'iterator': '$phi62.0', 'pair': '$62for_iter.1', 'indval': '$62for_iter.2', 'pred': '$62for_iter.3'}),), outgoing_phis={'$phi64.1': '$62for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: (), 64: ('$phi62.0', '$62for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=64 nstack_initial=2):
AdaptBlockInfo(insts=((64, {'value': '$phi64.1'}), (66, {'res': '$view66.2'}), (68, {'item': '$view66.2', 'res': '$68load_method.3'}), (70, {'func': '$68load_method.3', 'args': [], 'res': '$70call_method.4'}), (72, {'value': '$70call_method.4'}), (74, {'res': '$74load_global.5'}), (76, {'item': '$74load_global.5', 'res': '$76load_method.6'}), (78, {'res': '$v78.7'}), (80, {'func': '$76load_method.6', 'args': ['$v78.7'], 'res': '$80call_method.8'}), (82, {'pred': '$80call_method.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: ('$phi64.0',), 92: ('$phi64.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=84 nstack_initial=1):
AdaptBlockInfo(insts=((84, {'res': '$v84.1'}), (90, {'retval': '$v84.1', 'castval': '$90return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=92 nstack_initial=1):
AdaptBlockInfo(insts=((92, {'res': '$v92.1'}), (94, {'res': '$max_value94.2'}), (96, {'lhs': '$v92.1', 'rhs': '$max_value94.2', 'res': '$96compare_op.3'}), (98, {'pred': '$96compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={100: ('$phi92.0',), 62: ('$phi92.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=100 nstack_initial=1):
AdaptBlockInfo(insts=((100, {'res': '$v100.1'}), (102, {'value': '$v100.1'}), (104, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$phi100.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$max_value106.0'}), (108, {'retval': '$max_value106.0', 'castval': '$108return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    arry = arg(0, name=arry)                 ['arry']
    $4load_attr.1 = getattr(value=arry, attr=size) ['$4load_attr.1', 'arry']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8compare_op.3 = $4load_attr.1 == $const6.2 ['$4load_attr.1', '$8compare_op.3', '$const6.2']
    bool10 = global(bool: <class 'bool'>)    ['bool10']
    $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:604),), kws=(), vararg=None, target=None) ['$10pred', '$8compare_op.3', 'bool10']
    branch $10pred, 12, 20                   ['$10pred']
label 12:
    $12load_global.0 = global(ValueError: <class 'ValueError'>) ['$12load_global.0']
    $14load_deref.1 = freevar(MSG: zero-size array to reduction operation maximum which has no identity) ['$14load_deref.1']
    $16call_function.2 = call $12load_global.0($14load_deref.1, func=$12load_global.0, args=[Var($14load_deref.1, arraymath.py:605)], kws=(), vararg=None, target=None) ['$12load_global.0', '$14load_deref.1', '$16call_function.2']
    raise $16call_function.2                 ['$16call_function.2']
label 20:
    $20load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$20load_global.0']
    $22load_method.1 = getattr(value=$20load_global.0, attr=nditer) ['$20load_global.0', '$22load_method.1']
    it = call $22load_method.1(arry, func=$22load_method.1, args=[Var(arry, arraymath.py:604)], kws=(), vararg=None, target=None) ['$22load_method.1', 'arry', 'it']
    $30load_global.4 = global(next: <built-in function next>) ['$30load_global.4']
    $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:607)], kws=(), vararg=None, target=None) ['$30load_global.4', '$34call_function.6', 'it']
    $36load_method.7 = getattr(value=$34call_function.6, attr=take) ['$34call_function.6', '$36load_method.7']
    $const38.8 = const(int, 0)               ['$const38.8']
    max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:608)], kws=(), vararg=None, target=None) ['$36load_method.7', '$const38.8', 'max_value']
    $44load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$44load_global.10']
    $46load_method.11 = getattr(value=$44load_global.10, attr=isnan) ['$44load_global.10', '$46load_method.11']
    $50call_method.13 = call $46load_method.11(max_value, func=$46load_method.11, args=[Var(max_value, arraymath.py:608)], kws=(), vararg=None, target=None) ['$46load_method.11', '$50call_method.13', 'max_value']
    bool52 = global(bool: <class 'bool'>)    ['bool52']
    $52pred = call bool52($50call_method.13, func=bool52, args=(Var($50call_method.13, arraymath.py:609),), kws=(), vararg=None, target=None) ['$50call_method.13', '$52pred', 'bool52']
    branch $52pred, 54, 58                   ['$52pred']
label 54:
    $56return_value.1 = cast(value=max_value) ['$56return_value.1', 'max_value']
    return $56return_value.1                 ['$56return_value.1']
label 58:
    $60get_iter.1 = getiter(value=it)        ['$60get_iter.1', 'it']
    $phi62.0 = $60get_iter.1                 ['$60get_iter.1', '$phi62.0']
    jump 62                                  []
label 62:
    $62for_iter.1 = iternext(value=$phi62.0) ['$62for_iter.1', '$phi62.0']
    $62for_iter.2 = pair_first(value=$62for_iter.1) ['$62for_iter.1', '$62for_iter.2']
    $62for_iter.3 = pair_second(value=$62for_iter.1) ['$62for_iter.1', '$62for_iter.3']
    $phi64.1 = $62for_iter.2                 ['$62for_iter.2', '$phi64.1']
    branch $62for_iter.3, 64, 106            ['$62for_iter.3']
label 64:
    view = $phi64.1                          ['$phi64.1', 'view']
    $68load_method.3 = getattr(value=view, attr=item) ['$68load_method.3', 'view']
    v = call $68load_method.3(func=$68load_method.3, args=[], kws=(), vararg=None, target=None) ['$68load_method.3', 'v']
    $74load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$74load_global.5']
    $76load_method.6 = getattr(value=$74load_global.5, attr=isnan) ['$74load_global.5', '$76load_method.6']
    $80call_method.8 = call $76load_method.6(v, func=$76load_method.6, args=[Var(v, arraymath.py:613)], kws=(), vararg=None, target=None) ['$76load_method.6', '$80call_method.8', 'v']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80call_method.8, func=bool82, args=(Var($80call_method.8, arraymath.py:614),), kws=(), vararg=None, target=None) ['$80call_method.8', '$82pred', 'bool82']
    branch $82pred, 84, 92                   ['$82pred']
label 84:
    $90return_value.2 = cast(value=v)        ['$90return_value.2', 'v']
    return $90return_value.2                 ['$90return_value.2']
label 92:
    $96compare_op.3 = v > max_value          ['$96compare_op.3', 'max_value', 'v']
    bool98 = global(bool: <class 'bool'>)    ['bool98']
    $98pred = call bool98($96compare_op.3, func=bool98, args=(Var($96compare_op.3, arraymath.py:616),), kws=(), vararg=None, target=None) ['$96compare_op.3', '$98pred', 'bool98']
    branch $98pred, 100, 62                  ['$98pred']
label 100:
    max_value = v                            ['max_value', 'v']
    jump 62                                  []
label 106:
    $108return_value.1 = cast(value=max_value) ['$108return_value.1', 'max_value']
    return $108return_value.1                ['$108return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DD73E50>
DEBUG:numba.core.ssa:on stmt: arry = arg(0, name=arry)
DEBUG:numba.core.ssa:on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
DEBUG:numba.core.ssa:on stmt: $const6.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
DEBUG:numba.core.ssa:on stmt: bool10 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:604),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $10pred, 12, 20
DEBUG:numba.core.ssa:==== SSA block analysis pass on 12
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DD73E50>
DEBUG:numba.core.ssa:on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $14load_deref.1 = freevar(MSG: zero-size array to reduction operation maximum which has no identity)
DEBUG:numba.core.ssa:on stmt: $16call_function.2 = call $12load_global.0($14load_deref.1, func=$12load_global.0, args=[Var($14load_deref.1, arraymath.py:605)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
DEBUG:numba.core.ssa:==== SSA block analysis pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DD73E50>
DEBUG:numba.core.ssa:on stmt: $20load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
DEBUG:numba.core.ssa:on stmt: it = call $22load_method.1(arry, func=$22load_method.1, args=[Var(arry, arraymath.py:604)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $30load_global.4 = global(next: <built-in function next>)
DEBUG:numba.core.ssa:on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:607)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
DEBUG:numba.core.ssa:on stmt: $const38.8 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:608)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $44load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $46load_method.11 = getattr(value=$44load_global.10, attr=isnan)
DEBUG:numba.core.ssa:on stmt: $50call_method.13 = call $46load_method.11(max_value, func=$46load_method.11, args=[Var(max_value, arraymath.py:608)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $52pred = call bool52($50call_method.13, func=bool52, args=(Var($50call_method.13, arraymath.py:609),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $52pred, 54, 58
DEBUG:numba.core.ssa:==== SSA block analysis pass on 54
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DD73E50>
DEBUG:numba.core.ssa:on stmt: $56return_value.1 = cast(value=max_value)
DEBUG:numba.core.ssa:on stmt: return $56return_value.1
DEBUG:numba.core.ssa:==== SSA block analysis pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DD73E50>
DEBUG:numba.core.ssa:on stmt: $60get_iter.1 = getiter(value=it)
DEBUG:numba.core.ssa:on stmt: $phi62.0 = $60get_iter.1
DEBUG:numba.core.ssa:on stmt: jump 62
DEBUG:numba.core.ssa:==== SSA block analysis pass on 62
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DD73E50>
DEBUG:numba.core.ssa:on stmt: $62for_iter.1 = iternext(value=$phi62.0)
DEBUG:numba.core.ssa:on stmt: $62for_iter.2 = pair_first(value=$62for_iter.1)
DEBUG:numba.core.ssa:on stmt: $62for_iter.3 = pair_second(value=$62for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi64.1 = $62for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $62for_iter.3, 64, 106
DEBUG:numba.core.ssa:==== SSA block analysis pass on 64
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DD73E50>
DEBUG:numba.core.ssa:on stmt: view = $phi64.1
DEBUG:numba.core.ssa:on stmt: $68load_method.3 = getattr(value=view, attr=item)
DEBUG:numba.core.ssa:on stmt: v = call $68load_method.3(func=$68load_method.3, args=[], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $74load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $76load_method.6 = getattr(value=$74load_global.5, attr=isnan)
DEBUG:numba.core.ssa:on stmt: $80call_method.8 = call $76load_method.6(v, func=$76load_method.6, args=[Var(v, arraymath.py:613)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $82pred = call bool82($80call_method.8, func=bool82, args=(Var($80call_method.8, arraymath.py:614),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $82pred, 84, 92
DEBUG:numba.core.ssa:==== SSA block analysis pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DD73E50>
DEBUG:numba.core.ssa:on stmt: $90return_value.2 = cast(value=v)
DEBUG:numba.core.ssa:on stmt: return $90return_value.2
DEBUG:numba.core.ssa:==== SSA block analysis pass on 92
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DD73E50>
DEBUG:numba.core.ssa:on stmt: $96compare_op.3 = v > max_value
DEBUG:numba.core.ssa:on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $98pred = call bool98($96compare_op.3, func=bool98, args=(Var($96compare_op.3, arraymath.py:616),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $98pred, 100, 107
DEBUG:numba.core.ssa:==== SSA block analysis pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DD73E50>
DEBUG:numba.core.ssa:on stmt: max_value = v
DEBUG:numba.core.ssa:on stmt: jump 107
DEBUG:numba.core.ssa:==== SSA block analysis pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DD73E50>
DEBUG:numba.core.ssa:on stmt: $108return_value.1 = cast(value=max_value)
DEBUG:numba.core.ssa:on stmt: return $108return_value.1
DEBUG:numba.core.ssa:==== SSA block analysis pass on 107
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DD73E50>
DEBUG:numba.core.ssa:on stmt: jump 62
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$108return_value.1': [<numba.core.ir.Assign object at 0x0000029B6DD68C40>],
             '$10pred': [<numba.core.ir.Assign object at 0x0000029B6DD5C100>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x0000029B6DD5C340>],
             '$14load_deref.1': [<numba.core.ir.Assign object at 0x0000029B6DD5C4C0>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x0000029B6DD5C6A0>],
             '$20load_global.0': [<numba.core.ir.Assign object at 0x0000029B6DD5C940>],
             '$22load_method.1': [<numba.core.ir.Assign object at 0x0000029B6DD5CAC0>],
             '$30load_global.4': [<numba.core.ir.Assign object at 0x0000029B6DD5A040>],
             '$34call_function.6': [<numba.core.ir.Assign object at 0x0000029B6DD5A340>],
             '$36load_method.7': [<numba.core.ir.Assign object at 0x0000029B6DD5A460>],
             '$44load_global.10': [<numba.core.ir.Assign object at 0x0000029B6DD5AA00>],
             '$46load_method.11': [<numba.core.ir.Assign object at 0x0000029B6DD5AB80>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x0000029B6DD4EB50>],
             '$50call_method.13': [<numba.core.ir.Assign object at 0x0000029B6DD5AEB0>],
             '$52pred': [<numba.core.ir.Assign object at 0x0000029B6DD64100>],
             '$56return_value.1': [<numba.core.ir.Assign object at 0x0000029B6DD642E0>],
             '$60get_iter.1': [<numba.core.ir.Assign object at 0x0000029B6DD64640>],
             '$62for_iter.1': [<numba.core.ir.Assign object at 0x0000029B6DD64970>],
             '$62for_iter.2': [<numba.core.ir.Assign object at 0x0000029B6DD64A90>],
             '$62for_iter.3': [<numba.core.ir.Assign object at 0x0000029B6DD64BB0>],
             '$68load_method.3': [<numba.core.ir.Assign object at 0x0000029B6DD66160>],
             '$74load_global.5': [<numba.core.ir.Assign object at 0x0000029B6DD66580>],
             '$76load_method.6': [<numba.core.ir.Assign object at 0x0000029B6DD66700>],
             '$80call_method.8': [<numba.core.ir.Assign object at 0x0000029B6DD66A30>],
             '$82pred': [<numba.core.ir.Assign object at 0x0000029B6DD66C40>],
             '$8compare_op.3': [<numba.core.ir.Assign object at 0x0000029B6DD4E2E0>],
             '$90return_value.2': [<numba.core.ir.Assign object at 0x0000029B6DD66EE0>],
             '$96compare_op.3': [<numba.core.ir.Assign object at 0x0000029B6DD683D0>],
             '$98pred': [<numba.core.ir.Assign object at 0x0000029B6DD68640>],
             '$const38.8': [<numba.core.ir.Assign object at 0x0000029B6DD5A5E0>],
             '$const6.2': [<numba.core.ir.Assign object at 0x0000029B6DD4E490>],
             '$phi62.0': [<numba.core.ir.Assign object at 0x0000029B6DD644C0>],
             '$phi64.1': [<numba.core.ir.Assign object at 0x0000029B6DD648B0>],
             'arry': [<numba.core.ir.Assign object at 0x0000029B6DD4EDF0>],
             'bool10': [<numba.core.ir.Assign object at 0x0000029B6DD46FA0>],
             'bool52': [<numba.core.ir.Assign object at 0x0000029B6DD5AFA0>],
             'bool82': [<numba.core.ir.Assign object at 0x0000029B6DD66B20>],
             'bool98': [<numba.core.ir.Assign object at 0x0000029B6DD68520>],
             'it': [<numba.core.ir.Assign object at 0x0000029B6DD5CDF0>],
             'max_value': [<numba.core.ir.Assign object at 0x0000029B6DD5A7F0>,
                           <numba.core.ir.Assign object at 0x0000029B6DD688B0>],
             'v': [<numba.core.ir.Assign object at 0x0000029B6DD66370>],
             'view': [<numba.core.ir.Assign object at 0x0000029B6DD64E80>]})
DEBUG:numba.core.ssa:SSA violators {'max_value'}
DEBUG:numba.core.ssa:Fix SSA violator on var max_value
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DD4E790>
DEBUG:numba.core.ssa:on stmt: arry = arg(0, name=arry)
DEBUG:numba.core.ssa:on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
DEBUG:numba.core.ssa:on stmt: $const6.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
DEBUG:numba.core.ssa:on stmt: bool10 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:604),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $10pred, 12, 20
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 12
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DD4E790>
DEBUG:numba.core.ssa:on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $14load_deref.1 = freevar(MSG: zero-size array to reduction operation maximum which has no identity)
DEBUG:numba.core.ssa:on stmt: $16call_function.2 = call $12load_global.0($14load_deref.1, func=$12load_global.0, args=[Var($14load_deref.1, arraymath.py:605)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DD4E790>
DEBUG:numba.core.ssa:on stmt: $20load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
DEBUG:numba.core.ssa:on stmt: it = call $22load_method.1(arry, func=$22load_method.1, args=[Var(arry, arraymath.py:604)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $30load_global.4 = global(next: <built-in function next>)
DEBUG:numba.core.ssa:on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:607)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
DEBUG:numba.core.ssa:on stmt: $const38.8 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:608)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:first assign: max_value
DEBUG:numba.core.ssa:replaced with: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:608)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $44load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $46load_method.11 = getattr(value=$44load_global.10, attr=isnan)
DEBUG:numba.core.ssa:on stmt: $50call_method.13 = call $46load_method.11(max_value, func=$46load_method.11, args=[Var(max_value, arraymath.py:608)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $52pred = call bool52($50call_method.13, func=bool52, args=(Var($50call_method.13, arraymath.py:609),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $52pred, 54, 58
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 54
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DD4E790>
DEBUG:numba.core.ssa:on stmt: $56return_value.1 = cast(value=max_value)
DEBUG:numba.core.ssa:on stmt: return $56return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DD4E790>
DEBUG:numba.core.ssa:on stmt: $60get_iter.1 = getiter(value=it)
DEBUG:numba.core.ssa:on stmt: $phi62.0 = $60get_iter.1
DEBUG:numba.core.ssa:on stmt: jump 62
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 62
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DD4E790>
DEBUG:numba.core.ssa:on stmt: $62for_iter.1 = iternext(value=$phi62.0)
DEBUG:numba.core.ssa:on stmt: $62for_iter.2 = pair_first(value=$62for_iter.1)
DEBUG:numba.core.ssa:on stmt: $62for_iter.3 = pair_second(value=$62for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi64.1 = $62for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $62for_iter.3, 64, 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 64
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DD4E790>
DEBUG:numba.core.ssa:on stmt: view = $phi64.1
DEBUG:numba.core.ssa:on stmt: $68load_method.3 = getattr(value=view, attr=item)
DEBUG:numba.core.ssa:on stmt: v = call $68load_method.3(func=$68load_method.3, args=[], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $74load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $76load_method.6 = getattr(value=$74load_global.5, attr=isnan)
DEBUG:numba.core.ssa:on stmt: $80call_method.8 = call $76load_method.6(v, func=$76load_method.6, args=[Var(v, arraymath.py:613)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $82pred = call bool82($80call_method.8, func=bool82, args=(Var($80call_method.8, arraymath.py:614),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $82pred, 84, 92
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DD4E790>
DEBUG:numba.core.ssa:on stmt: $90return_value.2 = cast(value=v)
DEBUG:numba.core.ssa:on stmt: return $90return_value.2
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 92
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DD4E790>
DEBUG:numba.core.ssa:on stmt: $96compare_op.3 = v > max_value
DEBUG:numba.core.ssa:on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $98pred = call bool98($96compare_op.3, func=bool98, args=(Var($96compare_op.3, arraymath.py:616),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $98pred, 100, 107
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DD4E790>
DEBUG:numba.core.ssa:on stmt: max_value = v
DEBUG:numba.core.ssa:replaced with: max_value.1 = v
DEBUG:numba.core.ssa:on stmt: jump 107
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DD4E790>
DEBUG:numba.core.ssa:on stmt: $108return_value.1 = cast(value=max_value)
DEBUG:numba.core.ssa:on stmt: return $108return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 107
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DD4E790>
DEBUG:numba.core.ssa:on stmt: jump 62
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {20: [<numba.core.ir.Assign object at 0x0000029B6DD4E820>],
             100: [<numba.core.ir.Assign object at 0x0000029B6DD73070>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DD4E790>
DEBUG:numba.core.ssa:on stmt: arry = arg(0, name=arry)
DEBUG:numba.core.ssa:on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
DEBUG:numba.core.ssa:on stmt: $const6.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
DEBUG:numba.core.ssa:on stmt: bool10 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:604),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $10pred, 12, 20
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 12
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DD4E790>
DEBUG:numba.core.ssa:on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $14load_deref.1 = freevar(MSG: zero-size array to reduction operation maximum which has no identity)
DEBUG:numba.core.ssa:on stmt: $16call_function.2 = call $12load_global.0($14load_deref.1, func=$12load_global.0, args=[Var($14load_deref.1, arraymath.py:605)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DD4E790>
DEBUG:numba.core.ssa:on stmt: $20load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
DEBUG:numba.core.ssa:on stmt: it = call $22load_method.1(arry, func=$22load_method.1, args=[Var(arry, arraymath.py:604)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $30load_global.4 = global(next: <built-in function next>)
DEBUG:numba.core.ssa:on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:607)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
DEBUG:numba.core.ssa:on stmt: $const38.8 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:608)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $44load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $46load_method.11 = getattr(value=$44load_global.10, attr=isnan)
DEBUG:numba.core.ssa:on stmt: $50call_method.13 = call $46load_method.11(max_value, func=$46load_method.11, args=[Var(max_value, arraymath.py:608)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def var='max_value' stmt=$50call_method.13 = call $46load_method.11(max_value, func=$46load_method.11, args=[Var(max_value, arraymath.py:608)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $52pred = call bool52($50call_method.13, func=bool52, args=(Var($50call_method.13, arraymath.py:609),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $52pred, 54, 58
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 54
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DD4E790>
DEBUG:numba.core.ssa:on stmt: $56return_value.1 = cast(value=max_value)
DEBUG:numba.core.ssa:find_def var='max_value' stmt=$56return_value.1 = cast(value=max_value)
DEBUG:numba.core.ssa:find_def_from_top label 54
DEBUG:numba.core.ssa:idom 20 from label 54
DEBUG:numba.core.ssa:find_def_from_bottom label 20
DEBUG:numba.core.ssa:on stmt: return $56return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DD4E790>
DEBUG:numba.core.ssa:on stmt: $60get_iter.1 = getiter(value=it)
DEBUG:numba.core.ssa:on stmt: $phi62.0 = $60get_iter.1
DEBUG:numba.core.ssa:on stmt: jump 62
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 62
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DD4E790>
DEBUG:numba.core.ssa:on stmt: $62for_iter.1 = iternext(value=$phi62.0)
DEBUG:numba.core.ssa:on stmt: $62for_iter.2 = pair_first(value=$62for_iter.1)
DEBUG:numba.core.ssa:on stmt: $62for_iter.3 = pair_second(value=$62for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi64.1 = $62for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $62for_iter.3, 64, 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 64
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DD4E790>
DEBUG:numba.core.ssa:on stmt: view = $phi64.1
DEBUG:numba.core.ssa:on stmt: $68load_method.3 = getattr(value=view, attr=item)
DEBUG:numba.core.ssa:on stmt: v = call $68load_method.3(func=$68load_method.3, args=[], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $74load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $76load_method.6 = getattr(value=$74load_global.5, attr=isnan)
DEBUG:numba.core.ssa:on stmt: $80call_method.8 = call $76load_method.6(v, func=$76load_method.6, args=[Var(v, arraymath.py:613)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $82pred = call bool82($80call_method.8, func=bool82, args=(Var($80call_method.8, arraymath.py:614),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $82pred, 84, 92
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DD4E790>
DEBUG:numba.core.ssa:on stmt: $90return_value.2 = cast(value=v)
DEBUG:numba.core.ssa:on stmt: return $90return_value.2
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 92
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DD4E790>
DEBUG:numba.core.ssa:on stmt: $96compare_op.3 = v > max_value
DEBUG:numba.core.ssa:find_def var='max_value' stmt=$96compare_op.3 = v > max_value
DEBUG:numba.core.ssa:find_def_from_top label 92
DEBUG:numba.core.ssa:idom 64 from label 92
DEBUG:numba.core.ssa:find_def_from_bottom label 64
DEBUG:numba.core.ssa:find_def_from_top label 64
DEBUG:numba.core.ssa:idom 62 from label 64
DEBUG:numba.core.ssa:find_def_from_bottom label 62
DEBUG:numba.core.ssa:find_def_from_top label 62
DEBUG:numba.core.ssa:insert phi node max_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 62
DEBUG:numba.core.ssa:find_def_from_bottom label 58
DEBUG:numba.core.ssa:find_def_from_top label 58
DEBUG:numba.core.ssa:idom 20 from label 58
DEBUG:numba.core.ssa:find_def_from_bottom label 20
DEBUG:numba.core.ssa:incoming_def max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:608)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def_from_bottom label 107
DEBUG:numba.core.ssa:find_def_from_top label 107
DEBUG:numba.core.ssa:insert phi node max_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 107
DEBUG:numba.core.ssa:find_def_from_bottom label 100
DEBUG:numba.core.ssa:incoming_def max_value.1 = v
DEBUG:numba.core.ssa:find_def_from_bottom label 92
DEBUG:numba.core.ssa:find_def_from_top label 92
DEBUG:numba.core.ssa:idom 64 from label 92
DEBUG:numba.core.ssa:find_def_from_bottom label 64
DEBUG:numba.core.ssa:find_def_from_top label 64
DEBUG:numba.core.ssa:idom 62 from label 64
DEBUG:numba.core.ssa:find_def_from_bottom label 62
DEBUG:numba.core.ssa:incoming_def max_value.2 = phi(incoming_values=[Var(max_value, arraymath.py:608)], incoming_blocks=[58])
DEBUG:numba.core.ssa:incoming_def max_value.3 = phi(incoming_values=[Var(max_value.1, arraymath.py:617), Var(max_value.2, arraymath.py:616)], incoming_blocks=[100, 92])
DEBUG:numba.core.ssa:replaced with: $96compare_op.3 = v > max_value.2
DEBUG:numba.core.ssa:on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $98pred = call bool98($96compare_op.3, func=bool98, args=(Var($96compare_op.3, arraymath.py:616),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $98pred, 100, 107
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DD4E790>
DEBUG:numba.core.ssa:on stmt: max_value.1 = v
DEBUG:numba.core.ssa:on stmt: jump 107
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DD4E790>
DEBUG:numba.core.ssa:on stmt: $108return_value.1 = cast(value=max_value)
DEBUG:numba.core.ssa:find_def var='max_value' stmt=$108return_value.1 = cast(value=max_value)
DEBUG:numba.core.ssa:find_def_from_top label 106
DEBUG:numba.core.ssa:idom 62 from label 106
DEBUG:numba.core.ssa:find_def_from_bottom label 62
DEBUG:numba.core.ssa:replaced with: $108return_value.1 = cast(value=max_value.2)
DEBUG:numba.core.ssa:on stmt: return $108return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 107
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DD4E790>
DEBUG:numba.core.ssa:on stmt: jump 62
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=4028)
           2	LOAD_FAST(arg=1, lineno=4028)
           4	LOAD_FAST(arg=0, lineno=4028)
           6	LOAD_ATTR(arg=0, lineno=4028)
           8	LOAD_CONST(arg=1, lineno=4028)
          10	BINARY_SUBTRACT(arg=None, lineno=4028)
          12	COMPARE_OP(arg=4, lineno=4028)
          14	POP_JUMP_IF_TRUE(arg=28, lineno=4028)
          16	LOAD_FAST(arg=1, lineno=4028)
          18	LOAD_FAST(arg=0, lineno=4028)
          20	LOAD_ATTR(arg=0, lineno=4028)
          22	UNARY_NEGATIVE(arg=None, lineno=4028)
          24	COMPARE_OP(arg=0, lineno=4028)
          26	POP_JUMP_IF_FALSE(arg=36, lineno=4028)
>         28	LOAD_GLOBAL(arg=1, lineno=4029)
          30	LOAD_CONST(arg=2, lineno=4029)
          32	CALL_FUNCTION(arg=1, lineno=4029)
          34	RAISE_VARARGS(arg=1, lineno=4029)
>         36	LOAD_FAST(arg=0, lineno=4030)
          38	LOAD_METHOD(arg=2, lineno=4030)
          40	CALL_METHOD(arg=0, lineno=4030)
          42	LOAD_FAST(arg=1, lineno=4030)
          44	BINARY_SUBSCR(arg=None, lineno=4030)
          46	RETURN_VALUE(arg=None, lineno=4030)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=4028)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=4028)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4028)
DEBUG:numba.core.byteflow:stack ['$indices2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=4028)
DEBUG:numba.core.byteflow:stack ['$indices2.0', '$a4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=4028)
DEBUG:numba.core.byteflow:stack ['$indices2.0', '$6load_attr.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=4028)
DEBUG:numba.core.byteflow:stack ['$indices2.0', '$6load_attr.2', '$const8.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=COMPARE_OP(arg=4, lineno=4028)
DEBUG:numba.core.byteflow:stack ['$indices2.0', '$10binary_subtract.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=POP_JUMP_IF_TRUE(arg=28, lineno=4028)
DEBUG:numba.core.byteflow:stack ['$12compare_op.5']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=16, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=16 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=4028)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=4028)
DEBUG:numba.core.byteflow:stack ['$indices16.0']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_ATTR(arg=0, lineno=4028)
DEBUG:numba.core.byteflow:stack ['$indices16.0', '$a18.1']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=UNARY_NEGATIVE(arg=None, lineno=4028)
DEBUG:numba.core.byteflow:stack ['$indices16.0', '$20load_attr.2']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=COMPARE_OP(arg=0, lineno=4028)
DEBUG:numba.core.byteflow:stack ['$indices16.0', '$22unary_negative.3']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=36, lineno=4028)
DEBUG:numba.core.byteflow:stack ['$24compare_op.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=4029)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=4029)
DEBUG:numba.core.byteflow:stack ['$28load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=CALL_FUNCTION(arg=1, lineno=4029)
DEBUG:numba.core.byteflow:stack ['$28load_global.0', '$const30.1']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=RAISE_VARARGS(arg=1, lineno=4029)
DEBUG:numba.core.byteflow:stack ['$32call_function.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=36 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=4030)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_METHOD(arg=2, lineno=4030)
DEBUG:numba.core.byteflow:stack ['$a36.0']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=CALL_METHOD(arg=0, lineno=4030)
DEBUG:numba.core.byteflow:stack ['$38load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_FAST(arg=1, lineno=4030)
DEBUG:numba.core.byteflow:stack ['$40call_method.2']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=4030)
DEBUG:numba.core.byteflow:stack ['$40call_method.2', '$indices42.3']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=4030)
DEBUG:numba.core.byteflow:stack ['$44binary_subscr.4']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$indices2.0'}), (4, {'res': '$a4.1'}), (6, {'item': '$a4.1', 'res': '$6load_attr.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6load_attr.2', 'rhs': '$const8.3', 'res': '$10binary_subtract.4'}), (12, {'lhs': '$indices2.0', 'rhs': '$10binary_subtract.4', 'res': '$12compare_op.5'}), (14, {'pred': '$12compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: (), 28: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=16 nstack_initial=0):
AdaptBlockInfo(insts=((16, {'res': '$indices16.0'}), (18, {'res': '$a18.1'}), (20, {'item': '$a18.1', 'res': '$20load_attr.2'}), (22, {'value': '$20load_attr.2', 'res': '$22unary_negative.3'}), (24, {'lhs': '$indices16.0', 'rhs': '$22unary_negative.3', 'res': '$24compare_op.4'}), (26, {'pred': '$24compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 36: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'res': '$const30.1'}), (32, {'func': '$28load_global.0', 'args': ['$const30.1'], 'res': '$32call_function.2'}), (34, {'exc': '$32call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$a36.0'}), (38, {'item': '$a36.0', 'res': '$38load_method.1'}), (40, {'func': '$38load_method.1', 'args': [], 'res': '$40call_method.2'}), (42, {'res': '$indices42.3'}), (44, {'index': '$indices42.3', 'target': '$40call_method.2', 'res': '$44binary_subscr.4'}), (46, {'retval': '$44binary_subscr.4', 'castval': '$46return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    a = arg(0, name=a)                       ['a']
    indices = arg(1, name=indices)           ['indices']
    $6load_attr.2 = getattr(value=a, attr=size) ['$6load_attr.2', 'a']
    $const8.3 = const(int, 1)                ['$const8.3']
    $10binary_subtract.4 = $6load_attr.2 - $const8.3 ['$10binary_subtract.4', '$6load_attr.2', '$const8.3']
    $12compare_op.5 = indices > $10binary_subtract.4 ['$10binary_subtract.4', '$12compare_op.5', 'indices']
    bool14 = global(bool: <class 'bool'>)    ['bool14']
    $14pred = call bool14($12compare_op.5, func=bool14, args=(Var($12compare_op.5, arrayobj.py:4028),), kws=(), vararg=None, target=None) ['$12compare_op.5', '$14pred', 'bool14']
    branch $14pred, 28, 16                   ['$14pred']
label 16:
    $20load_attr.2 = getattr(value=a, attr=size) ['$20load_attr.2', 'a']
    $22unary_negative.3 = unary(fn=<built-in function neg>, value=$20load_attr.2) ['$20load_attr.2', '$22unary_negative.3']
    $24compare_op.4 = indices < $22unary_negative.3 ['$22unary_negative.3', '$24compare_op.4', 'indices']
    bool26 = global(bool: <class 'bool'>)    ['bool26']
    $26pred = call bool26($24compare_op.4, func=bool26, args=(Var($24compare_op.4, arrayobj.py:4028),), kws=(), vararg=None, target=None) ['$24compare_op.4', '$26pred', 'bool26']
    branch $26pred, 28, 36                   ['$26pred']
label 28:
    $28load_global.0 = global(IndexError: <class 'IndexError'>) ['$28load_global.0']
    $const30.1 = const(str, Index out of bounds) ['$const30.1']
    $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arrayobj.py:4029)], kws=(), vararg=None, target=None) ['$28load_global.0', '$32call_function.2', '$const30.1']
    raise $32call_function.2                 ['$32call_function.2']
label 36:
    $38load_method.1 = getattr(value=a, attr=ravel) ['$38load_method.1', 'a']
    $40call_method.2 = call $38load_method.1(func=$38load_method.1, args=[], kws=(), vararg=None, target=None) ['$38load_method.1', '$40call_method.2']
    $44binary_subscr.4 = getitem(value=$40call_method.2, index=indices, fn=<built-in function getitem>) ['$40call_method.2', '$44binary_subscr.4', 'indices']
    $46return_value.5 = cast(value=$44binary_subscr.4) ['$44binary_subscr.4', '$46return_value.5']
    return $46return_value.5                 ['$46return_value.5']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DD362B0>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: indices = arg(1, name=indices)
DEBUG:numba.core.ssa:on stmt: $6load_attr.2 = getattr(value=a, attr=size)
DEBUG:numba.core.ssa:on stmt: $const8.3 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $10binary_subtract.4 = $6load_attr.2 - $const8.3
DEBUG:numba.core.ssa:on stmt: $12compare_op.5 = indices > $10binary_subtract.4
DEBUG:numba.core.ssa:on stmt: bool14 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $14pred = call bool14($12compare_op.5, func=bool14, args=(Var($12compare_op.5, arrayobj.py:4028),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $14pred, 28, 16
DEBUG:numba.core.ssa:==== SSA block analysis pass on 16
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DD362B0>
DEBUG:numba.core.ssa:on stmt: $20load_attr.2 = getattr(value=a, attr=size)
DEBUG:numba.core.ssa:on stmt: $22unary_negative.3 = unary(fn=<built-in function neg>, value=$20load_attr.2)
DEBUG:numba.core.ssa:on stmt: $24compare_op.4 = indices < $22unary_negative.3
DEBUG:numba.core.ssa:on stmt: bool26 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $26pred = call bool26($24compare_op.4, func=bool26, args=(Var($24compare_op.4, arrayobj.py:4028),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $26pred, 28, 36
DEBUG:numba.core.ssa:==== SSA block analysis pass on 28
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DD362B0>
DEBUG:numba.core.ssa:on stmt: $28load_global.0 = global(IndexError: <class 'IndexError'>)
DEBUG:numba.core.ssa:on stmt: $const30.1 = const(str, Index out of bounds)
DEBUG:numba.core.ssa:on stmt: $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arrayobj.py:4029)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'IndexError'>('Index out of bounds')
DEBUG:numba.core.ssa:==== SSA block analysis pass on 36
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DD362B0>
DEBUG:numba.core.ssa:on stmt: $38load_method.1 = getattr(value=a, attr=ravel)
DEBUG:numba.core.ssa:on stmt: $40call_method.2 = call $38load_method.1(func=$38load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $44binary_subscr.4 = getitem(value=$40call_method.2, index=indices, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $46return_value.5 = cast(value=$44binary_subscr.4)
DEBUG:numba.core.ssa:on stmt: return $46return_value.5
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x0000029B6DDB7E20>],
             '$12compare_op.5': [<numba.core.ir.Assign object at 0x0000029B6DDB7FA0>],
             '$14pred': [<numba.core.ir.Assign object at 0x0000029B6DDC0250>],
             '$20load_attr.2': [<numba.core.ir.Assign object at 0x0000029B6DDC0670>],
             '$22unary_negative.3': [<numba.core.ir.Assign object at 0x0000029B6DDC07F0>],
             '$24compare_op.4': [<numba.core.ir.Assign object at 0x0000029B6DDC09A0>],
             '$26pred': [<numba.core.ir.Assign object at 0x0000029B6DDC0C10>],
             '$28load_global.0': [<numba.core.ir.Assign object at 0x0000029B6DDC0DF0>],
             '$32call_function.2': [<numba.core.ir.Assign object at 0x0000029B6DDC2190>],
             '$38load_method.1': [<numba.core.ir.Assign object at 0x0000029B6DDC2550>],
             '$40call_method.2': [<numba.core.ir.Assign object at 0x0000029B6DDC2760>],
             '$44binary_subscr.4': [<numba.core.ir.Assign object at 0x0000029B6DD2A670>],
             '$46return_value.5': [<numba.core.ir.Assign object at 0x0000029B6DD2A280>],
             '$6load_attr.2': [<numba.core.ir.Assign object at 0x0000029B6DD26820>],
             '$const30.1': [<numba.core.ir.Assign object at 0x0000029B6DDC0F70>],
             '$const8.3': [<numba.core.ir.Assign object at 0x0000029B6DD12760>],
             'a': [<numba.core.ir.Assign object at 0x0000029B6DD2A940>],
             'bool14': [<numba.core.ir.Assign object at 0x0000029B6DDC0130>],
             'bool26': [<numba.core.ir.Assign object at 0x0000029B6DDC0AF0>],
             'indices': [<numba.core.ir.Assign object at 0x0000029B6DD2A070>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1863)
           2	LOAD_FAST(arg=0, lineno=1863)
           4	LOAD_METHOD(arg=0, lineno=1863)
           6	LOAD_FAST(arg=0, lineno=1863)
           8	LOAD_ATTR(arg=1, lineno=1863)
          10	CALL_METHOD(arg=1, lineno=1863)
          12	RETURN_VALUE(arg=None, lineno=1863)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1863)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1863)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=1863)
DEBUG:numba.core.byteflow:stack ['$ary2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=1863)
DEBUG:numba.core.byteflow:stack ['$4load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_ATTR(arg=1, lineno=1863)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$ary6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=CALL_METHOD(arg=1, lineno=1863)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$8load_attr.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=1863)
DEBUG:numba.core.byteflow:stack ['$10call_method.4']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$ary2.0'}), (4, {'item': '$ary2.0', 'res': '$4load_method.1'}), (6, {'res': '$ary6.2'}), (8, {'item': '$ary6.2', 'res': '$8load_attr.3'}), (10, {'func': '$4load_method.1', 'args': ['$8load_attr.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    ary = arg(0, name=ary)                   ['ary']
    $4load_method.1 = getattr(value=ary, attr=reshape) ['$4load_method.1', 'ary']
    $8load_attr.3 = getattr(value=ary, attr=size) ['$8load_attr.3', 'ary']
    $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:1863)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', '$8load_attr.3']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DDF1190>
DEBUG:numba.core.ssa:on stmt: ary = arg(0, name=ary)
DEBUG:numba.core.ssa:on stmt: $4load_method.1 = getattr(value=ary, attr=reshape)
DEBUG:numba.core.ssa:on stmt: $8load_attr.3 = getattr(value=ary, attr=size)
DEBUG:numba.core.ssa:on stmt: $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:1863)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $12return_value.5 = cast(value=$10call_method.4)
DEBUG:numba.core.ssa:on stmt: return $12return_value.5
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x0000029B6DDE5700>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x0000029B6DDE5730>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x0000029B6DDE5610>],
             '$8load_attr.3': [<numba.core.ir.Assign object at 0x0000029B6DDE52B0>],
             'ary': [<numba.core.ir.Assign object at 0x0000029B6DDDCB50>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	LOAD_GLOBAL(arg=0, lineno=1727)
          12	LOAD_FAST(arg=1, lineno=1727)
          14	CALL_FUNCTION(arg=1, lineno=1727)
          16	GET_ITER(arg=None, lineno=1727)
>         18	FOR_ITER(arg=38, lineno=1727)
          20	UNPACK_SEQUENCE(arg=2, lineno=1727)
          22	STORE_FAST(arg=4, lineno=1727)
          24	STORE_FAST(arg=5, lineno=1727)
          26	LOAD_FAST(arg=5, lineno=1728)
          28	LOAD_CONST(arg=1, lineno=1728)
          30	COMPARE_OP(arg=0, lineno=1728)
          32	POP_JUMP_IF_FALSE(arg=48, lineno=1728)
          34	LOAD_FAST(arg=2, lineno=1729)
          36	LOAD_CONST(arg=2, lineno=1729)
          38	INPLACE_ADD(arg=None, lineno=1729)
          40	STORE_FAST(arg=2, lineno=1729)
          42	LOAD_FAST(arg=4, lineno=1730)
          44	STORE_FAST(arg=6, lineno=1730)
          46	JUMP_ABSOLUTE(arg=18, lineno=1730)
>         48	LOAD_FAST(arg=3, lineno=1732)
          50	LOAD_FAST(arg=5, lineno=1732)
          52	INPLACE_MULTIPLY(arg=None, lineno=1732)
          54	STORE_FAST(arg=3, lineno=1732)
          56	JUMP_ABSOLUTE(arg=18, lineno=1732)
>         58	LOAD_FAST(arg=2, lineno=1734)
          60	LOAD_CONST(arg=1, lineno=1734)
          62	COMPARE_OP(arg=2, lineno=1734)
          64	POP_JUMP_IF_FALSE(arg=84, lineno=1734)
          66	LOAD_FAST(arg=0, lineno=1735)
          68	LOAD_FAST(arg=3, lineno=1735)
          70	COMPARE_OP(arg=3, lineno=1735)
          72	POP_JUMP_IF_FALSE(arg=164, lineno=1735)
          74	LOAD_GLOBAL(arg=1, lineno=1736)
          76	LOAD_CONST(arg=3, lineno=1736)
          78	CALL_FUNCTION(arg=1, lineno=1736)
          80	RAISE_VARARGS(arg=1, lineno=1736)
          82	JUMP_FORWARD(arg=80, lineno=1736)
>         84	LOAD_FAST(arg=2, lineno=1738)
          86	LOAD_CONST(arg=2, lineno=1738)
          88	COMPARE_OP(arg=2, lineno=1738)
          90	POP_JUMP_IF_FALSE(arg=156, lineno=1738)
          92	LOAD_FAST(arg=3, lineno=1740)
          94	LOAD_CONST(arg=1, lineno=1740)
          96	COMPARE_OP(arg=2, lineno=1740)
          98	POP_JUMP_IF_FALSE(arg=114, lineno=1740)
         100	LOAD_CONST(arg=1, lineno=1741)
         102	STORE_FAST(arg=7, lineno=1741)
         104	LOAD_FAST(arg=0, lineno=1742)
         106	LOAD_CONST(arg=1, lineno=1742)
         108	COMPARE_OP(arg=2, lineno=1742)
         110	STORE_FAST(arg=8, lineno=1742)
         112	JUMP_FORWARD(arg=20, lineno=1742)
>        114	LOAD_FAST(arg=0, lineno=1744)
         116	LOAD_FAST(arg=3, lineno=1744)
         118	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         120	STORE_FAST(arg=7, lineno=1744)
         122	LOAD_FAST(arg=0, lineno=1745)
         124	LOAD_FAST(arg=3, lineno=1745)
         126	BINARY_MODULO(arg=None, lineno=1745)
         128	LOAD_CONST(arg=1, lineno=1745)
         130	COMPARE_OP(arg=2, lineno=1745)
         132	STORE_FAST(arg=8, lineno=1745)
>        134	LOAD_FAST(arg=8, lineno=1746)
         136	POP_JUMP_IF_TRUE(arg=146, lineno=1746)
         138	LOAD_GLOBAL(arg=1, lineno=1747)
         140	LOAD_CONST(arg=3, lineno=1747)
         142	CALL_FUNCTION(arg=1, lineno=1747)
         144	RAISE_VARARGS(arg=1, lineno=1747)
>        146	LOAD_FAST(arg=7, lineno=1748)
         148	LOAD_FAST(arg=1, lineno=1748)
         150	LOAD_FAST(arg=6, lineno=1748)
         152	STORE_SUBSCR(arg=None, lineno=1748)
         154	JUMP_FORWARD(arg=8, lineno=1748)
>        156	LOAD_GLOBAL(arg=1, lineno=1751)
         158	LOAD_CONST(arg=4, lineno=1751)
         160	CALL_FUNCTION(arg=1, lineno=1751)
         162	RAISE_VARARGS(arg=1, lineno=1751)
>        164	LOAD_CONST(arg=0, lineno=1751)
         166	RETURN_VALUE(arg=None, lineno=1751)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1725)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
DEBUG:numba.core.byteflow:stack ['$const2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
DEBUG:numba.core.byteflow:stack ['$const6.1']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=1727)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=1727)
DEBUG:numba.core.byteflow:stack ['$10load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=1727)
DEBUG:numba.core.byteflow:stack ['$10load_global.2', '$shape12.3']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=GET_ITER(arg=None, lineno=1727)
DEBUG:numba.core.byteflow:stack ['$14call_function.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=18, stack=('$16get_iter.5',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=18 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi18.0']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=FOR_ITER(arg=38, lineno=1727)
DEBUG:numba.core.byteflow:stack ['$phi18.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=('$phi18.0', '$18for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=20 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_FAST(arg=2, lineno=1734)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_CONST(arg=1, lineno=1734)
DEBUG:numba.core.byteflow:stack ['$num_neg_value58.0']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=COMPARE_OP(arg=2, lineno=1734)
DEBUG:numba.core.byteflow:stack ['$num_neg_value58.0', '$const60.1']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=POP_JUMP_IF_FALSE(arg=84, lineno=1734)
DEBUG:numba.core.byteflow:stack ['$62compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=84, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=20 nstack_initial=2), State(pc_initial=66 nstack_initial=0), State(pc_initial=84 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: ['$phi20.0', '$phi20.1']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$phi20.1']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=STORE_FAST(arg=4, lineno=1727)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$20unpack_sequence.3', '$20unpack_sequence.2']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=STORE_FAST(arg=5, lineno=1727)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$20unpack_sequence.3']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_FAST(arg=5, lineno=1728)
DEBUG:numba.core.byteflow:stack ['$phi20.0']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=LOAD_CONST(arg=1, lineno=1728)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$s26.5']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=COMPARE_OP(arg=0, lineno=1728)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$s26.5', '$const28.6']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=48, lineno=1728)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$30compare_op.7']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=34, stack=('$phi20.0',), blockstack=(), npush=0), Edge(pc=48, stack=('$phi20.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=34 nstack_initial=1), State(pc_initial=48 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_FAST(arg=0, lineno=1735)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=68, inst=LOAD_FAST(arg=3, lineno=1735)
DEBUG:numba.core.byteflow:stack ['$origsize66.0']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=COMPARE_OP(arg=3, lineno=1735)
DEBUG:numba.core.byteflow:stack ['$origsize66.0', '$known_size68.1']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=164, lineno=1735)
DEBUG:numba.core.byteflow:stack ['$70compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=164, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=34 nstack_initial=1), State(pc_initial=48 nstack_initial=1), State(pc_initial=74 nstack_initial=0), State(pc_initial=164 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=84, inst=LOAD_FAST(arg=2, lineno=1738)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=86, inst=LOAD_CONST(arg=2, lineno=1738)
DEBUG:numba.core.byteflow:stack ['$num_neg_value84.0']
DEBUG:numba.core.byteflow:dispatch pc=88, inst=COMPARE_OP(arg=2, lineno=1738)
DEBUG:numba.core.byteflow:stack ['$num_neg_value84.0', '$const86.1']
DEBUG:numba.core.byteflow:dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=156, lineno=1738)
DEBUG:numba.core.byteflow:stack ['$88compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=156, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=34 nstack_initial=1), State(pc_initial=48 nstack_initial=1), State(pc_initial=74 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=156 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: ['$phi34.0']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=1729)
DEBUG:numba.core.byteflow:stack ['$phi34.0']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=1729)
DEBUG:numba.core.byteflow:stack ['$phi34.0', '$num_neg_value34.1']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=INPLACE_ADD(arg=None, lineno=1729)
DEBUG:numba.core.byteflow:stack ['$phi34.0', '$num_neg_value34.1', '$const36.2']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=STORE_FAST(arg=2, lineno=1729)
DEBUG:numba.core.byteflow:stack ['$phi34.0', '$38inplace_add.3']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_FAST(arg=4, lineno=1730)
DEBUG:numba.core.byteflow:stack ['$phi34.0']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=STORE_FAST(arg=6, lineno=1730)
DEBUG:numba.core.byteflow:stack ['$phi34.0', '$ax42.4']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=JUMP_ABSOLUTE(arg=18, lineno=1730)
DEBUG:numba.core.byteflow:stack ['$phi34.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=18, stack=('$phi34.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=48 nstack_initial=1), State(pc_initial=74 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=156 nstack_initial=0), State(pc_initial=18 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi48.0']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_FAST(arg=3, lineno=1732)
DEBUG:numba.core.byteflow:stack ['$phi48.0']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_FAST(arg=5, lineno=1732)
DEBUG:numba.core.byteflow:stack ['$phi48.0', '$known_size48.1']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
DEBUG:numba.core.byteflow:stack ['$phi48.0', '$known_size48.1', '$s50.2']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=STORE_FAST(arg=3, lineno=1732)
DEBUG:numba.core.byteflow:stack ['$phi48.0', '$52inplace_multiply.3']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=JUMP_ABSOLUTE(arg=18, lineno=1732)
DEBUG:numba.core.byteflow:stack ['$phi48.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=18, stack=('$phi48.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=156 nstack_initial=0), State(pc_initial=18 nstack_initial=1), State(pc_initial=18 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_GLOBAL(arg=1, lineno=1736)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_CONST(arg=3, lineno=1736)
DEBUG:numba.core.byteflow:stack ['$74load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=CALL_FUNCTION(arg=1, lineno=1736)
DEBUG:numba.core.byteflow:stack ['$74load_global.0', '$const76.1']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=RAISE_VARARGS(arg=1, lineno=1736)
DEBUG:numba.core.byteflow:stack ['$78call_function.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=164 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=156 nstack_initial=0), State(pc_initial=18 nstack_initial=1), State(pc_initial=18 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=164, inst=LOAD_CONST(arg=0, lineno=1751)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=166, inst=RETURN_VALUE(arg=None, lineno=1751)
DEBUG:numba.core.byteflow:stack ['$const164.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=156 nstack_initial=0), State(pc_initial=18 nstack_initial=1), State(pc_initial=18 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=92, inst=LOAD_FAST(arg=3, lineno=1740)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=94, inst=LOAD_CONST(arg=1, lineno=1740)
DEBUG:numba.core.byteflow:stack ['$known_size92.0']
DEBUG:numba.core.byteflow:dispatch pc=96, inst=COMPARE_OP(arg=2, lineno=1740)
DEBUG:numba.core.byteflow:stack ['$known_size92.0', '$const94.1']
DEBUG:numba.core.byteflow:dispatch pc=98, inst=POP_JUMP_IF_FALSE(arg=114, lineno=1740)
DEBUG:numba.core.byteflow:stack ['$96compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=100, stack=(), blockstack=(), npush=0), Edge(pc=114, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=156 nstack_initial=0), State(pc_initial=18 nstack_initial=1), State(pc_initial=18 nstack_initial=1), State(pc_initial=100 nstack_initial=0), State(pc_initial=114 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=156, inst=LOAD_GLOBAL(arg=1, lineno=1751)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=158, inst=LOAD_CONST(arg=4, lineno=1751)
DEBUG:numba.core.byteflow:stack ['$156load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=160, inst=CALL_FUNCTION(arg=1, lineno=1751)
DEBUG:numba.core.byteflow:stack ['$156load_global.0', '$const158.1']
DEBUG:numba.core.byteflow:dispatch pc=162, inst=RAISE_VARARGS(arg=1, lineno=1751)
DEBUG:numba.core.byteflow:stack ['$160call_function.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=18 nstack_initial=1), State(pc_initial=18 nstack_initial=1), State(pc_initial=100 nstack_initial=0), State(pc_initial=114 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=18 nstack_initial=1), State(pc_initial=100 nstack_initial=0), State(pc_initial=114 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=100 nstack_initial=0), State(pc_initial=114 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=100, inst=LOAD_CONST(arg=1, lineno=1741)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=102, inst=STORE_FAST(arg=7, lineno=1741)
DEBUG:numba.core.byteflow:stack ['$const100.0']
DEBUG:numba.core.byteflow:dispatch pc=104, inst=LOAD_FAST(arg=0, lineno=1742)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=106, inst=LOAD_CONST(arg=1, lineno=1742)
DEBUG:numba.core.byteflow:stack ['$origsize104.1']
DEBUG:numba.core.byteflow:dispatch pc=108, inst=COMPARE_OP(arg=2, lineno=1742)
DEBUG:numba.core.byteflow:stack ['$origsize104.1', '$const106.2']
DEBUG:numba.core.byteflow:dispatch pc=110, inst=STORE_FAST(arg=8, lineno=1742)
DEBUG:numba.core.byteflow:stack ['$108compare_op.3']
DEBUG:numba.core.byteflow:dispatch pc=112, inst=JUMP_FORWARD(arg=20, lineno=1742)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=134, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=134 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=114, inst=LOAD_FAST(arg=0, lineno=1744)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=116, inst=LOAD_FAST(arg=3, lineno=1744)
DEBUG:numba.core.byteflow:stack ['$origsize114.0']
DEBUG:numba.core.byteflow:dispatch pc=118, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
DEBUG:numba.core.byteflow:stack ['$origsize114.0', '$known_size116.1']
DEBUG:numba.core.byteflow:dispatch pc=120, inst=STORE_FAST(arg=7, lineno=1744)
DEBUG:numba.core.byteflow:stack ['$118binary_floor_divide.2']
DEBUG:numba.core.byteflow:dispatch pc=122, inst=LOAD_FAST(arg=0, lineno=1745)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=124, inst=LOAD_FAST(arg=3, lineno=1745)
DEBUG:numba.core.byteflow:stack ['$origsize122.3']
DEBUG:numba.core.byteflow:dispatch pc=126, inst=BINARY_MODULO(arg=None, lineno=1745)
DEBUG:numba.core.byteflow:stack ['$origsize122.3', '$known_size124.4']
DEBUG:numba.core.byteflow:dispatch pc=128, inst=LOAD_CONST(arg=1, lineno=1745)
DEBUG:numba.core.byteflow:stack ['$126binary_modulo.5']
DEBUG:numba.core.byteflow:dispatch pc=130, inst=COMPARE_OP(arg=2, lineno=1745)
DEBUG:numba.core.byteflow:stack ['$126binary_modulo.5', '$const128.6']
DEBUG:numba.core.byteflow:dispatch pc=132, inst=STORE_FAST(arg=8, lineno=1745)
DEBUG:numba.core.byteflow:stack ['$130compare_op.7']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=134, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=134 nstack_initial=0), State(pc_initial=134 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=134, inst=LOAD_FAST(arg=8, lineno=1746)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=136, inst=POP_JUMP_IF_TRUE(arg=146, lineno=1746)
DEBUG:numba.core.byteflow:stack ['$ok134.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=146, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=134 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=146 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=146 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=138, inst=LOAD_GLOBAL(arg=1, lineno=1747)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=140, inst=LOAD_CONST(arg=3, lineno=1747)
DEBUG:numba.core.byteflow:stack ['$138load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=142, inst=CALL_FUNCTION(arg=1, lineno=1747)
DEBUG:numba.core.byteflow:stack ['$138load_global.0', '$const140.1']
DEBUG:numba.core.byteflow:dispatch pc=144, inst=RAISE_VARARGS(arg=1, lineno=1747)
DEBUG:numba.core.byteflow:stack ['$142call_function.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=146 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=146, inst=LOAD_FAST(arg=7, lineno=1748)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=148, inst=LOAD_FAST(arg=1, lineno=1748)
DEBUG:numba.core.byteflow:stack ['$inferred146.0']
DEBUG:numba.core.byteflow:dispatch pc=150, inst=LOAD_FAST(arg=6, lineno=1748)
DEBUG:numba.core.byteflow:stack ['$inferred146.0', '$shape148.1']
DEBUG:numba.core.byteflow:dispatch pc=152, inst=STORE_SUBSCR(arg=None, lineno=1748)
DEBUG:numba.core.byteflow:stack ['$inferred146.0', '$shape148.1', '$neg_ax150.2']
DEBUG:numba.core.byteflow:dispatch pc=154, inst=JUMP_FORWARD(arg=8, lineno=1748)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=164, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=164 nstack_initial=0)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=1): {'$phi18.0'},
             State(pc_initial=20 nstack_initial=2): {'$phi20.1'},
             State(pc_initial=34 nstack_initial=1): set(),
             State(pc_initial=48 nstack_initial=1): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=100 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=134 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=156 nstack_initial=0): set(),
             State(pc_initial=164 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi18.0': State(pc_initial=0 nstack_initial=0),
 '$phi20.1': State(pc_initial=18 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi34.0', State(pc_initial=34 nstack_initial=1)),
                          ('$phi48.0', State(pc_initial=48 nstack_initial=1))},
             '$phi20.0': {('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi34.0': {('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi48.0': {('$phi20.0', State(pc_initial=20 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi34.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi34.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi34.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi18.0': {('$16get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi20.1': {('$18for_iter.2', State(pc_initial=18 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi18.0': '$16get_iter.5'},
             State(pc_initial=18 nstack_initial=1): {'$phi20.1': '$18for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'}), (10, {'res': '$10load_global.2'}), (12, {'res': '$shape12.3'}), (14, {'func': '$10load_global.2', 'args': ['$shape12.3'], 'res': '$14call_function.4'}), (16, {'value': '$14call_function.4', 'res': '$16get_iter.5'})), outgoing_phis={'$phi18.0': '$16get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$16get_iter.5',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=18 nstack_initial=1):
AdaptBlockInfo(insts=((18, {'iterator': '$phi18.0', 'pair': '$18for_iter.1', 'indval': '$18for_iter.2', 'pred': '$18for_iter.3'}),), outgoing_phis={'$phi20.1': '$18for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 20: ('$phi18.0', '$18for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=20 nstack_initial=2):
AdaptBlockInfo(insts=((20, {'iterable': '$phi20.1', 'stores': ['$20unpack_sequence.2', '$20unpack_sequence.3'], 'tupleobj': '$20unpack_sequence.4'}), (22, {'value': '$20unpack_sequence.2'}), (24, {'value': '$20unpack_sequence.3'}), (26, {'res': '$s26.5'}), (28, {'res': '$const28.6'}), (30, {'lhs': '$s26.5', 'rhs': '$const28.6', 'res': '$30compare_op.7'}), (32, {'pred': '$30compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: ('$phi20.0',), 48: ('$phi20.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=34 nstack_initial=1):
AdaptBlockInfo(insts=((34, {'res': '$num_neg_value34.1'}), (36, {'res': '$const36.2'}), (38, {'lhs': '$num_neg_value34.1', 'rhs': '$const36.2', 'res': '$38inplace_add.3'}), (40, {'value': '$38inplace_add.3'}), (42, {'res': '$ax42.4'}), (44, {'value': '$ax42.4'}), (46, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$phi34.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=48 nstack_initial=1):
AdaptBlockInfo(insts=((48, {'res': '$known_size48.1'}), (50, {'res': '$s50.2'}), (52, {'lhs': '$known_size48.1', 'rhs': '$s50.2', 'res': '$52inplace_multiply.3'}), (54, {'value': '$52inplace_multiply.3'}), (56, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$phi48.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$num_neg_value58.0'}), (60, {'res': '$const60.1'}), (62, {'lhs': '$num_neg_value58.0', 'rhs': '$const60.1', 'res': '$62compare_op.2'}), (64, {'pred': '$62compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 84: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$origsize66.0'}), (68, {'res': '$known_size68.1'}), (70, {'lhs': '$origsize66.0', 'rhs': '$known_size68.1', 'res': '$70compare_op.2'}), (72, {'pred': '$70compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 164: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$74load_global.0'}), (76, {'res': '$const76.1'}), (78, {'func': '$74load_global.0', 'args': ['$const76.1'], 'res': '$78call_function.2'}), (80, {'exc': '$78call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$num_neg_value84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$num_neg_value84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 156: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$known_size92.0'}), (94, {'res': '$const94.1'}), (96, {'lhs': '$known_size92.0', 'rhs': '$const94.1', 'res': '$96compare_op.2'}), (98, {'pred': '$96compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={100: (), 114: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=100 nstack_initial=0):
AdaptBlockInfo(insts=((100, {'res': '$const100.0'}), (102, {'value': '$const100.0'}), (104, {'res': '$origsize104.1'}), (106, {'res': '$const106.2'}), (108, {'lhs': '$origsize104.1', 'rhs': '$const106.2', 'res': '$108compare_op.3'}), (110, {'value': '$108compare_op.3'}), (112, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={134: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$origsize114.0'}), (116, {'res': '$known_size116.1'}), (118, {'lhs': '$origsize114.0', 'rhs': '$known_size116.1', 'res': '$118binary_floor_divide.2'}), (120, {'value': '$118binary_floor_divide.2'}), (122, {'res': '$origsize122.3'}), (124, {'res': '$known_size124.4'}), (126, {'lhs': '$origsize122.3', 'rhs': '$known_size124.4', 'res': '$126binary_modulo.5'}), (128, {'res': '$const128.6'}), (130, {'lhs': '$126binary_modulo.5', 'rhs': '$const128.6', 'res': '$130compare_op.7'}), (132, {'value': '$130compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={134: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=134 nstack_initial=0):
AdaptBlockInfo(insts=((134, {'res': '$ok134.0'}), (136, {'pred': '$ok134.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 146: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$138load_global.0'}), (140, {'res': '$const140.1'}), (142, {'func': '$138load_global.0', 'args': ['$const140.1'], 'res': '$142call_function.2'}), (144, {'exc': '$142call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$inferred146.0'}), (148, {'res': '$shape148.1'}), (150, {'res': '$neg_ax150.2'}), (152, {'target': '$shape148.1', 'index': '$neg_ax150.2', 'value': '$inferred146.0'}), (154, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={164: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=156 nstack_initial=0):
AdaptBlockInfo(insts=((156, {'res': '$156load_global.0'}), (158, {'res': '$const158.1'}), (160, {'func': '$156load_global.0', 'args': ['$const158.1'], 'res': '$160call_function.2'}), (162, {'exc': '$160call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=164 nstack_initial=0):
AdaptBlockInfo(insts=((164, {'res': '$const164.0'}), (166, {'retval': '$const164.0', 'castval': '$166return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    $10load_global.2 = global(enumerate: <class 'enumerate'>) ['$10load_global.2']
    $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$10load_global.2', '$14call_function.4', 'shape']
    $16get_iter.5 = getiter(value=$14call_function.4) ['$14call_function.4', '$16get_iter.5']
    $phi18.0 = $16get_iter.5                 ['$16get_iter.5', '$phi18.0']
    jump 18                                  []
label 18:
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 58             ['$18for_iter.3']
label 20:
    $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2) ['$20unpack_sequence.4', '$phi20.1']
    $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$20unpack_sequence.2', '$20unpack_sequence.4']
    $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$20unpack_sequence.3', '$20unpack_sequence.4']
    ax = $20unpack_sequence.2                ['$20unpack_sequence.2', 'ax']
    s = $20unpack_sequence.3                 ['$20unpack_sequence.3', 's']
    $const28.6 = const(int, 0)               ['$const28.6']
    $30compare_op.7 = s < $const28.6         ['$30compare_op.7', '$const28.6', 's']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$30compare_op.7', '$32pred', 'bool32']
    branch $32pred, 34, 48                   ['$32pred']
label 34:
    $const36.2 = const(int, 1)               ['$const36.2']
    $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined) ['$38inplace_add.3', '$const36.2', 'num_neg_value']
    num_neg_value = $38inplace_add.3         ['$38inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 18                                  []
label 48:
    $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$52inplace_multiply.3', 'known_size', 's']
    known_size = $52inplace_multiply.3       ['$52inplace_multiply.3', 'known_size']
    jump 18                                  []
label 58:
    $const60.1 = const(int, 0)               ['$const60.1']
    $62compare_op.2 = num_neg_value == $const60.1 ['$62compare_op.2', '$const60.1', 'num_neg_value']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$62compare_op.2', '$64pred', 'bool64']
    branch $64pred, 66, 84                   ['$64pred']
label 66:
    $70compare_op.2 = origsize != known_size ['$70compare_op.2', 'known_size', 'origsize']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$70compare_op.2', '$72pred', 'bool72']
    branch $72pred, 74, 164                  ['$72pred']
label 74:
    $74load_global.0 = global(ValueError: <class 'ValueError'>) ['$74load_global.0']
    $const76.1 = const(str, total size of new array must be unchanged) ['$const76.1']
    $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$74load_global.0', '$78call_function.2', '$const76.1']
    raise $78call_function.2                 ['$78call_function.2']
label 84:
    $const86.1 = const(int, 1)               ['$const86.1']
    $88compare_op.2 = num_neg_value == $const86.1 ['$88compare_op.2', '$const86.1', 'num_neg_value']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 156                  ['$90pred']
label 92:
    $const94.1 = const(int, 0)               ['$const94.1']
    $96compare_op.2 = known_size == $const94.1 ['$96compare_op.2', '$const94.1', 'known_size']
    bool98 = global(bool: <class 'bool'>)    ['bool98']
    $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$96compare_op.2', '$98pred', 'bool98']
    branch $98pred, 100, 114                 ['$98pred']
label 100:
    inferred = const(int, 0)                 ['inferred']
    $const106.2 = const(int, 0)              ['$const106.2']
    ok = origsize == $const106.2             ['$const106.2', 'ok', 'origsize']
    jump 134                                 []
label 114:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $126binary_modulo.5 = origsize % known_size ['$126binary_modulo.5', 'known_size', 'origsize']
    $const128.6 = const(int, 0)              ['$const128.6']
    ok = $126binary_modulo.5 == $const128.6  ['$126binary_modulo.5', '$const128.6', 'ok']
    jump 134                                 []
label 134:
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136(ok, func=bool136, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$136pred', 'bool136', 'ok']
    branch $136pred, 146, 138                ['$136pred']
label 138:
    $138load_global.0 = global(ValueError: <class 'ValueError'>) ['$138load_global.0']
    $const140.1 = const(str, total size of new array must be unchanged) ['$const140.1']
    $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$138load_global.0', '$142call_function.2', '$const140.1']
    raise $142call_function.2                ['$142call_function.2']
label 146:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 164                                 []
label 156:
    $156load_global.0 = global(ValueError: <class 'ValueError'>) ['$156load_global.0']
    $const158.1 = const(str, multiple negative shape values) ['$const158.1']
    $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$156load_global.0', '$160call_function.2', '$const158.1']
    raise $160call_function.2                ['$160call_function.2']
label 164:
    $const164.0 = const(NoneType, None)      ['$const164.0']
    $166return_value.1 = cast(value=$const164.0) ['$166return_value.1', '$const164.0']
    return $166return_value.1                ['$166return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DE22F40>
DEBUG:numba.core.ssa:on stmt: origsize = arg(0, name=origsize)
DEBUG:numba.core.ssa:on stmt: shape = arg(1, name=shape)
DEBUG:numba.core.ssa:on stmt: num_neg_value = const(int, 0)
DEBUG:numba.core.ssa:on stmt: known_size = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
DEBUG:numba.core.ssa:on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
DEBUG:numba.core.ssa:on stmt: $phi18.0 = $16get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:==== SSA block analysis pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DE22F40>
DEBUG:numba.core.ssa:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG:numba.core.ssa:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi20.1 = $18for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $18for_iter.3, 20, 58
DEBUG:numba.core.ssa:==== SSA block analysis pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DE22F40>
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: ax = $20unpack_sequence.2
DEBUG:numba.core.ssa:on stmt: s = $20unpack_sequence.3
DEBUG:numba.core.ssa:on stmt: $const28.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $30compare_op.7 = s < $const28.6
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 48
DEBUG:numba.core.ssa:==== SSA block analysis pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DE22F40>
DEBUG:numba.core.ssa:on stmt: $const36.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: num_neg_value = $38inplace_add.3
DEBUG:numba.core.ssa:on stmt: neg_ax = ax
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block analysis pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DE22F40>
DEBUG:numba.core.ssa:on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: known_size = $52inplace_multiply.3
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block analysis pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DE22F40>
DEBUG:numba.core.ssa:on stmt: $const60.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = num_neg_value == $const60.1
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 84
DEBUG:numba.core.ssa:==== SSA block analysis pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DE22F40>
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = origsize != known_size
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 164
DEBUG:numba.core.ssa:==== SSA block analysis pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DE22F40>
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block analysis pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DE22F40>
DEBUG:numba.core.ssa:on stmt: $const86.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $88compare_op.2 = num_neg_value == $const86.1
DEBUG:numba.core.ssa:on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $90pred, 92, 156
DEBUG:numba.core.ssa:==== SSA block analysis pass on 92
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DE22F40>
DEBUG:numba.core.ssa:on stmt: $const94.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $96compare_op.2 = known_size == $const94.1
DEBUG:numba.core.ssa:on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $98pred, 100, 114
DEBUG:numba.core.ssa:==== SSA block analysis pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DE22F40>
DEBUG:numba.core.ssa:on stmt: inferred = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const106.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok = origsize == $const106.2
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block analysis pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DE22F40>
DEBUG:numba.core.ssa:on stmt: inferred = origsize // known_size
DEBUG:numba.core.ssa:on stmt: $126binary_modulo.5 = origsize % known_size
DEBUG:numba.core.ssa:on stmt: $const128.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok = $126binary_modulo.5 == $const128.6
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block analysis pass on 134
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DE22F40>
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136(ok, func=bool136, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 146, 138
DEBUG:numba.core.ssa:==== SSA block analysis pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DE22F40>
DEBUG:numba.core.ssa:on stmt: $138load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block analysis pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DE22F40>
DEBUG:numba.core.ssa:on stmt: shape[neg_ax] = inferred
DEBUG:numba.core.ssa:on stmt: jump 164
DEBUG:numba.core.ssa:==== SSA block analysis pass on 156
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DE22F40>
DEBUG:numba.core.ssa:on stmt: $156load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const158.1 = const(str, multiple negative shape values)
DEBUG:numba.core.ssa:on stmt: $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
DEBUG:numba.core.ssa:==== SSA block analysis pass on 164
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DE22F40>
DEBUG:numba.core.ssa:on stmt: $const164.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $166return_value.1 = cast(value=$const164.0)
DEBUG:numba.core.ssa:on stmt: return $166return_value.1
DEBUG:numba.core.ssa:==== SSA block analysis pass on 165
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DE22F40>
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10load_global.2': [<numba.core.ir.Assign object at 0x0000029B6DE19940>],
             '$126binary_modulo.5': [<numba.core.ir.Assign object at 0x0000029B6DE2B3D0>],
             '$136pred': [<numba.core.ir.Assign object at 0x0000029B6DE2B940>],
             '$138load_global.0': [<numba.core.ir.Assign object at 0x0000029B6DE2BB80>],
             '$142call_function.2': [<numba.core.ir.Assign object at 0x0000029B6DE2BEE0>],
             '$14call_function.4': [<numba.core.ir.Assign object at 0x0000029B6DE19C40>],
             '$156load_global.0': [<numba.core.ir.Assign object at 0x0000029B6DE2D640>],
             '$160call_function.2': [<numba.core.ir.Assign object at 0x0000029B6DE2D9A0>],
             '$166return_value.1': [<numba.core.ir.Assign object at 0x0000029B6DE2DDC0>],
             '$16get_iter.5': [<numba.core.ir.Assign object at 0x0000029B6DE19D60>],
             '$18for_iter.1': [<numba.core.ir.Assign object at 0x0000029B6DE19FD0>],
             '$18for_iter.2': [<numba.core.ir.Assign object at 0x0000029B6DE1D130>],
             '$18for_iter.3': [<numba.core.ir.Assign object at 0x0000029B6DE1D250>],
             '$20unpack_sequence.2': [<numba.core.ir.Assign object at 0x0000029B6DE1D700>],
             '$20unpack_sequence.3': [<numba.core.ir.Assign object at 0x0000029B6DE1D820>],
             '$20unpack_sequence.4': [<numba.core.ir.Assign object at 0x0000029B6DE1D5B0>],
             '$30compare_op.7': [<numba.core.ir.Assign object at 0x0000029B6DE1DE50>],
             '$32pred': [<numba.core.ir.Assign object at 0x0000029B6DE22100>],
             '$38inplace_add.3': [<numba.core.ir.Assign object at 0x0000029B6DE22610>],
             '$52inplace_multiply.3': [<numba.core.ir.Assign object at 0x0000029B6DE22D90>],
             '$62compare_op.2': [<numba.core.ir.Assign object at 0x0000029B6DE24370>],
             '$64pred': [<numba.core.ir.Assign object at 0x0000029B6DE245E0>],
             '$70compare_op.2': [<numba.core.ir.Assign object at 0x0000029B6DE24A90>],
             '$72pred': [<numba.core.ir.Assign object at 0x0000029B6DE24D00>],
             '$74load_global.0': [<numba.core.ir.Assign object at 0x0000029B6DE24EE0>],
             '$78call_function.2': [<numba.core.ir.Assign object at 0x0000029B6DE26280>],
             '$88compare_op.2': [<numba.core.ir.Assign object at 0x0000029B6DE267F0>],
             '$90pred': [<numba.core.ir.Assign object at 0x0000029B6DE26A60>],
             '$96compare_op.2': [<numba.core.ir.Assign object at 0x0000029B6DE26F70>],
             '$98pred': [<numba.core.ir.Assign object at 0x0000029B6DE29220>],
             '$const106.2': [<numba.core.ir.Assign object at 0x0000029B6DE29820>],
             '$const128.6': [<numba.core.ir.Assign object at 0x0000029B6DE2B520>],
             '$const140.1': [<numba.core.ir.Assign object at 0x0000029B6DE2BD00>],
             '$const158.1': [<numba.core.ir.Assign object at 0x0000029B6DE2D7C0>],
             '$const164.0': [<numba.core.ir.Assign object at 0x0000029B6DE2DC40>],
             '$const28.6': [<numba.core.ir.Assign object at 0x0000029B6DE1DCA0>],
             '$const36.2': [<numba.core.ir.Assign object at 0x0000029B6DE22460>],
             '$const60.1': [<numba.core.ir.Assign object at 0x0000029B6DE241C0>],
             '$const76.1': [<numba.core.ir.Assign object at 0x0000029B6DE260A0>],
             '$const86.1': [<numba.core.ir.Assign object at 0x0000029B6DE26640>],
             '$const94.1': [<numba.core.ir.Assign object at 0x0000029B6DE26DC0>],
             '$phi18.0': [<numba.core.ir.Assign object at 0x0000029B6DE195B0>],
             '$phi20.1': [<numba.core.ir.Assign object at 0x0000029B6DE19F10>],
             'ax': [<numba.core.ir.Assign object at 0x0000029B6DE1D8E0>],
             'bool136': [<numba.core.ir.Assign object at 0x0000029B6DE2B820>],
             'bool32': [<numba.core.ir.Assign object at 0x0000029B6DE1DFA0>],
             'bool64': [<numba.core.ir.Assign object at 0x0000029B6DE244C0>],
             'bool72': [<numba.core.ir.Assign object at 0x0000029B6DE24BE0>],
             'bool90': [<numba.core.ir.Assign object at 0x0000029B6DE26940>],
             'bool98': [<numba.core.ir.Assign object at 0x0000029B6DE29100>],
             'inferred': [<numba.core.ir.Assign object at 0x0000029B6DE29460>,
                          <numba.core.ir.Assign object at 0x0000029B6DE29F10>],
             'known_size': [<numba.core.ir.Assign object at 0x0000029B6DE196A0>,
                            <numba.core.ir.Assign object at 0x0000029B6DE22E50>],
             'neg_ax': [<numba.core.ir.Assign object at 0x0000029B6DE228E0>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x0000029B6DE19400>,
                               <numba.core.ir.Assign object at 0x0000029B6DE226D0>],
             'ok': [<numba.core.ir.Assign object at 0x0000029B6DE299D0>,
                    <numba.core.ir.Assign object at 0x0000029B6DE2B6D0>],
             'origsize': [<numba.core.ir.Assign object at 0x0000029B6DE19160>],
             's': [<numba.core.ir.Assign object at 0x0000029B6DE1DA00>],
             'shape': [<numba.core.ir.Assign object at 0x0000029B6DE19280>]})
DEBUG:numba.core.ssa:SSA violators {'num_neg_value', 'ok', 'inferred', 'known_size'}
DEBUG:numba.core.ssa:Fix SSA violator on var num_neg_value
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: origsize = arg(0, name=origsize)
DEBUG:numba.core.ssa:on stmt: shape = arg(1, name=shape)
DEBUG:numba.core.ssa:on stmt: num_neg_value = const(int, 0)
DEBUG:numba.core.ssa:first assign: num_neg_value
DEBUG:numba.core.ssa:replaced with: num_neg_value = const(int, 0)
DEBUG:numba.core.ssa:on stmt: known_size = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
DEBUG:numba.core.ssa:on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
DEBUG:numba.core.ssa:on stmt: $phi18.0 = $16get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG:numba.core.ssa:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi20.1 = $18for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $18for_iter.3, 20, 58
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: ax = $20unpack_sequence.2
DEBUG:numba.core.ssa:on stmt: s = $20unpack_sequence.3
DEBUG:numba.core.ssa:on stmt: $const28.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $30compare_op.7 = s < $const28.6
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: $const36.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: num_neg_value = $38inplace_add.3
DEBUG:numba.core.ssa:replaced with: num_neg_value.1 = $38inplace_add.3
DEBUG:numba.core.ssa:on stmt: neg_ax = ax
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: known_size = $52inplace_multiply.3
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: $const60.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = num_neg_value == $const60.1
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 84
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = origsize != known_size
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: $const86.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $88compare_op.2 = num_neg_value == $const86.1
DEBUG:numba.core.ssa:on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $90pred, 92, 156
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 92
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: $const94.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $96compare_op.2 = known_size == $const94.1
DEBUG:numba.core.ssa:on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $98pred, 100, 114
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: inferred = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const106.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok = origsize == $const106.2
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: inferred = origsize // known_size
DEBUG:numba.core.ssa:on stmt: $126binary_modulo.5 = origsize % known_size
DEBUG:numba.core.ssa:on stmt: $const128.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok = $126binary_modulo.5 == $const128.6
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 134
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136(ok, func=bool136, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 146, 138
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: $138load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: shape[neg_ax] = inferred
DEBUG:numba.core.ssa:on stmt: jump 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 156
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: $156load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const158.1 = const(str, multiple negative shape values)
DEBUG:numba.core.ssa:on stmt: $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 164
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: $const164.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $166return_value.1 = cast(value=$const164.0)
DEBUG:numba.core.ssa:on stmt: return $166return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 165
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000029B6DE1B0D0>],
             34: [<numba.core.ir.Assign object at 0x0000029B6DE1BAC0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: origsize = arg(0, name=origsize)
DEBUG:numba.core.ssa:on stmt: shape = arg(1, name=shape)
DEBUG:numba.core.ssa:on stmt: num_neg_value = const(int, 0)
DEBUG:numba.core.ssa:on stmt: known_size = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
DEBUG:numba.core.ssa:on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
DEBUG:numba.core.ssa:on stmt: $phi18.0 = $16get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG:numba.core.ssa:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi20.1 = $18for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $18for_iter.3, 20, 58
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: ax = $20unpack_sequence.2
DEBUG:numba.core.ssa:on stmt: s = $20unpack_sequence.3
DEBUG:numba.core.ssa:on stmt: $const28.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $30compare_op.7 = s < $const28.6
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: $const36.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='num_neg_value' stmt=$38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 20 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 20
DEBUG:numba.core.ssa:find_def_from_top label 20
DEBUG:numba.core.ssa:idom 18 from label 20
DEBUG:numba.core.ssa:find_def_from_bottom label 18
DEBUG:numba.core.ssa:find_def_from_top label 18
DEBUG:numba.core.ssa:insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 18
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def num_neg_value = const(int, 0)
DEBUG:numba.core.ssa:find_def_from_bottom label 165
DEBUG:numba.core.ssa:find_def_from_top label 165
DEBUG:numba.core.ssa:insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 165
DEBUG:numba.core.ssa:find_def_from_bottom label 48
DEBUG:numba.core.ssa:find_def_from_top label 48
DEBUG:numba.core.ssa:idom 20 from label 48
DEBUG:numba.core.ssa:find_def_from_bottom label 20
DEBUG:numba.core.ssa:find_def_from_top label 20
DEBUG:numba.core.ssa:idom 18 from label 20
DEBUG:numba.core.ssa:find_def_from_bottom label 18
DEBUG:numba.core.ssa:incoming_def num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[0])
DEBUG:numba.core.ssa:find_def_from_bottom label 34
DEBUG:numba.core.ssa:incoming_def num_neg_value.1 = $38inplace_add.3
DEBUG:numba.core.ssa:incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[48, 34])
DEBUG:numba.core.ssa:replaced with: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: num_neg_value.1 = $38inplace_add.3
DEBUG:numba.core.ssa:on stmt: neg_ax = ax
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: known_size = $52inplace_multiply.3
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: $const60.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = num_neg_value == $const60.1
DEBUG:numba.core.ssa:find_def var='num_neg_value' stmt=$62compare_op.2 = num_neg_value == $const60.1
DEBUG:numba.core.ssa:find_def_from_top label 58
DEBUG:numba.core.ssa:idom 18 from label 58
DEBUG:numba.core.ssa:find_def_from_bottom label 18
DEBUG:numba.core.ssa:replaced with: $62compare_op.2 = num_neg_value.2 == $const60.1
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 84
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = origsize != known_size
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: $const86.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $88compare_op.2 = num_neg_value == $const86.1
DEBUG:numba.core.ssa:find_def var='num_neg_value' stmt=$88compare_op.2 = num_neg_value == $const86.1
DEBUG:numba.core.ssa:find_def_from_top label 84
DEBUG:numba.core.ssa:idom 58 from label 84
DEBUG:numba.core.ssa:find_def_from_bottom label 58
DEBUG:numba.core.ssa:find_def_from_top label 58
DEBUG:numba.core.ssa:idom 18 from label 58
DEBUG:numba.core.ssa:find_def_from_bottom label 18
DEBUG:numba.core.ssa:replaced with: $88compare_op.2 = num_neg_value.2 == $const86.1
DEBUG:numba.core.ssa:on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $90pred, 92, 156
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 92
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: $const94.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $96compare_op.2 = known_size == $const94.1
DEBUG:numba.core.ssa:on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $98pred, 100, 114
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: inferred = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const106.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok = origsize == $const106.2
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: inferred = origsize // known_size
DEBUG:numba.core.ssa:on stmt: $126binary_modulo.5 = origsize % known_size
DEBUG:numba.core.ssa:on stmt: $const128.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok = $126binary_modulo.5 == $const128.6
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 134
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136(ok, func=bool136, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 146, 138
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: $138load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: shape[neg_ax] = inferred
DEBUG:numba.core.ssa:on stmt: jump 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 156
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: $156load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const158.1 = const(str, multiple negative shape values)
DEBUG:numba.core.ssa:on stmt: $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 164
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: $const164.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $166return_value.1 = cast(value=$const164.0)
DEBUG:numba.core.ssa:on stmt: return $166return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 165
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B040>
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:Fix SSA violator on var ok
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B400>
DEBUG:numba.core.ssa:on stmt: origsize = arg(0, name=origsize)
DEBUG:numba.core.ssa:on stmt: shape = arg(1, name=shape)
DEBUG:numba.core.ssa:on stmt: num_neg_value = const(int, 0)
DEBUG:numba.core.ssa:on stmt: known_size = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
DEBUG:numba.core.ssa:on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
DEBUG:numba.core.ssa:on stmt: $phi18.0 = $16get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B400>
DEBUG:numba.core.ssa:on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:1725), Var(num_neg_value.3, arrayobj.py:1729)], incoming_blocks=[0, 165])
DEBUG:numba.core.ssa:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG:numba.core.ssa:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi20.1 = $18for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $18for_iter.3, 20, 58
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B400>
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: ax = $20unpack_sequence.2
DEBUG:numba.core.ssa:on stmt: s = $20unpack_sequence.3
DEBUG:numba.core.ssa:on stmt: $const28.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $30compare_op.7 = s < $const28.6
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B400>
DEBUG:numba.core.ssa:on stmt: $const36.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: num_neg_value.1 = $38inplace_add.3
DEBUG:numba.core.ssa:on stmt: neg_ax = ax
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B400>
DEBUG:numba.core.ssa:on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: known_size = $52inplace_multiply.3
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B400>
DEBUG:numba.core.ssa:on stmt: $const60.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = num_neg_value.2 == $const60.1
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 84
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B400>
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = origsize != known_size
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B400>
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B400>
DEBUG:numba.core.ssa:on stmt: $const86.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $88compare_op.2 = num_neg_value.2 == $const86.1
DEBUG:numba.core.ssa:on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $90pred, 92, 156
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 92
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B400>
DEBUG:numba.core.ssa:on stmt: $const94.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $96compare_op.2 = known_size == $const94.1
DEBUG:numba.core.ssa:on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $98pred, 100, 114
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B400>
DEBUG:numba.core.ssa:on stmt: inferred = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const106.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok = origsize == $const106.2
DEBUG:numba.core.ssa:first assign: ok
DEBUG:numba.core.ssa:replaced with: ok = origsize == $const106.2
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B400>
DEBUG:numba.core.ssa:on stmt: inferred = origsize // known_size
DEBUG:numba.core.ssa:on stmt: $126binary_modulo.5 = origsize % known_size
DEBUG:numba.core.ssa:on stmt: $const128.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok = $126binary_modulo.5 == $const128.6
DEBUG:numba.core.ssa:replaced with: ok.1 = $126binary_modulo.5 == $const128.6
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 134
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B400>
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136(ok, func=bool136, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 146, 138
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B400>
DEBUG:numba.core.ssa:on stmt: $138load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B400>
DEBUG:numba.core.ssa:on stmt: shape[neg_ax] = inferred
DEBUG:numba.core.ssa:on stmt: jump 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 156
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B400>
DEBUG:numba.core.ssa:on stmt: $156load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const158.1 = const(str, multiple negative shape values)
DEBUG:numba.core.ssa:on stmt: $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 164
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B400>
DEBUG:numba.core.ssa:on stmt: $const164.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $166return_value.1 = cast(value=$const164.0)
DEBUG:numba.core.ssa:on stmt: return $166return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 165
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE1B400>
DEBUG:numba.core.ssa:on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[48, 34])
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {100: [<numba.core.ir.Assign object at 0x0000029B6DE1B2E0>],
             114: [<numba.core.ir.Assign object at 0x0000029B6DE1B5E0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: origsize = arg(0, name=origsize)
DEBUG:numba.core.ssa:on stmt: shape = arg(1, name=shape)
DEBUG:numba.core.ssa:on stmt: num_neg_value = const(int, 0)
DEBUG:numba.core.ssa:on stmt: known_size = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
DEBUG:numba.core.ssa:on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
DEBUG:numba.core.ssa:on stmt: $phi18.0 = $16get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:1725), Var(num_neg_value.3, arrayobj.py:1729)], incoming_blocks=[0, 165])
DEBUG:numba.core.ssa:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG:numba.core.ssa:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi20.1 = $18for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $18for_iter.3, 20, 58
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: ax = $20unpack_sequence.2
DEBUG:numba.core.ssa:on stmt: s = $20unpack_sequence.3
DEBUG:numba.core.ssa:on stmt: $const28.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $30compare_op.7 = s < $const28.6
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: $const36.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: num_neg_value.1 = $38inplace_add.3
DEBUG:numba.core.ssa:on stmt: neg_ax = ax
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: known_size = $52inplace_multiply.3
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: $const60.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = num_neg_value.2 == $const60.1
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 84
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = origsize != known_size
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: $const86.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $88compare_op.2 = num_neg_value.2 == $const86.1
DEBUG:numba.core.ssa:on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $90pred, 92, 156
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 92
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: $const94.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $96compare_op.2 = known_size == $const94.1
DEBUG:numba.core.ssa:on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $98pred, 100, 114
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: inferred = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const106.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok = origsize == $const106.2
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: inferred = origsize // known_size
DEBUG:numba.core.ssa:on stmt: $126binary_modulo.5 = origsize % known_size
DEBUG:numba.core.ssa:on stmt: $const128.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok.1 = $126binary_modulo.5 == $const128.6
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 134
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136(ok, func=bool136, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def var='ok' stmt=$136pred = call bool136(ok, func=bool136, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def_from_top label 134
DEBUG:numba.core.ssa:insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 134
DEBUG:numba.core.ssa:find_def_from_bottom label 114
DEBUG:numba.core.ssa:incoming_def ok.1 = $126binary_modulo.5 == $const128.6
DEBUG:numba.core.ssa:find_def_from_bottom label 100
DEBUG:numba.core.ssa:incoming_def ok = origsize == $const106.2
DEBUG:numba.core.ssa:replaced with: $136pred = call bool136(ok.2, func=bool136, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 146, 138
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: $138load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: shape[neg_ax] = inferred
DEBUG:numba.core.ssa:on stmt: jump 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 156
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: $156load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const158.1 = const(str, multiple negative shape values)
DEBUG:numba.core.ssa:on stmt: $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 164
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: $const164.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $166return_value.1 = cast(value=$const164.0)
DEBUG:numba.core.ssa:on stmt: return $166return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 165
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[48, 34])
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:Fix SSA violator on var inferred
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE06F40>
DEBUG:numba.core.ssa:on stmt: origsize = arg(0, name=origsize)
DEBUG:numba.core.ssa:on stmt: shape = arg(1, name=shape)
DEBUG:numba.core.ssa:on stmt: num_neg_value = const(int, 0)
DEBUG:numba.core.ssa:on stmt: known_size = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
DEBUG:numba.core.ssa:on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
DEBUG:numba.core.ssa:on stmt: $phi18.0 = $16get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE06F40>
DEBUG:numba.core.ssa:on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:1725), Var(num_neg_value.3, arrayobj.py:1729)], incoming_blocks=[0, 165])
DEBUG:numba.core.ssa:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG:numba.core.ssa:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi20.1 = $18for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $18for_iter.3, 20, 58
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE06F40>
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: ax = $20unpack_sequence.2
DEBUG:numba.core.ssa:on stmt: s = $20unpack_sequence.3
DEBUG:numba.core.ssa:on stmt: $const28.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $30compare_op.7 = s < $const28.6
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE06F40>
DEBUG:numba.core.ssa:on stmt: $const36.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: num_neg_value.1 = $38inplace_add.3
DEBUG:numba.core.ssa:on stmt: neg_ax = ax
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE06F40>
DEBUG:numba.core.ssa:on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: known_size = $52inplace_multiply.3
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE06F40>
DEBUG:numba.core.ssa:on stmt: $const60.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = num_neg_value.2 == $const60.1
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 84
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE06F40>
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = origsize != known_size
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE06F40>
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE06F40>
DEBUG:numba.core.ssa:on stmt: $const86.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $88compare_op.2 = num_neg_value.2 == $const86.1
DEBUG:numba.core.ssa:on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $90pred, 92, 156
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 92
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE06F40>
DEBUG:numba.core.ssa:on stmt: $const94.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $96compare_op.2 = known_size == $const94.1
DEBUG:numba.core.ssa:on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $98pred, 100, 114
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE06F40>
DEBUG:numba.core.ssa:on stmt: inferred = const(int, 0)
DEBUG:numba.core.ssa:first assign: inferred
DEBUG:numba.core.ssa:replaced with: inferred = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const106.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok = origsize == $const106.2
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE06F40>
DEBUG:numba.core.ssa:on stmt: inferred = origsize // known_size
DEBUG:numba.core.ssa:replaced with: inferred.1 = origsize // known_size
DEBUG:numba.core.ssa:on stmt: $126binary_modulo.5 = origsize % known_size
DEBUG:numba.core.ssa:on stmt: $const128.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok.1 = $126binary_modulo.5 == $const128.6
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 134
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE06F40>
DEBUG:numba.core.ssa:on stmt: ok.2 = phi(incoming_values=[Var(ok.1, arrayobj.py:1745), Var(ok, arrayobj.py:1742)], incoming_blocks=[114, 100])
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136(ok.2, func=bool136, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 146, 138
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE06F40>
DEBUG:numba.core.ssa:on stmt: $138load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE06F40>
DEBUG:numba.core.ssa:on stmt: shape[neg_ax] = inferred
DEBUG:numba.core.ssa:on stmt: jump 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 156
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE06F40>
DEBUG:numba.core.ssa:on stmt: $156load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const158.1 = const(str, multiple negative shape values)
DEBUG:numba.core.ssa:on stmt: $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 164
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE06F40>
DEBUG:numba.core.ssa:on stmt: $const164.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $166return_value.1 = cast(value=$const164.0)
DEBUG:numba.core.ssa:on stmt: return $166return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 165
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DE06F40>
DEBUG:numba.core.ssa:on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[48, 34])
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {100: [<numba.core.ir.Assign object at 0x0000029B6DE1B100>],
             114: [<numba.core.ir.Assign object at 0x0000029B6DE1B2B0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B580>
DEBUG:numba.core.ssa:on stmt: origsize = arg(0, name=origsize)
DEBUG:numba.core.ssa:on stmt: shape = arg(1, name=shape)
DEBUG:numba.core.ssa:on stmt: num_neg_value = const(int, 0)
DEBUG:numba.core.ssa:on stmt: known_size = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
DEBUG:numba.core.ssa:on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
DEBUG:numba.core.ssa:on stmt: $phi18.0 = $16get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B580>
DEBUG:numba.core.ssa:on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:1725), Var(num_neg_value.3, arrayobj.py:1729)], incoming_blocks=[0, 165])
DEBUG:numba.core.ssa:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG:numba.core.ssa:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi20.1 = $18for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $18for_iter.3, 20, 58
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B580>
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: ax = $20unpack_sequence.2
DEBUG:numba.core.ssa:on stmt: s = $20unpack_sequence.3
DEBUG:numba.core.ssa:on stmt: $const28.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $30compare_op.7 = s < $const28.6
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B580>
DEBUG:numba.core.ssa:on stmt: $const36.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: num_neg_value.1 = $38inplace_add.3
DEBUG:numba.core.ssa:on stmt: neg_ax = ax
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B580>
DEBUG:numba.core.ssa:on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: known_size = $52inplace_multiply.3
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B580>
DEBUG:numba.core.ssa:on stmt: $const60.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = num_neg_value.2 == $const60.1
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 84
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B580>
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = origsize != known_size
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B580>
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B580>
DEBUG:numba.core.ssa:on stmt: $const86.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $88compare_op.2 = num_neg_value.2 == $const86.1
DEBUG:numba.core.ssa:on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $90pred, 92, 156
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 92
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B580>
DEBUG:numba.core.ssa:on stmt: $const94.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $96compare_op.2 = known_size == $const94.1
DEBUG:numba.core.ssa:on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $98pred, 100, 114
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B580>
DEBUG:numba.core.ssa:on stmt: inferred = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const106.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok = origsize == $const106.2
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B580>
DEBUG:numba.core.ssa:on stmt: inferred.1 = origsize // known_size
DEBUG:numba.core.ssa:on stmt: $126binary_modulo.5 = origsize % known_size
DEBUG:numba.core.ssa:on stmt: $const128.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok.1 = $126binary_modulo.5 == $const128.6
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 134
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B580>
DEBUG:numba.core.ssa:on stmt: ok.2 = phi(incoming_values=[Var(ok.1, arrayobj.py:1745), Var(ok, arrayobj.py:1742)], incoming_blocks=[114, 100])
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136(ok.2, func=bool136, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 146, 138
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B580>
DEBUG:numba.core.ssa:on stmt: $138load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B580>
DEBUG:numba.core.ssa:on stmt: shape[neg_ax] = inferred
DEBUG:numba.core.ssa:find_def var='inferred' stmt=shape[neg_ax] = inferred
DEBUG:numba.core.ssa:find_def_from_top label 146
DEBUG:numba.core.ssa:idom 134 from label 146
DEBUG:numba.core.ssa:find_def_from_bottom label 134
DEBUG:numba.core.ssa:find_def_from_top label 134
DEBUG:numba.core.ssa:insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 134
DEBUG:numba.core.ssa:find_def_from_bottom label 114
DEBUG:numba.core.ssa:incoming_def inferred.1 = origsize // known_size
DEBUG:numba.core.ssa:find_def_from_bottom label 100
DEBUG:numba.core.ssa:incoming_def inferred = const(int, 0)
DEBUG:numba.core.ssa:replaced with: shape[neg_ax] = inferred.2
DEBUG:numba.core.ssa:on stmt: jump 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 156
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B580>
DEBUG:numba.core.ssa:on stmt: $156load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const158.1 = const(str, multiple negative shape values)
DEBUG:numba.core.ssa:on stmt: $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 164
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B580>
DEBUG:numba.core.ssa:on stmt: $const164.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $166return_value.1 = cast(value=$const164.0)
DEBUG:numba.core.ssa:on stmt: return $166return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 165
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE1B580>
DEBUG:numba.core.ssa:on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[48, 34])
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:Fix SSA violator on var known_size
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: origsize = arg(0, name=origsize)
DEBUG:numba.core.ssa:on stmt: shape = arg(1, name=shape)
DEBUG:numba.core.ssa:on stmt: num_neg_value = const(int, 0)
DEBUG:numba.core.ssa:on stmt: known_size = const(int, 1)
DEBUG:numba.core.ssa:first assign: known_size
DEBUG:numba.core.ssa:replaced with: known_size = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
DEBUG:numba.core.ssa:on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
DEBUG:numba.core.ssa:on stmt: $phi18.0 = $16get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:1725), Var(num_neg_value.3, arrayobj.py:1729)], incoming_blocks=[0, 165])
DEBUG:numba.core.ssa:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG:numba.core.ssa:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi20.1 = $18for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $18for_iter.3, 20, 58
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: ax = $20unpack_sequence.2
DEBUG:numba.core.ssa:on stmt: s = $20unpack_sequence.3
DEBUG:numba.core.ssa:on stmt: $const28.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $30compare_op.7 = s < $const28.6
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: $const36.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: num_neg_value.1 = $38inplace_add.3
DEBUG:numba.core.ssa:on stmt: neg_ax = ax
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: known_size = $52inplace_multiply.3
DEBUG:numba.core.ssa:replaced with: known_size.1 = $52inplace_multiply.3
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: $const60.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = num_neg_value.2 == $const60.1
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 84
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = origsize != known_size
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: $const86.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $88compare_op.2 = num_neg_value.2 == $const86.1
DEBUG:numba.core.ssa:on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $90pred, 92, 156
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 92
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: $const94.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $96compare_op.2 = known_size == $const94.1
DEBUG:numba.core.ssa:on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $98pred, 100, 114
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: inferred = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const106.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok = origsize == $const106.2
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: inferred.1 = origsize // known_size
DEBUG:numba.core.ssa:on stmt: $126binary_modulo.5 = origsize % known_size
DEBUG:numba.core.ssa:on stmt: $const128.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok.1 = $126binary_modulo.5 == $const128.6
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 134
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: inferred.2 = phi(incoming_values=[Var(inferred.1, arrayobj.py:1744), Var(inferred, arrayobj.py:1741)], incoming_blocks=[114, 100])
DEBUG:numba.core.ssa:on stmt: ok.2 = phi(incoming_values=[Var(ok.1, arrayobj.py:1745), Var(ok, arrayobj.py:1742)], incoming_blocks=[114, 100])
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136(ok.2, func=bool136, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 146, 138
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: $138load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: shape[neg_ax] = inferred.2
DEBUG:numba.core.ssa:on stmt: jump 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 156
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: $156load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const158.1 = const(str, multiple negative shape values)
DEBUG:numba.core.ssa:on stmt: $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 164
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: $const164.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $166return_value.1 = cast(value=$const164.0)
DEBUG:numba.core.ssa:on stmt: return $166return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 165
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6DDEEC70>
DEBUG:numba.core.ssa:on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[48, 34])
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000029B6DE06EE0>],
             48: [<numba.core.ir.Assign object at 0x0000029B6DE1B4F0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE06FD0>
DEBUG:numba.core.ssa:on stmt: origsize = arg(0, name=origsize)
DEBUG:numba.core.ssa:on stmt: shape = arg(1, name=shape)
DEBUG:numba.core.ssa:on stmt: num_neg_value = const(int, 0)
DEBUG:numba.core.ssa:on stmt: known_size = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
DEBUG:numba.core.ssa:on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
DEBUG:numba.core.ssa:on stmt: $phi18.0 = $16get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE06FD0>
DEBUG:numba.core.ssa:on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:1725), Var(num_neg_value.3, arrayobj.py:1729)], incoming_blocks=[0, 165])
DEBUG:numba.core.ssa:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG:numba.core.ssa:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi20.1 = $18for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $18for_iter.3, 20, 58
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE06FD0>
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: ax = $20unpack_sequence.2
DEBUG:numba.core.ssa:on stmt: s = $20unpack_sequence.3
DEBUG:numba.core.ssa:on stmt: $const28.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $30compare_op.7 = s < $const28.6
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE06FD0>
DEBUG:numba.core.ssa:on stmt: $const36.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: num_neg_value.1 = $38inplace_add.3
DEBUG:numba.core.ssa:on stmt: neg_ax = ax
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE06FD0>
DEBUG:numba.core.ssa:on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='known_size' stmt=$52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 48
DEBUG:numba.core.ssa:idom 20 from label 48
DEBUG:numba.core.ssa:find_def_from_bottom label 20
DEBUG:numba.core.ssa:find_def_from_top label 20
DEBUG:numba.core.ssa:idom 18 from label 20
DEBUG:numba.core.ssa:find_def_from_bottom label 18
DEBUG:numba.core.ssa:find_def_from_top label 18
DEBUG:numba.core.ssa:insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 18
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def known_size = const(int, 1)
DEBUG:numba.core.ssa:find_def_from_bottom label 165
DEBUG:numba.core.ssa:find_def_from_top label 165
DEBUG:numba.core.ssa:insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 165
DEBUG:numba.core.ssa:find_def_from_bottom label 48
DEBUG:numba.core.ssa:incoming_def known_size.1 = $52inplace_multiply.3
DEBUG:numba.core.ssa:find_def_from_bottom label 34
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 20 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 20
DEBUG:numba.core.ssa:find_def_from_top label 20
DEBUG:numba.core.ssa:idom 18 from label 20
DEBUG:numba.core.ssa:find_def_from_bottom label 18
DEBUG:numba.core.ssa:incoming_def known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:1726)], incoming_blocks=[0])
DEBUG:numba.core.ssa:incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[48, 34])
DEBUG:numba.core.ssa:replaced with: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: known_size.1 = $52inplace_multiply.3
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE06FD0>
DEBUG:numba.core.ssa:on stmt: $const60.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = num_neg_value.2 == $const60.1
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 84
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE06FD0>
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = origsize != known_size
DEBUG:numba.core.ssa:find_def var='known_size' stmt=$70compare_op.2 = origsize != known_size
DEBUG:numba.core.ssa:find_def_from_top label 66
DEBUG:numba.core.ssa:idom 58 from label 66
DEBUG:numba.core.ssa:find_def_from_bottom label 58
DEBUG:numba.core.ssa:find_def_from_top label 58
DEBUG:numba.core.ssa:idom 18 from label 58
DEBUG:numba.core.ssa:find_def_from_bottom label 18
DEBUG:numba.core.ssa:replaced with: $70compare_op.2 = origsize != known_size.2
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE06FD0>
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE06FD0>
DEBUG:numba.core.ssa:on stmt: $const86.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $88compare_op.2 = num_neg_value.2 == $const86.1
DEBUG:numba.core.ssa:on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $90pred, 92, 156
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 92
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE06FD0>
DEBUG:numba.core.ssa:on stmt: $const94.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $96compare_op.2 = known_size == $const94.1
DEBUG:numba.core.ssa:find_def var='known_size' stmt=$96compare_op.2 = known_size == $const94.1
DEBUG:numba.core.ssa:find_def_from_top label 92
DEBUG:numba.core.ssa:idom 84 from label 92
DEBUG:numba.core.ssa:find_def_from_bottom label 84
DEBUG:numba.core.ssa:find_def_from_top label 84
DEBUG:numba.core.ssa:idom 58 from label 84
DEBUG:numba.core.ssa:find_def_from_bottom label 58
DEBUG:numba.core.ssa:find_def_from_top label 58
DEBUG:numba.core.ssa:idom 18 from label 58
DEBUG:numba.core.ssa:find_def_from_bottom label 18
DEBUG:numba.core.ssa:replaced with: $96compare_op.2 = known_size.2 == $const94.1
DEBUG:numba.core.ssa:on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $98pred, 100, 114
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE06FD0>
DEBUG:numba.core.ssa:on stmt: inferred = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const106.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok = origsize == $const106.2
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE06FD0>
DEBUG:numba.core.ssa:on stmt: inferred.1 = origsize // known_size
DEBUG:numba.core.ssa:find_def var='known_size' stmt=inferred.1 = origsize // known_size
DEBUG:numba.core.ssa:find_def_from_top label 114
DEBUG:numba.core.ssa:idom 92 from label 114
DEBUG:numba.core.ssa:find_def_from_bottom label 92
DEBUG:numba.core.ssa:find_def_from_top label 92
DEBUG:numba.core.ssa:idom 84 from label 92
DEBUG:numba.core.ssa:find_def_from_bottom label 84
DEBUG:numba.core.ssa:find_def_from_top label 84
DEBUG:numba.core.ssa:idom 58 from label 84
DEBUG:numba.core.ssa:find_def_from_bottom label 58
DEBUG:numba.core.ssa:find_def_from_top label 58
DEBUG:numba.core.ssa:idom 18 from label 58
DEBUG:numba.core.ssa:find_def_from_bottom label 18
DEBUG:numba.core.ssa:replaced with: inferred.1 = origsize // known_size.2
DEBUG:numba.core.ssa:on stmt: $126binary_modulo.5 = origsize % known_size
DEBUG:numba.core.ssa:find_def var='known_size' stmt=$126binary_modulo.5 = origsize % known_size
DEBUG:numba.core.ssa:find_def_from_top label 114
DEBUG:numba.core.ssa:idom 92 from label 114
DEBUG:numba.core.ssa:find_def_from_bottom label 92
DEBUG:numba.core.ssa:find_def_from_top label 92
DEBUG:numba.core.ssa:idom 84 from label 92
DEBUG:numba.core.ssa:find_def_from_bottom label 84
DEBUG:numba.core.ssa:find_def_from_top label 84
DEBUG:numba.core.ssa:idom 58 from label 84
DEBUG:numba.core.ssa:find_def_from_bottom label 58
DEBUG:numba.core.ssa:find_def_from_top label 58
DEBUG:numba.core.ssa:idom 18 from label 58
DEBUG:numba.core.ssa:find_def_from_bottom label 18
DEBUG:numba.core.ssa:replaced with: $126binary_modulo.5 = origsize % known_size.2
DEBUG:numba.core.ssa:on stmt: $const128.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok.1 = $126binary_modulo.5 == $const128.6
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 134
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE06FD0>
DEBUG:numba.core.ssa:on stmt: inferred.2 = phi(incoming_values=[Var(inferred.1, arrayobj.py:1744), Var(inferred, arrayobj.py:1741)], incoming_blocks=[114, 100])
DEBUG:numba.core.ssa:on stmt: ok.2 = phi(incoming_values=[Var(ok.1, arrayobj.py:1745), Var(ok, arrayobj.py:1742)], incoming_blocks=[114, 100])
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136(ok.2, func=bool136, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 146, 138
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE06FD0>
DEBUG:numba.core.ssa:on stmt: $138load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE06FD0>
DEBUG:numba.core.ssa:on stmt: shape[neg_ax] = inferred.2
DEBUG:numba.core.ssa:on stmt: jump 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 156
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE06FD0>
DEBUG:numba.core.ssa:on stmt: $156load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const158.1 = const(str, multiple negative shape values)
DEBUG:numba.core.ssa:on stmt: $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 164
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE06FD0>
DEBUG:numba.core.ssa:on stmt: $const164.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $166return_value.1 = cast(value=$const164.0)
DEBUG:numba.core.ssa:on stmt: return $166return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 165
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6DE06FD0>
DEBUG:numba.core.ssa:on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[48, 34])
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=78)
           2	LOAD_FAST(arg=0, lineno=78)
           4	LOAD_FAST(arg=1, lineno=76)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=78)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=78)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=76)
DEBUG:numba.core.byteflow:stack ['$_422binary_subscr_8_12.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$_422binary_subscr_8_12.0', '$s_2_14.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$6binary_true_divide.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_422binary_subscr_8_12.0'}), (4, {'res': '$s_2_14.1'}), (6, {'lhs': '$_422binary_subscr_8_12.0', 'rhs': '$s_2_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    _422binary_subscr_8_1 = arg(0, name=_422binary_subscr_8_1) ['_422binary_subscr_8_1']
    s_2_1 = arg(1, name=s_2_1)               ['s_2_1']
    $6binary_true_divide.2 = _422binary_subscr_8_1 / s_2_1 ['$6binary_true_divide.2', '_422binary_subscr_8_1', 's_2_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6DECA8B0>
DEBUG:numba.core.ssa:on stmt: _422binary_subscr_8_1 = arg(0, name=_422binary_subscr_8_1)
DEBUG:numba.core.ssa:on stmt: s_2_1 = arg(1, name=s_2_1)
DEBUG:numba.core.ssa:on stmt: $6binary_true_divide.2 = _422binary_subscr_8_1 / s_2_1
DEBUG:numba.core.ssa:on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $8return_value.3
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x0000029B6DF444C0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000029B6DF44610>],
             '_422binary_subscr_8_1': [<numba.core.ir.Assign object at 0x0000029B6DECA3A0>],
             's_2_1': [<numba.core.ir.Assign object at 0x0000029B6DEC0F40>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=87)
           2	LOAD_FAST(arg=0, lineno=87)
           4	LOAD_FAST(arg=1, lineno=86)
           6	BINARY_SUBTRACT(arg=None, lineno=1)
           8	LOAD_CONST(arg=1, lineno=1)
          10	BINARY_POWER(arg=None, lineno=1)
          12	RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=87)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=87)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=86)
DEBUG:numba.core.byteflow:stack ['$_558binary_subscr_26_12.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$_558binary_subscr_26_12.0', '$mu_14.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=1)
DEBUG:numba.core.byteflow:stack ['$6binary_subtract.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=BINARY_POWER(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$6binary_subtract.2', '$const8.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$10binary_power.4']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_558binary_subscr_26_12.0'}), (4, {'res': '$mu_14.1'}), (6, {'lhs': '$_558binary_subscr_26_12.0', 'rhs': '$mu_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$const8.3', 'res': '$10binary_power.4'}), (12, {'retval': '$10binary_power.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    _558binary_subscr_26_1 = arg(0, name=_558binary_subscr_26_1) ['_558binary_subscr_26_1']
    mu_1 = arg(1, name=mu_1)                 ['mu_1']
    $6binary_subtract.2 = _558binary_subscr_26_1 - mu_1 ['$6binary_subtract.2', '_558binary_subscr_26_1', 'mu_1']
    $const8.3 = const(int, 2)                ['$const8.3']
    $10binary_power.4 = $6binary_subtract.2 ** $const8.3 ['$10binary_power.4', '$6binary_subtract.2', '$const8.3']
    $12return_value.5 = cast(value=$10binary_power.4) ['$10binary_power.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6E0C57F0>
DEBUG:numba.core.ssa:on stmt: _558binary_subscr_26_1 = arg(0, name=_558binary_subscr_26_1)
DEBUG:numba.core.ssa:on stmt: mu_1 = arg(1, name=mu_1)
DEBUG:numba.core.ssa:on stmt: $6binary_subtract.2 = _558binary_subscr_26_1 - mu_1
DEBUG:numba.core.ssa:on stmt: $const8.3 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $10binary_power.4 = $6binary_subtract.2 ** $const8.3
DEBUG:numba.core.ssa:on stmt: $12return_value.5 = cast(value=$10binary_power.4)
DEBUG:numba.core.ssa:on stmt: return $12return_value.5
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10binary_power.4': [<numba.core.ir.Assign object at 0x0000029B6E0CC190>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x0000029B6E0CC2E0>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x0000029B6E0C5E50>],
             '$const8.3': [<numba.core.ir.Assign object at 0x0000029B6E0C5FA0>],
             '_558binary_subscr_26_1': [<numba.core.ir.Assign object at 0x0000029B6E0C5280>],
             'mu_1': [<numba.core.ir.Assign object at 0x0000029B6E0C5100>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=217)
           2	LOAD_DEREF(arg=1, lineno=217)
           4	LOAD_CONST(arg=1, lineno=217)
           6	CALL_FUNCTION(arg=1, lineno=217)
           8	STORE_FAST(arg=2, lineno=217)
          10	LOAD_DEREF(arg=1, lineno=218)
          12	LOAD_FAST(arg=0, lineno=218)
          14	CALL_FUNCTION(arg=1, lineno=218)
          16	STORE_FAST(arg=0, lineno=218)
          18	LOAD_FAST(arg=1, lineno=219)
          20	LOAD_CONST(arg=2, lineno=219)
          22	COMPARE_OP(arg=0, lineno=219)
          24	POP_JUMP_IF_FALSE(arg=98, lineno=219)
          26	LOAD_CONST(arg=3, lineno=220)
          28	STORE_FAST(arg=3, lineno=220)
          30	LOAD_FAST(arg=1, lineno=221)
          32	UNARY_NEGATIVE(arg=None, lineno=221)
          34	STORE_FAST(arg=4, lineno=221)
          36	LOAD_FAST(arg=4, lineno=222)
          38	LOAD_CONST(arg=2, lineno=222)
          40	COMPARE_OP(arg=0, lineno=222)
          42	POP_JUMP_IF_FALSE(arg=48, lineno=222)
          44	LOAD_GLOBAL(arg=0, lineno=223)
          46	RAISE_VARARGS(arg=1, lineno=223)
>         48	LOAD_DEREF(arg=0, lineno=224)
          50	POP_JUMP_IF_FALSE(arg=106, lineno=224)
          52	LOAD_FAST(arg=0, lineno=225)
          54	LOAD_CONST(arg=2, lineno=225)
          56	COMPARE_OP(arg=2, lineno=225)
          58	POP_JUMP_IF_FALSE(arg=76, lineno=225)
          60	LOAD_DEREF(arg=2, lineno=226)
          62	POP_JUMP_IF_FALSE(arg=68, lineno=226)
          64	LOAD_DEREF(arg=2, lineno=227)
          66	RETURN_VALUE(arg=None, lineno=227)
>         68	LOAD_GLOBAL(arg=1, lineno=229)
          70	LOAD_CONST(arg=4, lineno=229)
          72	CALL_FUNCTION(arg=1, lineno=229)
          74	RAISE_VARARGS(arg=1, lineno=229)
>         76	LOAD_FAST(arg=0, lineno=230)
          78	LOAD_CONST(arg=1, lineno=230)
          80	COMPARE_OP(arg=3, lineno=230)
          82	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          84	LOAD_FAST(arg=0, lineno=230)
          86	LOAD_CONST(arg=5, lineno=230)
          88	COMPARE_OP(arg=3, lineno=230)
          90	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          92	LOAD_CONST(arg=2, lineno=231)
          94	RETURN_VALUE(arg=None, lineno=231)
          96	JUMP_FORWARD(arg=8, lineno=231)
>         98	LOAD_CONST(arg=6, lineno=233)
         100	STORE_FAST(arg=3, lineno=233)
         102	LOAD_FAST(arg=1, lineno=234)
         104	STORE_FAST(arg=4, lineno=234)
>        106	LOAD_FAST(arg=4, lineno=235)
         108	LOAD_CONST(arg=7, lineno=235)
         110	COMPARE_OP(arg=4, lineno=235)
         112	POP_JUMP_IF_FALSE(arg=130, lineno=235)
         114	LOAD_GLOBAL(arg=2, lineno=237)
         116	LOAD_METHOD(arg=3, lineno=237)
         118	LOAD_FAST(arg=0, lineno=237)
         120	LOAD_GLOBAL(arg=4, lineno=237)
         122	LOAD_FAST(arg=1, lineno=237)
         124	CALL_FUNCTION(arg=1, lineno=237)
         126	CALL_METHOD(arg=2, lineno=237)
         128	RETURN_VALUE(arg=None, lineno=237)
>        130	LOAD_FAST(arg=4, lineno=238)
         132	LOAD_CONST(arg=2, lineno=238)
         134	COMPARE_OP(arg=3, lineno=238)
         136	POP_JUMP_IF_FALSE(arg=172, lineno=238)
         138	LOAD_FAST(arg=4, lineno=239)
         140	LOAD_CONST(arg=1, lineno=239)
         142	BINARY_AND(arg=None, lineno=239)
         144	POP_JUMP_IF_FALSE(arg=154, lineno=239)
         146	LOAD_FAST(arg=2, lineno=240)
         148	LOAD_FAST(arg=0, lineno=240)
         150	INPLACE_MULTIPLY(arg=None, lineno=240)
         152	STORE_FAST(arg=2, lineno=240)
>        154	LOAD_FAST(arg=4, lineno=241)
         156	LOAD_CONST(arg=1, lineno=241)
         158	INPLACE_RSHIFT(arg=None, lineno=241)
         160	STORE_FAST(arg=4, lineno=241)
         162	LOAD_FAST(arg=0, lineno=242)
         164	LOAD_FAST(arg=0, lineno=242)
         166	INPLACE_MULTIPLY(arg=None, lineno=242)
         168	STORE_FAST(arg=0, lineno=242)
         170	JUMP_ABSOLUTE(arg=130, lineno=242)
>        172	LOAD_FAST(arg=3, lineno=244)
         174	POP_JUMP_IF_FALSE(arg=184, lineno=244)
         176	LOAD_CONST(arg=8, lineno=244)
         178	LOAD_FAST(arg=2, lineno=244)
         180	BINARY_TRUE_DIVIDE(arg=None, lineno=244)
         182	RETURN_VALUE(arg=None, lineno=244)
>        184	LOAD_FAST(arg=2, lineno=244)
         186	RETURN_VALUE(arg=None, lineno=244)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=217)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=217)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=217)
DEBUG:numba.core.byteflow:stack ['$2load_deref.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=217)
DEBUG:numba.core.byteflow:stack ['$2load_deref.0', '$const4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=STORE_FAST(arg=2, lineno=217)
DEBUG:numba.core.byteflow:stack ['$6call_function.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=218)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=218)
DEBUG:numba.core.byteflow:stack ['$10load_deref.3']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=218)
DEBUG:numba.core.byteflow:stack ['$10load_deref.3', '$a12.4']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=0, lineno=218)
DEBUG:numba.core.byteflow:stack ['$14call_function.5']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=219)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=219)
DEBUG:numba.core.byteflow:stack ['$b18.6']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=219)
DEBUG:numba.core.byteflow:stack ['$b18.6', '$const20.7']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=98, lineno=219)
DEBUG:numba.core.byteflow:stack ['$22compare_op.8']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=220)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=28, inst=STORE_FAST(arg=3, lineno=220)
DEBUG:numba.core.byteflow:stack ['$const26.0']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=221)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=221)
DEBUG:numba.core.byteflow:stack ['$b30.1']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=STORE_FAST(arg=4, lineno=221)
DEBUG:numba.core.byteflow:stack ['$32unary_negative.2']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=222)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=222)
DEBUG:numba.core.byteflow:stack ['$exp36.3']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=222)
DEBUG:numba.core.byteflow:stack ['$exp36.3', '$const38.4']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=48, lineno=222)
DEBUG:numba.core.byteflow:stack ['$40compare_op.5']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=233)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=100, inst=STORE_FAST(arg=3, lineno=233)
DEBUG:numba.core.byteflow:stack ['$const98.0']
DEBUG:numba.core.byteflow:dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=234)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=104, inst=STORE_FAST(arg=4, lineno=234)
DEBUG:numba.core.byteflow:stack ['$b102.1']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=223)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=223)
DEBUG:numba.core.byteflow:stack ['$44load_global.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=224)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=106, lineno=224)
DEBUG:numba.core.byteflow:stack ['$48load_deref.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=235)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=235)
DEBUG:numba.core.byteflow:stack ['$exp106.0']
DEBUG:numba.core.byteflow:dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=235)
DEBUG:numba.core.byteflow:stack ['$exp106.0', '$const108.1']
DEBUG:numba.core.byteflow:dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=130, lineno=235)
DEBUG:numba.core.byteflow:stack ['$110compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=225)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=225)
DEBUG:numba.core.byteflow:stack ['$a52.0']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=225)
DEBUG:numba.core.byteflow:stack ['$a52.0', '$const54.1']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=76, lineno=225)
DEBUG:numba.core.byteflow:stack ['$56compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=237)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=237)
DEBUG:numba.core.byteflow:stack ['$114load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=237)
DEBUG:numba.core.byteflow:stack ['$116load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=237)
DEBUG:numba.core.byteflow:stack ['$116load_method.1', '$a118.2']
DEBUG:numba.core.byteflow:dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=237)
DEBUG:numba.core.byteflow:stack ['$116load_method.1', '$a118.2', '$120load_global.3']
DEBUG:numba.core.byteflow:dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=237)
DEBUG:numba.core.byteflow:stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
DEBUG:numba.core.byteflow:dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=237)
DEBUG:numba.core.byteflow:stack ['$116load_method.1', '$a118.2', '$124call_function.5']
DEBUG:numba.core.byteflow:dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=237)
DEBUG:numba.core.byteflow:stack ['$126call_method.6']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=238)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=132, inst=LOAD_CONST(arg=2, lineno=238)
DEBUG:numba.core.byteflow:stack ['$exp130.0']
DEBUG:numba.core.byteflow:dispatch pc=134, inst=COMPARE_OP(arg=3, lineno=238)
DEBUG:numba.core.byteflow:stack ['$exp130.0', '$const132.1']
DEBUG:numba.core.byteflow:dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=172, lineno=238)
DEBUG:numba.core.byteflow:stack ['$134compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=172, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=226)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=68, lineno=226)
DEBUG:numba.core.byteflow:stack ['$60load_deref.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=230)
DEBUG:numba.core.byteflow:stack ['$a76.0']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG:numba.core.byteflow:stack ['$a76.0', '$const78.1']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG:numba.core.byteflow:stack ['$80compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=138, inst=LOAD_FAST(arg=4, lineno=239)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=140, inst=LOAD_CONST(arg=1, lineno=239)
DEBUG:numba.core.byteflow:stack ['$exp138.0']
DEBUG:numba.core.byteflow:dispatch pc=142, inst=BINARY_AND(arg=None, lineno=239)
DEBUG:numba.core.byteflow:stack ['$exp138.0', '$const140.1']
DEBUG:numba.core.byteflow:dispatch pc=144, inst=POP_JUMP_IF_FALSE(arg=154, lineno=239)
DEBUG:numba.core.byteflow:stack ['$142binary_and.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=172, inst=LOAD_FAST(arg=3, lineno=244)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=174, inst=POP_JUMP_IF_FALSE(arg=184, lineno=244)
DEBUG:numba.core.byteflow:stack ['$invert172.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0), Edge(pc=184, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=227)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=227)
DEBUG:numba.core.byteflow:stack ['$64load_deref.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=229)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=229)
DEBUG:numba.core.byteflow:stack ['$68load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=229)
DEBUG:numba.core.byteflow:stack ['$68load_global.0', '$const70.1']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=229)
DEBUG:numba.core.byteflow:stack ['$72call_function.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=230)
DEBUG:numba.core.byteflow:stack ['$a84.0']
DEBUG:numba.core.byteflow:dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG:numba.core.byteflow:stack ['$a84.0', '$const86.1']
DEBUG:numba.core.byteflow:dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG:numba.core.byteflow:stack ['$88compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=240)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=148, inst=LOAD_FAST(arg=0, lineno=240)
DEBUG:numba.core.byteflow:stack ['$r146.0']
DEBUG:numba.core.byteflow:dispatch pc=150, inst=INPLACE_MULTIPLY(arg=None, lineno=240)
DEBUG:numba.core.byteflow:stack ['$r146.0', '$a148.1']
DEBUG:numba.core.byteflow:dispatch pc=152, inst=STORE_FAST(arg=2, lineno=240)
DEBUG:numba.core.byteflow:stack ['$150inplace_multiply.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=154, inst=LOAD_FAST(arg=4, lineno=241)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=156, inst=LOAD_CONST(arg=1, lineno=241)
DEBUG:numba.core.byteflow:stack ['$exp154.0']
DEBUG:numba.core.byteflow:dispatch pc=158, inst=INPLACE_RSHIFT(arg=None, lineno=241)
DEBUG:numba.core.byteflow:stack ['$exp154.0', '$const156.1']
DEBUG:numba.core.byteflow:dispatch pc=160, inst=STORE_FAST(arg=4, lineno=241)
DEBUG:numba.core.byteflow:stack ['$158inplace_rshift.2']
DEBUG:numba.core.byteflow:dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG:numba.core.byteflow:stack ['$a162.3']
DEBUG:numba.core.byteflow:dispatch pc=166, inst=INPLACE_MULTIPLY(arg=None, lineno=242)
DEBUG:numba.core.byteflow:stack ['$a162.3', '$a164.4']
DEBUG:numba.core.byteflow:dispatch pc=168, inst=STORE_FAST(arg=0, lineno=242)
DEBUG:numba.core.byteflow:stack ['$166inplace_multiply.5']
DEBUG:numba.core.byteflow:dispatch pc=170, inst=JUMP_ABSOLUTE(arg=130, lineno=242)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=176, inst=LOAD_CONST(arg=8, lineno=244)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=178, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG:numba.core.byteflow:stack ['$const176.0']
DEBUG:numba.core.byteflow:dispatch pc=180, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=244)
DEBUG:numba.core.byteflow:stack ['$const176.0', '$r178.1']
DEBUG:numba.core.byteflow:dispatch pc=182, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG:numba.core.byteflow:stack ['$180binary_true_divide.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=186, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG:numba.core.byteflow:stack ['$r184.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=231)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=231)
DEBUG:numba.core.byteflow:stack ['$const92.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=130 nstack_initial=0)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=172 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=184 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 106: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 106: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 106: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$exp130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$exp130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 172: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$exp138.0'}), (140, {'res': '$const140.1'}), (142, {'lhs': '$exp138.0', 'rhs': '$const140.1', 'res': '$142binary_and.2'}), (144, {'pred': '$142binary_and.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: (), 154: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$r146.0'}), (148, {'res': '$a148.1'}), (150, {'lhs': '$r146.0', 'rhs': '$a148.1', 'res': '$150inplace_multiply.2'}), (152, {'value': '$150inplace_multiply.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$exp154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$exp154.0', 'rhs': '$const156.1', 'res': '$158inplace_rshift.2'}), (160, {'value': '$158inplace_rshift.2'}), (162, {'res': '$a162.3'}), (164, {'res': '$a164.4'}), (166, {'lhs': '$a162.3', 'rhs': '$a164.4', 'res': '$166inplace_multiply.5'}), (168, {'value': '$166inplace_multiply.5'}), (170, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=172 nstack_initial=0):
AdaptBlockInfo(insts=((172, {'res': '$invert172.0'}), (174, {'pred': '$invert172.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: (), 184: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$const176.0'}), (178, {'res': '$r178.1'}), (180, {'lhs': '$const176.0', 'rhs': '$r178.1', 'res': '$180binary_true_divide.2'}), (182, {'retval': '$180binary_true_divide.2', 'castval': '$182return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=184 nstack_initial=0):
AdaptBlockInfo(insts=((184, {'res': '$r184.0'}), (186, {'retval': '$r184.0', 'castval': '$186return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_deref.0 = freevar(tp: float64)    ['$2load_deref.0']
    $const4.1 = const(int, 1)                ['$const4.1']
    r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None) ['$2load_deref.0', '$const4.1', 'r']
    $10load_deref.3 = freevar(tp: float64)   ['$10load_deref.3']
    a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None) ['$10load_deref.3', 'a', 'a.1']
    $const20.7 = const(int, 0)               ['$const20.7']
    $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None) ['$22compare_op.8', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None) ['$40compare_op.5', '$42pred', 'bool42']
    branch $42pred, 44, 48                   ['$42pred']
label 44:
    $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
    raise $44load_global.0                   ['$44load_global.0']
label 48:
    $48load_deref.0 = freevar(is_integer: False) ['$48load_deref.0']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None) ['$48load_deref.0', '$50pred', 'bool50']
    branch $50pred, 52, 106                  ['$50pred']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None) ['$56compare_op.2', '$58pred', 'bool58']
    branch $58pred, 60, 76                   ['$58pred']
label 60:
    $60load_deref.0 = freevar(zerodiv_return: False) ['$60load_deref.0']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None) ['$60load_deref.0', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $64load_deref.0 = freevar(zerodiv_return: False) ['$64load_deref.0']
    $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
    $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:229)], kws=(), vararg=None, target=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
    branch $82pred, 84, 106                  ['$82pred']
label 84:
    $const86.1 = const(int, -1)              ['$const86.1']
    $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 106                  ['$90pred']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']
label 98:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const108.1 = const(int, 65536)          ['$const108.1']
    $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None) ['$110compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 130                ['$112pred']
label 114:
    $114load_global.0 = global(math: <module 'math' (built-in)>) ['$114load_global.0']
    $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
    $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
    $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None) ['$120load_global.3', '$124call_function.5', 'b']
    $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
    $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
    return $128return_value.7                ['$128return_value.7']
label 130:
    $const132.1 = const(int, 0)              ['$const132.1']
    $134compare_op.2 = exp != $const132.1    ['$134compare_op.2', '$const132.1', 'exp']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 172                ['$136pred']
label 138:
    $const140.1 = const(int, 1)              ['$const140.1']
    $142binary_and.2 = exp & $const140.1     ['$142binary_and.2', '$const140.1', 'exp']
    bool144 = global(bool: <class 'bool'>)   ['bool144']
    $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None) ['$142binary_and.2', '$144pred', 'bool144']
    branch $144pred, 146, 154                ['$144pred']
label 146:
    $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$150inplace_multiply.2', 'a.1', 'r']
    r = $150inplace_multiply.2               ['$150inplace_multiply.2', 'r']
    jump 154                                 []
label 154:
    $const156.1 = const(int, 1)              ['$const156.1']
    $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined) ['$158inplace_rshift.2', '$const156.1', 'exp']
    exp = $158inplace_rshift.2               ['$158inplace_rshift.2', 'exp']
    $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$166inplace_multiply.5', 'a.1', 'a.1']
    a.1 = $166inplace_multiply.5             ['$166inplace_multiply.5', 'a.1']
    jump 130                                 []
label 172:
    bool174 = global(bool: <class 'bool'>)   ['bool174']
    $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None) ['$174pred', 'bool174', 'invert']
    branch $174pred, 176, 184                ['$174pred']
label 176:
    $const176.0 = const(float, 1.0)          ['$const176.0']
    $180binary_true_divide.2 = $const176.0 / r ['$180binary_true_divide.2', '$const176.0', 'r']
    $182return_value.3 = cast(value=$180binary_true_divide.2) ['$180binary_true_divide.2', '$182return_value.3']
    return $182return_value.3                ['$182return_value.3']
label 184:
    $186return_value.1 = cast(value=r)       ['$186return_value.1', 'r']
    return $186return_value.1                ['$186return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6E0D41F0>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
DEBUG:numba.core.ssa:==== SSA block analysis pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6E0D41F0>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
DEBUG:numba.core.ssa:==== SSA block analysis pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6E0D41F0>
DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
DEBUG:numba.core.ssa:==== SSA block analysis pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6E0D41F0>
DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block analysis pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6E0D41F0>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
DEBUG:numba.core.ssa:on stmt: exp = b
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block analysis pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6E0D41F0>
DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp > $const108.1
DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
DEBUG:numba.core.ssa:==== SSA block analysis pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6E0D41F0>
DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG:numba.core.ssa:on stmt: return $128return_value.7
DEBUG:numba.core.ssa:==== SSA block analysis pass on 130
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6E0D41F0>
DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp != $const132.1
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
DEBUG:numba.core.ssa:==== SSA block analysis pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6E0D41F0>
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp & $const140.1
DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
DEBUG:numba.core.ssa:==== SSA block analysis pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6E0D41F0>
DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: r = $150inplace_multiply.2
DEBUG:numba.core.ssa:on stmt: jump 154
DEBUG:numba.core.ssa:==== SSA block analysis pass on 154
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6E0D41F0>
DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: exp = $158inplace_rshift.2
DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: a.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 130
DEBUG:numba.core.ssa:==== SSA block analysis pass on 172
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6E0D41F0>
DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
DEBUG:numba.core.ssa:==== SSA block analysis pass on 176
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6E0D41F0>
DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $182return_value.3
DEBUG:numba.core.ssa:==== SSA block analysis pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6E0D41F0>
DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r)
DEBUG:numba.core.ssa:on stmt: return $186return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [<numba.core.ir.Assign object at 0x0000029B6E0D9A00>],
             '$110compare_op.2': [<numba.core.ir.Assign object at 0x0000029B6E0F43D0>],
             '$112pred': [<numba.core.ir.Assign object at 0x0000029B6E0F4640>],
             '$114load_global.0': [<numba.core.ir.Assign object at 0x0000029B6E0F4880>],
             '$116load_method.1': [<numba.core.ir.Assign object at 0x0000029B6E0F4A00>],
             '$120load_global.3': [<numba.core.ir.Assign object at 0x0000029B6E0F4CA0>],
             '$124call_function.5': [<numba.core.ir.Assign object at 0x0000029B6E0F4FA0>],
             '$126call_method.6': [<numba.core.ir.Assign object at 0x0000029B6E0F6190>],
             '$128return_value.7': [<numba.core.ir.Assign object at 0x0000029B6E0F6280>],
             '$134compare_op.2': [<numba.core.ir.Assign object at 0x0000029B6E0F6730>],
             '$136pred': [<numba.core.ir.Assign object at 0x0000029B6E0F69A0>],
             '$142binary_and.2': [<numba.core.ir.Assign object at 0x0000029B6E0F6EB0>],
             '$144pred': [<numba.core.ir.Assign object at 0x0000029B6E0F9160>],
             '$150inplace_multiply.2': [<numba.core.ir.Assign object at 0x0000029B6E0F9610>],
             '$158inplace_rshift.2': [<numba.core.ir.Assign object at 0x0000029B6E0F9B50>],
             '$166inplace_multiply.5': [<numba.core.ir.Assign object at 0x0000029B6E0F9FD0>],
             '$174pred': [<numba.core.ir.Assign object at 0x0000029B6E0FB4C0>],
             '$180binary_true_divide.2': [<numba.core.ir.Assign object at 0x0000029B6E0FB9D0>],
             '$182return_value.3': [<numba.core.ir.Assign object at 0x0000029B6E0FBB20>],
             '$186return_value.1': [<numba.core.ir.Assign object at 0x0000029B6E0FBE80>],
             '$22compare_op.8': [<numba.core.ir.Assign object at 0x0000029B6E0EA250>],
             '$24pred': [<numba.core.ir.Assign object at 0x0000029B6E0EA4C0>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x0000029B6E0D9460>],
             '$40compare_op.5': [<numba.core.ir.Assign object at 0x0000029B6E0EAF10>],
             '$42pred': [<numba.core.ir.Assign object at 0x0000029B6E0CC700>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x0000029B6E0CC760>],
             '$48load_deref.0': [<numba.core.ir.Assign object at 0x0000029B6E0D4820>],
             '$50pred': [<numba.core.ir.Assign object at 0x0000029B6E0D4220>],
             '$const108.1': [<numba.core.ir.Assign object at 0x0000029B6E0F4220>],
             '$const132.1': [<numba.core.ir.Assign object at 0x0000029B6E0F6580>],
             '$const140.1': [<numba.core.ir.Assign object at 0x0000029B6E0F6D00>],
             '$const156.1': [<numba.core.ir.Assign object at 0x0000029B6E0F99A0>],
             '$const176.0': [<numba.core.ir.Assign object at 0x0000029B6E0FB700>],
             '$const20.7': [<numba.core.ir.Assign object at 0x0000029B6E0EA0A0>],
             '$const38.4': [<numba.core.ir.Assign object at 0x0000029B6E0EAD60>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000029B6E0D95E0>],
             'a': [<numba.core.ir.Assign object at 0x0000029B6E0C2C10>],
             'a.1': [<numba.core.ir.Assign object at 0x0000029B6E0D9D00>,
                     <numba.core.ir.Assign object at 0x0000029B6E0FB0D0>],
             'b': [<numba.core.ir.Assign object at 0x0000029B6E0D9400>],
             'bool112': [<numba.core.ir.Assign object at 0x0000029B6E0F4520>],
             'bool136': [<numba.core.ir.Assign object at 0x0000029B6E0F6880>],
             'bool144': [<numba.core.ir.Assign object at 0x0000029B6E0F9040>],
             'bool174': [<numba.core.ir.Assign object at 0x0000029B6E0FB3A0>],
             'bool24': [<numba.core.ir.Assign object at 0x0000029B6E0EA3A0>],
             'bool42': [<numba.core.ir.Assign object at 0x0000029B6E0EE0A0>],
             'bool50': [<numba.core.ir.Assign object at 0x0000029B6E0D48E0>],
             'exp': [<numba.core.ir.Assign object at 0x0000029B6E0EA9A0>,
                     <numba.core.ir.Assign object at 0x0000029B6E0F2F70>,
                     <numba.core.ir.Assign object at 0x0000029B6E0F9C10>],
             'invert': [<numba.core.ir.Assign object at 0x0000029B6E0EA5E0>,
                        <numba.core.ir.Assign object at 0x0000029B6E0F2CA0>],
             'r': [<numba.core.ir.Assign object at 0x0000029B6E0D97C0>,
                   <numba.core.ir.Assign object at 0x0000029B6E0F96D0>]})
DEBUG:numba.core.ssa:SSA violators {'r', 'exp', 'a.1', 'invert'}
DEBUG:numba.core.ssa:Fix SSA violator on var r
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:first assign: r
DEBUG:numba.core.ssa:replaced with: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
DEBUG:numba.core.ssa:on stmt: exp = b
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp > $const108.1
DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG:numba.core.ssa:on stmt: return $128return_value.7
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp != $const132.1
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp & $const140.1
DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: r = $150inplace_multiply.2
DEBUG:numba.core.ssa:replaced with: r.1 = $150inplace_multiply.2
DEBUG:numba.core.ssa:on stmt: jump 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: exp = $158inplace_rshift.2
DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: a.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $182return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r)
DEBUG:numba.core.ssa:on stmt: return $186return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000029B6E0FD4C0>],
             146: [<numba.core.ir.Assign object at 0x0000029B6E0FD550>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
DEBUG:numba.core.ssa:on stmt: exp = b
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp > $const108.1
DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG:numba.core.ssa:on stmt: return $128return_value.7
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp != $const132.1
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp & $const140.1
DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='r' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 146
DEBUG:numba.core.ssa:idom 138 from label 146
DEBUG:numba.core.ssa:find_def_from_bottom label 138
DEBUG:numba.core.ssa:find_def_from_top label 138
DEBUG:numba.core.ssa:idom 130 from label 138
DEBUG:numba.core.ssa:find_def_from_bottom label 130
DEBUG:numba.core.ssa:find_def_from_top label 130
DEBUG:numba.core.ssa:insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG:numba.core.ssa:find_def_from_bottom label 106
DEBUG:numba.core.ssa:find_def_from_top label 106
DEBUG:numba.core.ssa:idom 0 from label 106
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def_from_bottom label 154
DEBUG:numba.core.ssa:find_def_from_top label 154
DEBUG:numba.core.ssa:insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 154
DEBUG:numba.core.ssa:find_def_from_bottom label 138
DEBUG:numba.core.ssa:find_def_from_top label 138
DEBUG:numba.core.ssa:idom 130 from label 138
DEBUG:numba.core.ssa:find_def_from_bottom label 130
DEBUG:numba.core.ssa:incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:217)], incoming_blocks=[106])
DEBUG:numba.core.ssa:find_def_from_bottom label 146
DEBUG:numba.core.ssa:incoming_def r.1 = $150inplace_multiply.2
DEBUG:numba.core.ssa:incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG:numba.core.ssa:replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: r.1 = $150inplace_multiply.2
DEBUG:numba.core.ssa:on stmt: jump 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: exp = $158inplace_rshift.2
DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: a.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG:numba.core.ssa:find_def var='r' stmt=$180binary_true_divide.2 = $const176.0 / r
DEBUG:numba.core.ssa:find_def_from_top label 176
DEBUG:numba.core.ssa:idom 172 from label 176
DEBUG:numba.core.ssa:find_def_from_bottom label 172
DEBUG:numba.core.ssa:find_def_from_top label 172
DEBUG:numba.core.ssa:idom 130 from label 172
DEBUG:numba.core.ssa:find_def_from_bottom label 130
DEBUG:numba.core.ssa:replaced with: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $182return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r)
DEBUG:numba.core.ssa:find_def var='r' stmt=$186return_value.1 = cast(value=r)
DEBUG:numba.core.ssa:find_def_from_top label 184
DEBUG:numba.core.ssa:idom 172 from label 184
DEBUG:numba.core.ssa:find_def_from_bottom label 172
DEBUG:numba.core.ssa:find_def_from_top label 172
DEBUG:numba.core.ssa:idom 130 from label 172
DEBUG:numba.core.ssa:find_def_from_bottom label 130
DEBUG:numba.core.ssa:replaced with: $186return_value.1 = cast(value=r.2)
DEBUG:numba.core.ssa:on stmt: return $186return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var exp
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FDDC0>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FDDC0>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:first assign: exp
DEBUG:numba.core.ssa:replaced with: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FDDC0>
DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FDDC0>
DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FDDC0>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
DEBUG:numba.core.ssa:on stmt: exp = b
DEBUG:numba.core.ssa:replaced with: exp.1 = b
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FDDC0>
DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp > $const108.1
DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FDDC0>
DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG:numba.core.ssa:on stmt: return $128return_value.7
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FDDC0>
DEBUG:numba.core.ssa:on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp != $const132.1
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FDDC0>
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp & $const140.1
DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FDDC0>
DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: r.1 = $150inplace_multiply.2
DEBUG:numba.core.ssa:on stmt: jump 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FDDC0>
DEBUG:numba.core.ssa:on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: exp = $158inplace_rshift.2
DEBUG:numba.core.ssa:replaced with: exp.2 = $158inplace_rshift.2
DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: a.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FDDC0>
DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FDDC0>
DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $182return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FDDC0>
DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r.2)
DEBUG:numba.core.ssa:on stmt: return $186return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x0000029B6E0FD190>],
             98: [<numba.core.ir.Assign object at 0x0000029B6E0FDE50>],
             154: [<numba.core.ir.Assign object at 0x0000029B6E107220>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:find_def var='exp' stmt=$40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
DEBUG:numba.core.ssa:on stmt: exp.1 = b
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp > $const108.1
DEBUG:numba.core.ssa:find_def var='exp' stmt=$110compare_op.2 = exp > $const108.1
DEBUG:numba.core.ssa:find_def_from_top label 106
DEBUG:numba.core.ssa:insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG:numba.core.ssa:find_def_from_bottom label 48
DEBUG:numba.core.ssa:find_def_from_top label 48
DEBUG:numba.core.ssa:idom 26 from label 48
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:incoming_def exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:find_def_from_bottom label 98
DEBUG:numba.core.ssa:incoming_def exp.1 = b
DEBUG:numba.core.ssa:replaced with: $110compare_op.2 = exp.3 > $const108.1
DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG:numba.core.ssa:on stmt: return $128return_value.7
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp != $const132.1
DEBUG:numba.core.ssa:find_def var='exp' stmt=$134compare_op.2 = exp != $const132.1
DEBUG:numba.core.ssa:find_def_from_top label 130
DEBUG:numba.core.ssa:insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG:numba.core.ssa:find_def_from_bottom label 106
DEBUG:numba.core.ssa:incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG:numba.core.ssa:find_def_from_bottom label 154
DEBUG:numba.core.ssa:incoming_def exp.2 = $158inplace_rshift.2
DEBUG:numba.core.ssa:replaced with: $134compare_op.2 = exp.4 != $const132.1
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp & $const140.1
DEBUG:numba.core.ssa:find_def var='exp' stmt=$142binary_and.2 = exp & $const140.1
DEBUG:numba.core.ssa:find_def_from_top label 138
DEBUG:numba.core.ssa:idom 130 from label 138
DEBUG:numba.core.ssa:find_def_from_bottom label 130
DEBUG:numba.core.ssa:replaced with: $142binary_and.2 = exp.4 & $const140.1
DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: r.1 = $150inplace_multiply.2
DEBUG:numba.core.ssa:on stmt: jump 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='exp' stmt=$158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 154
DEBUG:numba.core.ssa:idom 138 from label 154
DEBUG:numba.core.ssa:find_def_from_bottom label 138
DEBUG:numba.core.ssa:find_def_from_top label 138
DEBUG:numba.core.ssa:idom 130 from label 138
DEBUG:numba.core.ssa:find_def_from_bottom label 130
DEBUG:numba.core.ssa:replaced with: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: exp.2 = $158inplace_rshift.2
DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: a.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $182return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r.2)
DEBUG:numba.core.ssa:on stmt: return $186return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var a.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FD850>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:first assign: a.1
DEBUG:numba.core.ssa:replaced with: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FD850>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FD850>
DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FD850>
DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FD850>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
DEBUG:numba.core.ssa:on stmt: exp.1 = b
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FD850>
DEBUG:numba.core.ssa:on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FD850>
DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG:numba.core.ssa:on stmt: return $128return_value.7
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FD850>
DEBUG:numba.core.ssa:on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FD850>
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FD850>
DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: r.1 = $150inplace_multiply.2
DEBUG:numba.core.ssa:on stmt: jump 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FD850>
DEBUG:numba.core.ssa:on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: exp.2 = $158inplace_rshift.2
DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: a.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:replaced with: a.1.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FD850>
DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FD850>
DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $182return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0FD850>
DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r.2)
DEBUG:numba.core.ssa:on stmt: return $186return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000029B6E0FD490>],
             154: [<numba.core.ir.Assign object at 0x0000029B6E107310>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
DEBUG:numba.core.ssa:on stmt: exp.1 = b
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def var='a.1' stmt=$126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def_from_top label 114
DEBUG:numba.core.ssa:idom 106 from label 114
DEBUG:numba.core.ssa:find_def_from_bottom label 106
DEBUG:numba.core.ssa:find_def_from_top label 106
DEBUG:numba.core.ssa:idom 0 from label 106
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG:numba.core.ssa:on stmt: return $128return_value.7
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='a.1' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 146
DEBUG:numba.core.ssa:idom 138 from label 146
DEBUG:numba.core.ssa:find_def_from_bottom label 138
DEBUG:numba.core.ssa:find_def_from_top label 138
DEBUG:numba.core.ssa:idom 130 from label 138
DEBUG:numba.core.ssa:find_def_from_bottom label 130
DEBUG:numba.core.ssa:find_def_from_top label 130
DEBUG:numba.core.ssa:insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG:numba.core.ssa:find_def_from_bottom label 106
DEBUG:numba.core.ssa:find_def_from_top label 106
DEBUG:numba.core.ssa:idom 0 from label 106
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def_from_bottom label 154
DEBUG:numba.core.ssa:incoming_def a.1.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: r.1 = $150inplace_multiply.2
DEBUG:numba.core.ssa:on stmt: jump 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: exp.2 = $158inplace_rshift.2
DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='a.1' stmt=$166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 154
DEBUG:numba.core.ssa:idom 138 from label 154
DEBUG:numba.core.ssa:find_def_from_bottom label 138
DEBUG:numba.core.ssa:find_def_from_top label 138
DEBUG:numba.core.ssa:idom 130 from label 138
DEBUG:numba.core.ssa:find_def_from_bottom label 130
DEBUG:numba.core.ssa:replaced with: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: a.1.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $182return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r.2)
DEBUG:numba.core.ssa:on stmt: return $186return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var invert
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
DEBUG:numba.core.ssa:first assign: invert
DEBUG:numba.core.ssa:replaced with: invert = const(bool, True)
DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
DEBUG:numba.core.ssa:replaced with: invert.1 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: exp.1 = b
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG:numba.core.ssa:on stmt: return $128return_value.7
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: r.1 = $150inplace_multiply.2
DEBUG:numba.core.ssa:on stmt: jump 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: exp.2 = $158inplace_rshift.2
DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: a.1.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $182return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E0D41C0>
DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r.2)
DEBUG:numba.core.ssa:on stmt: return $186return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x0000029B6E0FD2B0>],
             98: [<numba.core.ir.Assign object at 0x0000029B6E0FD7C0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E107F70>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E107F70>
DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E107F70>
DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E107F70>
DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E107F70>
DEBUG:numba.core.ssa:on stmt: invert.1 = const(bool, False)
DEBUG:numba.core.ssa:on stmt: exp.1 = b
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E107F70>
DEBUG:numba.core.ssa:on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E107F70>
DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG:numba.core.ssa:on stmt: return $128return_value.7
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E107F70>
DEBUG:numba.core.ssa:on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E107F70>
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E107F70>
DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: r.1 = $150inplace_multiply.2
DEBUG:numba.core.ssa:on stmt: jump 154
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E107F70>
DEBUG:numba.core.ssa:on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: exp.2 = $158inplace_rshift.2
DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: a.1.1 = $166inplace_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 130
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E107F70>
DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def var='invert' stmt=$174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:find_def_from_top label 172
DEBUG:numba.core.ssa:idom 130 from label 172
DEBUG:numba.core.ssa:find_def_from_bottom label 130
DEBUG:numba.core.ssa:find_def_from_top label 130
DEBUG:numba.core.ssa:idom 106 from label 130
DEBUG:numba.core.ssa:find_def_from_bottom label 106
DEBUG:numba.core.ssa:find_def_from_top label 106
DEBUG:numba.core.ssa:insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG:numba.core.ssa:find_def_from_bottom label 48
DEBUG:numba.core.ssa:find_def_from_top label 48
DEBUG:numba.core.ssa:idom 26 from label 48
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:incoming_def invert = const(bool, True)
DEBUG:numba.core.ssa:find_def_from_bottom label 98
DEBUG:numba.core.ssa:incoming_def invert.1 = const(bool, False)
DEBUG:numba.core.ssa:replaced with: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E107F70>
DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG:numba.core.ssa:on stmt: return $182return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E107F70>
DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r.2)
DEBUG:numba.core.ssa:on stmt: return $186return_value.1
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=171)
           2	LOAD_DEREF(arg=0, lineno=171)
           4	STORE_FAST(arg=1, lineno=171)
           6	LOAD_GLOBAL(arg=0, lineno=172)
           8	LOAD_METHOD(arg=1, lineno=172)
          10	LOAD_FAST(arg=0, lineno=172)
          12	CALL_METHOD(arg=1, lineno=172)
          14	GET_ITER(arg=None, lineno=172)
>         16	FOR_ITER(arg=16, lineno=172)
          18	STORE_FAST(arg=2, lineno=172)
          20	LOAD_FAST(arg=1, lineno=173)
          22	LOAD_FAST(arg=2, lineno=173)
          24	LOAD_METHOD(arg=2, lineno=173)
          26	CALL_METHOD(arg=0, lineno=173)
          28	INPLACE_ADD(arg=None, lineno=173)
          30	STORE_FAST(arg=1, lineno=173)
          32	JUMP_ABSOLUTE(arg=16, lineno=173)
>         34	LOAD_FAST(arg=1, lineno=174)
          36	RETURN_VALUE(arg=None, lineno=174)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=171)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=171)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=STORE_FAST(arg=1, lineno=171)
DEBUG:numba.core.byteflow:stack ['$2load_deref.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=172)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_METHOD(arg=1, lineno=172)
DEBUG:numba.core.byteflow:stack ['$6load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=172)
DEBUG:numba.core.byteflow:stack ['$8load_method.2']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=172)
DEBUG:numba.core.byteflow:stack ['$8load_method.2', '$arr10.3']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=GET_ITER(arg=None, lineno=172)
DEBUG:numba.core.byteflow:stack ['$12call_method.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=16, stack=('$14get_iter.5',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=16 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi16.0']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=FOR_ITER(arg=16, lineno=172)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=('$phi16.0', '$16for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=18 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=174)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=174)
DEBUG:numba.core.byteflow:stack ['$c34.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=18 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi18.0', '$phi18.1']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=STORE_FAST(arg=2, lineno=172)
DEBUG:numba.core.byteflow:stack ['$phi18.0', '$phi18.1']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=173)
DEBUG:numba.core.byteflow:stack ['$phi18.0']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=173)
DEBUG:numba.core.byteflow:stack ['$phi18.0', '$c20.2']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=173)
DEBUG:numba.core.byteflow:stack ['$phi18.0', '$c20.2', '$v22.3']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=CALL_METHOD(arg=0, lineno=173)
DEBUG:numba.core.byteflow:stack ['$phi18.0', '$c20.2', '$24load_method.4']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=INPLACE_ADD(arg=None, lineno=173)
DEBUG:numba.core.byteflow:stack ['$phi18.0', '$c20.2', '$26call_method.5']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=STORE_FAST(arg=1, lineno=173)
DEBUG:numba.core.byteflow:stack ['$phi18.0', '$28inplace_add.6']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=JUMP_ABSOLUTE(arg=16, lineno=173)
DEBUG:numba.core.byteflow:stack ['$phi18.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=16, stack=('$phi18.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=16 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=1): {'$phi16.0'},
             State(pc_initial=18 nstack_initial=2): {'$phi18.1'},
             State(pc_initial=34 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi16.0': State(pc_initial=0 nstack_initial=0),
 '$phi18.1': State(pc_initial=16 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=2))},
             '$phi18.0': {('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi16.0': {('$14get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi18.1': {('$16for_iter.2', State(pc_initial=16 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi16.0': '$14get_iter.5'},
             State(pc_initial=16 nstack_initial=1): {'$phi18.1': '$16for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'value': '$2load_deref.0'}), (6, {'res': '$6load_global.1'}), (8, {'item': '$6load_global.1', 'res': '$8load_method.2'}), (10, {'res': '$arr10.3'}), (12, {'func': '$8load_method.2', 'args': ['$arr10.3'], 'res': '$12call_method.4'}), (14, {'value': '$12call_method.4', 'res': '$14get_iter.5'})), outgoing_phis={'$phi16.0': '$14get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$14get_iter.5',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=16 nstack_initial=1):
AdaptBlockInfo(insts=((16, {'iterator': '$phi16.0', 'pair': '$16for_iter.1', 'indval': '$16for_iter.2', 'pred': '$16for_iter.3'}),), outgoing_phis={'$phi18.1': '$16for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 18: ('$phi16.0', '$16for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=18 nstack_initial=2):
AdaptBlockInfo(insts=((18, {'value': '$phi18.1'}), (20, {'res': '$c20.2'}), (22, {'res': '$v22.3'}), (24, {'item': '$v22.3', 'res': '$24load_method.4'}), (26, {'func': '$24load_method.4', 'args': [], 'res': '$26call_method.5'}), (28, {'lhs': '$c20.2', 'rhs': '$26call_method.5', 'res': '$28inplace_add.6'}), (30, {'value': '$28inplace_add.6'}), (32, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$phi18.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$c34.0'}), (36, {'retval': '$c34.0', 'castval': '$36return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    arr = arg(0, name=arr)                   ['arr']
    c = freevar(zero: 0.0)                   ['c']
    $6load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$6load_global.1']
    $8load_method.2 = getattr(value=$6load_global.1, attr=nditer) ['$6load_global.1', '$8load_method.2']
    $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:171)], kws=(), vararg=None, target=None) ['$12call_method.4', '$8load_method.2', 'arr']
    $14get_iter.5 = getiter(value=$12call_method.4) ['$12call_method.4', '$14get_iter.5']
    $phi16.0 = $14get_iter.5                 ['$14get_iter.5', '$phi16.0']
    jump 16                                  []
label 16:
    $16for_iter.1 = iternext(value=$phi16.0) ['$16for_iter.1', '$phi16.0']
    $16for_iter.2 = pair_first(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.2']
    $16for_iter.3 = pair_second(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.3']
    $phi18.1 = $16for_iter.2                 ['$16for_iter.2', '$phi18.1']
    branch $16for_iter.3, 18, 34             ['$16for_iter.3']
label 18:
    v = $phi18.1                             ['$phi18.1', 'v']
    $24load_method.4 = getattr(value=v, attr=item) ['$24load_method.4', 'v']
    $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None) ['$24load_method.4', '$26call_method.5']
    $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$26call_method.5', '$28inplace_add.6', 'c']
    c = $28inplace_add.6                     ['$28inplace_add.6', 'c']
    jump 16                                  []
label 34:
    $36return_value.1 = cast(value=c)        ['$36return_value.1', 'c']
    return $36return_value.1                 ['$36return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6E14F550>
DEBUG:numba.core.ssa:on stmt: arr = arg(0, name=arr)
DEBUG:numba.core.ssa:on stmt: c = freevar(zero: 0.0)
DEBUG:numba.core.ssa:on stmt: $6load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
DEBUG:numba.core.ssa:on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:171)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
DEBUG:numba.core.ssa:on stmt: $phi16.0 = $14get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 16
DEBUG:numba.core.ssa:==== SSA block analysis pass on 16
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6E14F550>
DEBUG:numba.core.ssa:on stmt: $16for_iter.1 = iternext(value=$phi16.0)
DEBUG:numba.core.ssa:on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
DEBUG:numba.core.ssa:on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi18.1 = $16for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $16for_iter.3, 18, 34
DEBUG:numba.core.ssa:==== SSA block analysis pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6E14F550>
DEBUG:numba.core.ssa:on stmt: v = $phi18.1
DEBUG:numba.core.ssa:on stmt: $24load_method.4 = getattr(value=v, attr=item)
DEBUG:numba.core.ssa:on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: c = $28inplace_add.6
DEBUG:numba.core.ssa:on stmt: jump 16
DEBUG:numba.core.ssa:==== SSA block analysis pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6E14F550>
DEBUG:numba.core.ssa:on stmt: $36return_value.1 = cast(value=c)
DEBUG:numba.core.ssa:on stmt: return $36return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$12call_method.4': [<numba.core.ir.Assign object at 0x0000029B6E14A2B0>],
             '$14get_iter.5': [<numba.core.ir.Assign object at 0x0000029B6E14A3A0>],
             '$16for_iter.1': [<numba.core.ir.Assign object at 0x0000029B6E14A670>],
             '$16for_iter.2': [<numba.core.ir.Assign object at 0x0000029B6E14A790>],
             '$16for_iter.3': [<numba.core.ir.Assign object at 0x0000029B6E14A8B0>],
             '$24load_method.4': [<numba.core.ir.Assign object at 0x0000029B6E14AF40>],
             '$26call_method.5': [<numba.core.ir.Assign object at 0x0000029B6E14C190>],
             '$28inplace_add.6': [<numba.core.ir.Assign object at 0x0000029B6E14C2B0>],
             '$36return_value.1': [<numba.core.ir.Assign object at 0x0000029B6E14C6A0>],
             '$6load_global.1': [<numba.core.ir.Assign object at 0x0000029B6E145DC0>],
             '$8load_method.2': [<numba.core.ir.Assign object at 0x0000029B6E145F40>],
             '$phi16.0': [<numba.core.ir.Assign object at 0x0000029B6E145CD0>],
             '$phi18.1': [<numba.core.ir.Assign object at 0x0000029B6E14A5B0>],
             'arr': [<numba.core.ir.Assign object at 0x0000029B6E1450A0>],
             'c': [<numba.core.ir.Assign object at 0x0000029B6E145B20>,
                   <numba.core.ir.Assign object at 0x0000029B6E14C370>],
             'v': [<numba.core.ir.Assign object at 0x0000029B6E14AB80>]})
DEBUG:numba.core.ssa:SSA violators {'c'}
DEBUG:numba.core.ssa:Fix SSA violator on var c
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E14FD90>
DEBUG:numba.core.ssa:on stmt: arr = arg(0, name=arr)
DEBUG:numba.core.ssa:on stmt: c = freevar(zero: 0.0)
DEBUG:numba.core.ssa:first assign: c
DEBUG:numba.core.ssa:replaced with: c = freevar(zero: 0.0)
DEBUG:numba.core.ssa:on stmt: $6load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
DEBUG:numba.core.ssa:on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:171)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
DEBUG:numba.core.ssa:on stmt: $phi16.0 = $14get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 16
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 16
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E14FD90>
DEBUG:numba.core.ssa:on stmt: $16for_iter.1 = iternext(value=$phi16.0)
DEBUG:numba.core.ssa:on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
DEBUG:numba.core.ssa:on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi18.1 = $16for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $16for_iter.3, 18, 34
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E14FD90>
DEBUG:numba.core.ssa:on stmt: v = $phi18.1
DEBUG:numba.core.ssa:on stmt: $24load_method.4 = getattr(value=v, attr=item)
DEBUG:numba.core.ssa:on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: c = $28inplace_add.6
DEBUG:numba.core.ssa:replaced with: c.1 = $28inplace_add.6
DEBUG:numba.core.ssa:on stmt: jump 16
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x0000029B6E14FD90>
DEBUG:numba.core.ssa:on stmt: $36return_value.1 = cast(value=c)
DEBUG:numba.core.ssa:on stmt: return $36return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000029B6E14F7C0>],
             18: [<numba.core.ir.Assign object at 0x0000029B6E14FAC0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E14FD90>
DEBUG:numba.core.ssa:on stmt: arr = arg(0, name=arr)
DEBUG:numba.core.ssa:on stmt: c = freevar(zero: 0.0)
DEBUG:numba.core.ssa:on stmt: $6load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\Kittipat\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
DEBUG:numba.core.ssa:on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:171)], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
DEBUG:numba.core.ssa:on stmt: $phi16.0 = $14get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 16
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 16
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E14FD90>
DEBUG:numba.core.ssa:on stmt: $16for_iter.1 = iternext(value=$phi16.0)
DEBUG:numba.core.ssa:on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
DEBUG:numba.core.ssa:on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi18.1 = $16for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $16for_iter.3, 18, 34
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E14FD90>
DEBUG:numba.core.ssa:on stmt: v = $phi18.1
DEBUG:numba.core.ssa:on stmt: $24load_method.4 = getattr(value=v, attr=item)
DEBUG:numba.core.ssa:on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='c' stmt=$28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 18
DEBUG:numba.core.ssa:idom 16 from label 18
DEBUG:numba.core.ssa:find_def_from_bottom label 16
DEBUG:numba.core.ssa:find_def_from_top label 16
DEBUG:numba.core.ssa:insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 16
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def c = freevar(zero: 0.0)
DEBUG:numba.core.ssa:find_def_from_bottom label 18
DEBUG:numba.core.ssa:incoming_def c.1 = $28inplace_add.6
DEBUG:numba.core.ssa:replaced with: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: c.1 = $28inplace_add.6
DEBUG:numba.core.ssa:on stmt: jump 16
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x0000029B6E14FD90>
DEBUG:numba.core.ssa:on stmt: $36return_value.1 = cast(value=c)
DEBUG:numba.core.ssa:find_def var='c' stmt=$36return_value.1 = cast(value=c)
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 16 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 16
DEBUG:numba.core.ssa:replaced with: $36return_value.1 = cast(value=c.2)
DEBUG:numba.core.ssa:on stmt: return $36return_value.1
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=89)
           2	LOAD_FAST(arg=0, lineno=89)
           4	LOAD_FAST(arg=1, lineno=86)
           6	BINARY_SUBTRACT(arg=None, lineno=1)
           8	LOAD_FAST(arg=2, lineno=87)
          10	BINARY_TRUE_DIVIDE(arg=None, lineno=1)
          12	RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=89)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=89)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=86)
DEBUG:numba.core.byteflow:stack ['$_604binary_subscr_8_12.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$_604binary_subscr_8_12.0', '$mu_24.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=87)
DEBUG:numba.core.byteflow:stack ['$6binary_subtract.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$6binary_subtract.2', '$sigma_18.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$10binary_true_divide.4']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_604binary_subscr_8_12.0'}), (4, {'res': '$mu_24.1'}), (6, {'lhs': '$_604binary_subscr_8_12.0', 'rhs': '$mu_24.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$sigma_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$sigma_18.3', 'res': '$10binary_true_divide.4'}), (12, {'retval': '$10binary_true_divide.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    _604binary_subscr_8_1 = arg(0, name=_604binary_subscr_8_1) ['_604binary_subscr_8_1']
    mu_2 = arg(1, name=mu_2)                 ['mu_2']
    sigma_1 = arg(2, name=sigma_1)           ['sigma_1']
    $6binary_subtract.2 = _604binary_subscr_8_1 - mu_2 ['$6binary_subtract.2', '_604binary_subscr_8_1', 'mu_2']
    $10binary_true_divide.4 = $6binary_subtract.2 / sigma_1 ['$10binary_true_divide.4', '$6binary_subtract.2', 'sigma_1']
    $12return_value.5 = cast(value=$10binary_true_divide.4) ['$10binary_true_divide.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000029B6E1BE8B0>
DEBUG:numba.core.ssa:on stmt: _604binary_subscr_8_1 = arg(0, name=_604binary_subscr_8_1)
DEBUG:numba.core.ssa:on stmt: mu_2 = arg(1, name=mu_2)
DEBUG:numba.core.ssa:on stmt: sigma_1 = arg(2, name=sigma_1)
DEBUG:numba.core.ssa:on stmt: $6binary_subtract.2 = _604binary_subscr_8_1 - mu_2
DEBUG:numba.core.ssa:on stmt: $10binary_true_divide.4 = $6binary_subtract.2 / sigma_1
DEBUG:numba.core.ssa:on stmt: $12return_value.5 = cast(value=$10binary_true_divide.4)
DEBUG:numba.core.ssa:on stmt: return $12return_value.5
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10binary_true_divide.4': [<numba.core.ir.Assign object at 0x0000029B6E1C6040>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x0000029B6E1C6190>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x0000029B6E1C1D60>],
             '_604binary_subscr_8_1': [<numba.core.ir.Assign object at 0x0000029B6E1C11F0>],
             'mu_2': [<numba.core.ir.Assign object at 0x0000029B6E1C10D0>],
             'sigma_1': [<numba.core.ir.Assign object at 0x0000029B6E1C1970>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:root:X_STFT = [[0.12046967 0.04431651 0.03809379 ... 0.06859809 0.2179368  0.08463343]
 [0.29416567 0.19269036 0.22764945 ... 0.26935413 0.32559004 0.29294667]
 [0.38674825 0.48071343 0.49792814 ... 0.31280252 0.38741565 0.5403167 ]
 ...
 [0.35929373 0.47173554 0.45377433 ... 0.37678733 0.32296899 0.3038578 ]
 [0.24244547 0.21383619 0.19282104 ... 0.20077471 0.2117774  0.1538974 ]
 [0.14276022 0.04773285 0.02793552 ... 0.05974891 0.18415928 0.07823335]]
DEBUG:root:X_total = [array([[0.12046967, 0.04431651, 0.03809379, ..., 0.06859809, 0.2179368 ,
        0.08463343],
       [0.29416567, 0.19269036, 0.22764945, ..., 0.26935413, 0.32559004,
        0.29294667],
       [0.38674825, 0.48071343, 0.49792814, ..., 0.31280252, 0.38741565,
        0.5403167 ],
       ...,
       [0.35929373, 0.47173554, 0.45377433, ..., 0.37678733, 0.32296899,
        0.3038578 ],
       [0.24244547, 0.21383619, 0.19282104, ..., 0.20077471, 0.2117774 ,
        0.1538974 ],
       [0.14276022, 0.04773285, 0.02793552, ..., 0.05974891, 0.18415928,
        0.07823335]])]
DEBUG:root:X_STFT = [[0.30700162 0.20971294 0.19671096 ... 0.34917676 0.26083291 0.24717306]
 [0.2176078  0.15513797 0.12070478 ... 0.31355369 0.19966932 0.102281  ]
 [0.17609321 0.16381229 0.13527267 ... 0.21222048 0.2254571  0.05762936]
 ...
 [0.31284565 0.20816348 0.190971   ... 0.21490431 0.34760731 0.15851946]
 [0.25708154 0.1755785  0.13902079 ... 0.25778621 0.3457844  0.28346747]
 [0.36304265 0.39449114 0.36499122 ... 0.53493524 0.43072712 0.54388052]]
DEBUG:root:X_total = [array([[0.12046967, 0.04431651, 0.03809379, ..., 0.06859809, 0.2179368 ,
        0.08463343],
       [0.29416567, 0.19269036, 0.22764945, ..., 0.26935413, 0.32559004,
        0.29294667],
       [0.38674825, 0.48071343, 0.49792814, ..., 0.31280252, 0.38741565,
        0.5403167 ],
       ...,
       [0.35929373, 0.47173554, 0.45377433, ..., 0.37678733, 0.32296899,
        0.3038578 ],
       [0.24244547, 0.21383619, 0.19282104, ..., 0.20077471, 0.2117774 ,
        0.1538974 ],
       [0.14276022, 0.04773285, 0.02793552, ..., 0.05974891, 0.18415928,
        0.07823335]]), array([[0.30700162, 0.20971294, 0.19671096, ..., 0.34917676, 0.26083291,
        0.24717306],
       [0.2176078 , 0.15513797, 0.12070478, ..., 0.31355369, 0.19966932,
        0.102281  ],
       [0.17609321, 0.16381229, 0.13527267, ..., 0.21222048, 0.2254571 ,
        0.05762936],
       ...,
       [0.31284565, 0.20816348, 0.190971  , ..., 0.21490431, 0.34760731,
        0.15851946],
       [0.25708154, 0.1755785 , 0.13902079, ..., 0.25778621, 0.3457844 ,
        0.28346747],
       [0.36304265, 0.39449114, 0.36499122, ..., 0.53493524, 0.43072712,
        0.54388052]])]
DEBUG:root:X_STFT = [[0.2941376  0.18554071 0.1811903  ... 0.12215196 0.21301918 0.18694243]
 [0.23949154 0.17699422 0.15827926 ... 0.28956005 0.18375579 0.17275806]
 [0.30980098 0.43629399 0.44189245 ... 0.53481549 0.19544385 0.2468787 ]
 ...
 [0.29687998 0.20501889 0.19411647 ... 0.40602759 0.34162843 0.17094459]
 [0.26911965 0.1811589  0.17898947 ... 0.21000656 0.24261265 0.2181872 ]
 [0.33785179 0.35487154 0.40857723 ... 0.22816242 0.21549548 0.26491725]]
DEBUG:root:X_total = [array([[0.12046967, 0.04431651, 0.03809379, ..., 0.06859809, 0.2179368 ,
        0.08463343],
       [0.29416567, 0.19269036, 0.22764945, ..., 0.26935413, 0.32559004,
        0.29294667],
       [0.38674825, 0.48071343, 0.49792814, ..., 0.31280252, 0.38741565,
        0.5403167 ],
       ...,
       [0.35929373, 0.47173554, 0.45377433, ..., 0.37678733, 0.32296899,
        0.3038578 ],
       [0.24244547, 0.21383619, 0.19282104, ..., 0.20077471, 0.2117774 ,
        0.1538974 ],
       [0.14276022, 0.04773285, 0.02793552, ..., 0.05974891, 0.18415928,
        0.07823335]]), array([[0.30700162, 0.20971294, 0.19671096, ..., 0.34917676, 0.26083291,
        0.24717306],
       [0.2176078 , 0.15513797, 0.12070478, ..., 0.31355369, 0.19966932,
        0.102281  ],
       [0.17609321, 0.16381229, 0.13527267, ..., 0.21222048, 0.2254571 ,
        0.05762936],
       ...,
       [0.31284565, 0.20816348, 0.190971  , ..., 0.21490431, 0.34760731,
        0.15851946],
       [0.25708154, 0.1755785 , 0.13902079, ..., 0.25778621, 0.3457844 ,
        0.28346747],
       [0.36304265, 0.39449114, 0.36499122, ..., 0.53493524, 0.43072712,
        0.54388052]]), array([[0.2941376 , 0.18554071, 0.1811903 , ..., 0.12215196, 0.21301918,
        0.18694243],
       [0.23949154, 0.17699422, 0.15827926, ..., 0.28956005, 0.18375579,
        0.17275806],
       [0.30980098, 0.43629399, 0.44189245, ..., 0.53481549, 0.19544385,
        0.2468787 ],
       ...,
       [0.29687998, 0.20501889, 0.19411647, ..., 0.40602759, 0.34162843,
        0.17094459],
       [0.26911965, 0.1811589 , 0.17898947, ..., 0.21000656, 0.24261265,
        0.2181872 ],
       [0.33785179, 0.35487154, 0.40857723, ..., 0.22816242, 0.21549548,
        0.26491725]])]
DEBUG:root:X_STFT = [[0.1997458  0.123204   0.09229845 ... 0.2115546  0.29344365 0.16396581]
 [0.19459358 0.14117126 0.16644183 ... 0.13203947 0.26061657 0.2057633 ]
 [0.35738191 0.4871262  0.4736518  ... 0.15084687 0.28055963 0.40667796]
 ...
 [0.31658623 0.21840031 0.26449698 ... 0.32932347 0.32613593 0.24700099]
 [0.24183793 0.17800754 0.1997582  ... 0.2873466  0.27138287 0.22006929]
 [0.29882106 0.33306396 0.32558215 ... 0.3133198  0.36813623 0.36694369]]
DEBUG:root:X_total = [array([[0.12046967, 0.04431651, 0.03809379, ..., 0.06859809, 0.2179368 ,
        0.08463343],
       [0.29416567, 0.19269036, 0.22764945, ..., 0.26935413, 0.32559004,
        0.29294667],
       [0.38674825, 0.48071343, 0.49792814, ..., 0.31280252, 0.38741565,
        0.5403167 ],
       ...,
       [0.35929373, 0.47173554, 0.45377433, ..., 0.37678733, 0.32296899,
        0.3038578 ],
       [0.24244547, 0.21383619, 0.19282104, ..., 0.20077471, 0.2117774 ,
        0.1538974 ],
       [0.14276022, 0.04773285, 0.02793552, ..., 0.05974891, 0.18415928,
        0.07823335]]), array([[0.30700162, 0.20971294, 0.19671096, ..., 0.34917676, 0.26083291,
        0.24717306],
       [0.2176078 , 0.15513797, 0.12070478, ..., 0.31355369, 0.19966932,
        0.102281  ],
       [0.17609321, 0.16381229, 0.13527267, ..., 0.21222048, 0.2254571 ,
        0.05762936],
       ...,
       [0.31284565, 0.20816348, 0.190971  , ..., 0.21490431, 0.34760731,
        0.15851946],
       [0.25708154, 0.1755785 , 0.13902079, ..., 0.25778621, 0.3457844 ,
        0.28346747],
       [0.36304265, 0.39449114, 0.36499122, ..., 0.53493524, 0.43072712,
        0.54388052]]), array([[0.2941376 , 0.18554071, 0.1811903 , ..., 0.12215196, 0.21301918,
        0.18694243],
       [0.23949154, 0.17699422, 0.15827926, ..., 0.28956005, 0.18375579,
        0.17275806],
       [0.30980098, 0.43629399, 0.44189245, ..., 0.53481549, 0.19544385,
        0.2468787 ],
       ...,
       [0.29687998, 0.20501889, 0.19411647, ..., 0.40602759, 0.34162843,
        0.17094459],
       [0.26911965, 0.1811589 , 0.17898947, ..., 0.21000656, 0.24261265,
        0.2181872 ],
       [0.33785179, 0.35487154, 0.40857723, ..., 0.22816242, 0.21549548,
        0.26491725]]), array([[0.1997458 , 0.123204  , 0.09229845, ..., 0.2115546 , 0.29344365,
        0.16396581],
       [0.19459358, 0.14117126, 0.16644183, ..., 0.13203947, 0.26061657,
        0.2057633 ],
       [0.35738191, 0.4871262 , 0.4736518 , ..., 0.15084687, 0.28055963,
        0.40667796],
       ...,
       [0.31658623, 0.21840031, 0.26449698, ..., 0.32932347, 0.32613593,
        0.24700099],
       [0.24183793, 0.17800754, 0.1997582 , ..., 0.2873466 , 0.27138287,
        0.22006929],
       [0.29882106, 0.33306396, 0.32558215, ..., 0.3133198 , 0.36813623,
        0.36694369]])]
DEBUG:root:X_STFT = [[0.34814921 0.21100552 0.18853547 ... 0.22165287 0.1663439  0.17542538]
 [0.23274794 0.19613221 0.14275867 ... 0.28479916 0.23786856 0.24756178]
 [0.20130405 0.42775387 0.52779526 ... 0.34966224 0.32235968 0.36701345]
 ...
 [0.28605488 0.23425731 0.17521533 ... 0.37832981 0.39596862 0.36271971]
 [0.27875176 0.20132723 0.17378789 ... 0.1906765  0.16311519 0.191484  ]
 [0.36590138 0.34922835 0.40134546 ... 0.17240249 0.12699953 0.19026197]]
DEBUG:root:X_total = [array([[0.12046967, 0.04431651, 0.03809379, ..., 0.06859809, 0.2179368 ,
        0.08463343],
       [0.29416567, 0.19269036, 0.22764945, ..., 0.26935413, 0.32559004,
        0.29294667],
       [0.38674825, 0.48071343, 0.49792814, ..., 0.31280252, 0.38741565,
        0.5403167 ],
       ...,
       [0.35929373, 0.47173554, 0.45377433, ..., 0.37678733, 0.32296899,
        0.3038578 ],
       [0.24244547, 0.21383619, 0.19282104, ..., 0.20077471, 0.2117774 ,
        0.1538974 ],
       [0.14276022, 0.04773285, 0.02793552, ..., 0.05974891, 0.18415928,
        0.07823335]]), array([[0.30700162, 0.20971294, 0.19671096, ..., 0.34917676, 0.26083291,
        0.24717306],
       [0.2176078 , 0.15513797, 0.12070478, ..., 0.31355369, 0.19966932,
        0.102281  ],
       [0.17609321, 0.16381229, 0.13527267, ..., 0.21222048, 0.2254571 ,
        0.05762936],
       ...,
       [0.31284565, 0.20816348, 0.190971  , ..., 0.21490431, 0.34760731,
        0.15851946],
       [0.25708154, 0.1755785 , 0.13902079, ..., 0.25778621, 0.3457844 ,
        0.28346747],
       [0.36304265, 0.39449114, 0.36499122, ..., 0.53493524, 0.43072712,
        0.54388052]]), array([[0.2941376 , 0.18554071, 0.1811903 , ..., 0.12215196, 0.21301918,
        0.18694243],
       [0.23949154, 0.17699422, 0.15827926, ..., 0.28956005, 0.18375579,
        0.17275806],
       [0.30980098, 0.43629399, 0.44189245, ..., 0.53481549, 0.19544385,
        0.2468787 ],
       ...,
       [0.29687998, 0.20501889, 0.19411647, ..., 0.40602759, 0.34162843,
        0.17094459],
       [0.26911965, 0.1811589 , 0.17898947, ..., 0.21000656, 0.24261265,
        0.2181872 ],
       [0.33785179, 0.35487154, 0.40857723, ..., 0.22816242, 0.21549548,
        0.26491725]]), array([[0.1997458 , 0.123204  , 0.09229845, ..., 0.2115546 , 0.29344365,
        0.16396581],
       [0.19459358, 0.14117126, 0.16644183, ..., 0.13203947, 0.26061657,
        0.2057633 ],
       [0.35738191, 0.4871262 , 0.4736518 , ..., 0.15084687, 0.28055963,
        0.40667796],
       ...,
       [0.31658623, 0.21840031, 0.26449698, ..., 0.32932347, 0.32613593,
        0.24700099],
       [0.24183793, 0.17800754, 0.1997582 , ..., 0.2873466 , 0.27138287,
        0.22006929],
       [0.29882106, 0.33306396, 0.32558215, ..., 0.3133198 , 0.36813623,
        0.36694369]]), array([[0.34814921, 0.21100552, 0.18853547, ..., 0.22165287, 0.1663439 ,
        0.17542538],
       [0.23274794, 0.19613221, 0.14275867, ..., 0.28479916, 0.23786856,
        0.24756178],
       [0.20130405, 0.42775387, 0.52779526, ..., 0.34966224, 0.32235968,
        0.36701345],
       ...,
       [0.28605488, 0.23425731, 0.17521533, ..., 0.37832981, 0.39596862,
        0.36271971],
       [0.27875176, 0.20132723, 0.17378789, ..., 0.1906765 , 0.16311519,
        0.191484  ],
       [0.36590138, 0.34922835, 0.40134546, ..., 0.17240249, 0.12699953,
        0.19026197]])]
DEBUG:parso.python.diff:diff parser start
DEBUG:parso.python.diff:line_lengths old: 10; new: 8
DEBUG:parso.python.diff:-> code[equal] old[1:7] new[1:7]
DEBUG:parso.python.diff:copy old[1:2] new[1:2]
DEBUG:parso.python.diff:parse_part from 3 to 8 (to 7 in part parser)
DEBUG:parso.python.diff:-> code[replace] old[8:10] new[8:8]
DEBUG:parso.python.diff:diff parser end
DEBUG:parso.cache:pickle loaded: C:\Users\Kittipat\anaconda3\lib\site-packages\libfmp\__init__.py
DEBUG:parso.cache:pickle loaded: C:\Users\Kittipat\anaconda3\lib\types.py
DEBUG:parso.cache:pickle loaded: C:\Users\Kittipat\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\types.pyi
DEBUG:parso.python.diff:diff parser start
DEBUG:parso.python.diff:line_lengths old: 8; new: 10
DEBUG:parso.python.diff:-> code[equal] old[1:7] new[1:7]
DEBUG:parso.python.diff:copy old[1:2] new[1:2]
DEBUG:parso.python.diff:parse_part from 3 to 10 (to 9 in part parser)
DEBUG:parso.python.diff:-> code[replace] old[8:8] new[8:10]
DEBUG:parso.python.diff:diff parser end
DEBUG:root:X_STFT_shape = (12, 262)
DEBUG:root:X_STFT_shape = (12, 262)
DEBUG:parso.python.diff:diff parser start
DEBUG:parso.python.diff:line_lengths old: 10; new: 9
DEBUG:parso.python.diff:-> code[equal] old[1:1] new[1:1]
DEBUG:parso.python.diff:copy old[1:1] new[1:1]
DEBUG:parso.python.diff:-> code[replace] old[2:2] new[2:2]
DEBUG:parso.python.diff:parse_part from 2 to 2 (to 2 in part parser)
DEBUG:parso.python.diff:-> code[equal] old[3:7] new[3:7]
DEBUG:parso.python.diff:parse_part from 3 to 9 (to 8 in part parser)
DEBUG:parso.python.diff:-> code[replace] old[8:10] new[8:9]
DEBUG:parso.python.diff:diff parser end
DEBUG:parso.python.diff:diff parser start
DEBUG:parso.python.diff:line_lengths old: 9; new: 9
DEBUG:parso.python.diff:-> code[equal] old[1:8] new[1:8]
DEBUG:parso.python.diff:copy old[1:2] new[1:2]
DEBUG:parso.python.diff:parse_part from 3 to 9 (to 8 in part parser)
DEBUG:parso.python.diff:-> code[replace] old[9:9] new[9:9]
DEBUG:parso.python.diff:diff parser end
DEBUG:parso.python.diff:diff parser start
DEBUG:parso.python.diff:line_lengths old: 9; new: 9
DEBUG:parso.python.diff:-> code[equal] old[1:8] new[1:8]
DEBUG:parso.python.diff:copy old[1:2] new[1:2]
DEBUG:parso.python.diff:parse_part from 3 to 9 (to 8 in part parser)
DEBUG:parso.python.diff:-> code[replace] old[9:9] new[9:9]
DEBUG:parso.python.diff:diff parser end
DEBUG:root:X_STFT_shape = (12, 262)
DEBUG:root:X_total_shape = (3144,)
DEBUG:root:X_STFT_shape = (12, 284)
DEBUG:root:X_total_shape = (6552,)
DEBUG:root:X_STFT_shape = (12, 188)
DEBUG:root:X_total_shape = (8808,)
DEBUG:root:X_STFT_shape = (12, 188)
DEBUG:root:X_total_shape = (11064,)
DEBUG:root:X_STFT_shape = (12, 272)
DEBUG:root:X_total_shape = (14328,)
DEBUG:parso.python.diff:diff parser start
DEBUG:parso.python.diff:line_lengths old: 9; new: 9
DEBUG:parso.python.diff:-> code[replace] old[1:1] new[1:1]
DEBUG:parso.python.diff:parse_part from 1 to 2 (to 2 in part parser)
DEBUG:parso.python.diff:-> code[equal] old[2:7] new[2:7]
DEBUG:parso.python.diff:parse_part from 3 to 9 (to 8 in part parser)
DEBUG:parso.python.diff:-> code[replace] old[8:9] new[8:9]
DEBUG:parso.python.diff:diff parser end
DEBUG:parso.python.diff:diff parser start
DEBUG:parso.python.diff:line_lengths old: 9; new: 12
DEBUG:parso.python.diff:-> code[equal] old[1:8] new[1:8]
DEBUG:parso.python.diff:copy old[2:2] new[1:2]
DEBUG:parso.python.diff:parse_part from 3 to 12 (to 11 in part parser)
DEBUG:parso.python.diff:-> code[replace] old[9:9] new[9:12]
DEBUG:parso.python.diff:diff parser end
DEBUG:parso.python.diff:diff parser start
DEBUG:parso.python.diff:line_lengths old: 12; new: 10
DEBUG:parso.python.diff:-> code[equal] old[1:9] new[1:9]
DEBUG:parso.python.diff:copy old[2:2] new[1:2]
DEBUG:parso.python.diff:parse_part from 3 to 10 (to 9 in part parser)
DEBUG:parso.python.diff:-> code[replace] old[10:12] new[10:10]
DEBUG:parso.python.diff:diff parser end
DEBUG:parso.python.diff:diff parser start
DEBUG:parso.python.diff:line_lengths old: 10; new: 1
DEBUG:parso.python.diff:-> code[replace] old[1:10] new[1:1]
DEBUG:parso.python.diff:parse_part from 1 to 1 (to 0 in part parser)
DEBUG:parso.python.diff:diff parser end
DEBUG:parso.python.diff:diff parser start
DEBUG:parso.python.diff:line_lengths old: 1; new: 1
DEBUG:parso.python.diff:-> code[replace] old[1:1] new[1:1]
DEBUG:parso.python.diff:parse_part from 1 to 1 (to 0 in part parser)
DEBUG:parso.python.diff:diff parser end
DEBUG:parso.python.diff:diff parser start
DEBUG:parso.python.diff:line_lengths old: 1; new: 1
DEBUG:parso.python.diff:-> code[replace] old[1:1] new[1:1]
DEBUG:parso.python.diff:parse_part from 1 to 1 (to 0 in part parser)
DEBUG:parso.python.diff:diff parser end
DEBUG:parso.python.diff:diff parser start
DEBUG:parso.python.diff:line_lengths old: 1; new: 12
DEBUG:parso.python.diff:-> code[replace] old[1:1] new[1:12]
DEBUG:parso.python.diff:parse_part from 1 to 13 (to 11 in part parser)
DEBUG:parso.python.diff:diff parser end
DEBUG:parso.python.diff:diff parser start
DEBUG:parso.python.diff:line_lengths old: 12; new: 12
DEBUG:parso.python.diff:-> code[equal] old[1:11] new[1:11]
DEBUG:parso.python.diff:copy old[2:2] new[1:2]
DEBUG:parso.python.diff:parse_part from 3 to 12 (to 11 in part parser)
DEBUG:parso.python.diff:-> code[replace] old[12:12] new[12:12]
DEBUG:parso.python.diff:diff parser end
DEBUG:parso.python.diff:diff parser start
DEBUG:parso.python.diff:line_lengths old: 12; new: 12
DEBUG:parso.python.diff:-> code[equal] old[1:11] new[1:11]
DEBUG:parso.python.diff:copy old[2:2] new[1:2]
DEBUG:parso.python.diff:parse_part from 3 to 13 (to 11 in part parser)
DEBUG:parso.python.diff:-> code[replace] old[12:12] new[12:12]
DEBUG:parso.python.diff:diff parser end
DEBUG:parso.python.diff:diff parser start
DEBUG:parso.python.diff:line_lengths old: 12; new: 1
DEBUG:parso.python.diff:-> code[replace] old[1:12] new[1:1]
DEBUG:parso.python.diff:parse_part from 1 to 1 (to 0 in part parser)
DEBUG:parso.python.diff:diff parser end
DEBUG:root:all_chord = ['0', 'Bm', 'E', 'C#m', 'F#m', 'Bm', 'E', 'A', 'A', '110bpm', '\u0e04\u0e19\u0e43\u0e08\u0e07\u0e48\u0e32\u0e22.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 7
DEBUG:root:index = 7
DEBUG:root:index = 9
DEBUG:root:bpm = 110
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['0', 'Bm', 'E', 'C#m', 'F#m', 'Bm', 'E', 'A', 'A']
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E'), (13.090909090909093, 15.272727272727275, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E'), (13.090909090909093, 15.272727272727275, 'A'), (15.272727272727275, 17.454545454545457, 'A')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['0', 'C#m', 'B', 'C#m', 'B', 'C#m', 'B', 'A', 'B', '112bpm', '\u0e02\u0e35\u0e49\u0e2b\u0e36\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 7
DEBUG:root:index = 2
DEBUG:root:index = 9
DEBUG:root:bpm = 112
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['0', 'C#m', 'B', 'C#m', 'B', 'C#m', 'B', 'A', 'B']
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'B')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'B'), (12.857142857142858, 15.0, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'B'), (12.857142857142858, 15.0, 'A'), (15.0, 17.142857142857142, 'B')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['0', 'D', 'D', 'C#m', 'C#m', 'Bm', 'E', 'A', 'A', '110bpm', '\u0e04\u0e19\u0e43\u0e08\u0e07\u0e48\u0e32\u0e22.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 1
DEBUG:root:index = 3
DEBUG:root:index = 3
DEBUG:root:index = 5
DEBUG:root:index = 6
DEBUG:root:index = 7
DEBUG:root:index = 7
DEBUG:root:index = 9
DEBUG:root:bpm = 110
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['0', 'D', 'D', 'C#m', 'C#m', 'Bm', 'E', 'A', 'A']
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m'), (8.727272727272728, 10.90909090909091, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E'), (13.090909090909093, 15.272727272727275, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E'), (13.090909090909093, 15.272727272727275, 'A'), (15.272727272727275, 17.454545454545457, 'A')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['0', 'Em7=0.5', 'Cmaj7=0.5', 'Em7=0.5', 'Cmaj7', 'D', '86bpm', '\u0e1b\u0e25\u0e48\u0e2d\u0e22.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 1
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:index = 6
DEBUG:root:bpm = 86
DEBUG:root:list_len = 8
DEBUG:root:all_chord after del = ['0', 'Em7=0.5', 'Cmaj7=0.5', 'Em7=0.5', 'Cmaj7', 'D']
DEBUG:root:all_chord = ['0', 'Bm', 'E', 'C#m', 'F#m', 'Bm', 'E', 'A', 'A', '110bpm', '\u0e04\u0e19\u0e43\u0e08\u0e07\u0e48\u0e32\u0e22.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 7
DEBUG:root:index = 7
DEBUG:root:index = 9
DEBUG:root:bpm = 110
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['0', 'Bm', 'E', 'C#m', 'F#m', 'Bm', 'E', 'A', 'A']
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E'), (13.090909090909093, 15.272727272727275, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E'), (13.090909090909093, 15.272727272727275, 'A'), (15.272727272727275, 17.454545454545457, 'A')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['0', 'C#m', 'B', 'C#m', 'B', 'C#m', 'B', 'A', 'B', '112bpm', '\u0e02\u0e35\u0e49\u0e2b\u0e36\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 7
DEBUG:root:index = 2
DEBUG:root:index = 9
DEBUG:root:bpm = 112
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['0', 'C#m', 'B', 'C#m', 'B', 'C#m', 'B', 'A', 'B']
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'B')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'B'), (12.857142857142858, 15.0, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'B'), (12.857142857142858, 15.0, 'A'), (15.0, 17.142857142857142, 'B')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['0', 'D', 'D', 'C#m', 'C#m', 'Bm', 'E', 'A', 'A', '110bpm', '\u0e04\u0e19\u0e43\u0e08\u0e07\u0e48\u0e32\u0e22.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 1
DEBUG:root:index = 3
DEBUG:root:index = 3
DEBUG:root:index = 5
DEBUG:root:index = 6
DEBUG:root:index = 7
DEBUG:root:index = 7
DEBUG:root:index = 9
DEBUG:root:bpm = 110
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['0', 'D', 'D', 'C#m', 'C#m', 'Bm', 'E', 'A', 'A']
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m'), (8.727272727272728, 10.90909090909091, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E'), (13.090909090909093, 15.272727272727275, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E'), (13.090909090909093, 15.272727272727275, 'A'), (15.272727272727275, 17.454545454545457, 'A')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['0', 'Em7=0.5', 'Cmaj7=0.5', 'Em7=0.5', 'Cmaj7', 'D', '86bpm', '\u0e1b\u0e25\u0e48\u0e2d\u0e22.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 1
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:index = 6
DEBUG:root:bpm = 86
DEBUG:root:list_len = 8
DEBUG:root:all_chord after del = ['0', 'Em7=0.5', 'Cmaj7=0.5', 'Em7=0.5', 'Cmaj7', 'D']
DEBUG:root:all_chord = ['0', 'Bm', 'E', 'C#m', 'F#m', 'Bm', 'E', 'A', 'A', '110bpm', '\u0e04\u0e19\u0e43\u0e08\u0e07\u0e48\u0e32\u0e22.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 7
DEBUG:root:index = 7
DEBUG:root:index = 9
DEBUG:root:bpm = 110
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['0', 'Bm', 'E', 'C#m', 'F#m', 'Bm', 'E', 'A', 'A']
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E'), (13.090909090909093, 15.272727272727275, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E'), (13.090909090909093, 15.272727272727275, 'A'), (15.272727272727275, 17.454545454545457, 'A')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['0', 'C#m', 'B', 'C#m', 'B', 'C#m', 'B', 'A', 'B', '112bpm', '\u0e02\u0e35\u0e49\u0e2b\u0e36\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 7
DEBUG:root:index = 2
DEBUG:root:index = 9
DEBUG:root:bpm = 112
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['0', 'C#m', 'B', 'C#m', 'B', 'C#m', 'B', 'A', 'B']
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'B')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'B'), (12.857142857142858, 15.0, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'B'), (12.857142857142858, 15.0, 'A'), (15.0, 17.142857142857142, 'B')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['0', 'D', 'D', 'C#m', 'C#m', 'Bm', 'E', 'A', 'A', '110bpm', '\u0e04\u0e19\u0e43\u0e08\u0e07\u0e48\u0e32\u0e22.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 1
DEBUG:root:index = 3
DEBUG:root:index = 3
DEBUG:root:index = 5
DEBUG:root:index = 6
DEBUG:root:index = 7
DEBUG:root:index = 7
DEBUG:root:index = 9
DEBUG:root:bpm = 110
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['0', 'D', 'D', 'C#m', 'C#m', 'Bm', 'E', 'A', 'A']
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m'), (8.727272727272728, 10.90909090909091, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E'), (13.090909090909093, 15.272727272727275, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E'), (13.090909090909093, 15.272727272727275, 'A'), (15.272727272727275, 17.454545454545457, 'A')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['0', 'Em7=0.5', 'Cmaj7=0.5', 'Em7=0.5', 'Cmaj7', 'D', '86bpm', '\u0e1b\u0e25\u0e48\u0e2d\u0e22.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 1
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:index = 6
DEBUG:root:bpm = 86
DEBUG:root:list_len = 8
DEBUG:root:all_chord after del = ['0', 'Em7=0.5', 'Cmaj7=0.5', 'Em7=0.5', 'Cmaj7', 'D']
DEBUG:root:= found, special_note = ['Em7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Em7')]
DEBUG:root:= found, special_note = ['Cmaj7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Em7'), (5.5813953488372094, 11.162790697674419, 'Cmaj7')]
DEBUG:root:= found, special_note = ['Em7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Em7'), (5.5813953488372094, 11.162790697674419, 'Cmaj7'), (11.162790697674419, 16.74418604651163, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 5.5813953488372094, 'Em7'), (5.5813953488372094, 11.162790697674419, 'Cmaj7'), (11.162790697674419, 16.74418604651163, 'Em7'), (16.74418604651163, 19.53488372093023, 'Cmaj7')]
DEBUG:root:normal length, ann = [(0.0, 5.5813953488372094, 'Em7'), (5.5813953488372094, 11.162790697674419, 'Cmaj7'), (11.162790697674419, 16.74418604651163, 'Em7'), (16.74418604651163, 19.53488372093023, 'Cmaj7'), (19.53488372093023, 22.325581395348838, 'D')]
INFO:root:going out, mat_len = 5
DEBUG:root:all_chord = ['0', 'E', 'E', 'A', 'B', 'C#m', 'A', 'B', 'B', '112bpm', '\u0e02\u0e35\u0e49\u0e2b\u0e36\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 1
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 4
DEBUG:root:index = 9
DEBUG:root:bpm = 112
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['0', 'E', 'E', 'A', 'B', 'C#m', 'A', 'B', 'B']
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'A'), (6.428571428571429, 8.571428571428571, 'B')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'A'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'A'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'A'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'A'), (12.857142857142858, 15.0, 'B')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'A'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'A'), (12.857142857142858, 15.0, 'B'), (15.0, 17.142857142857142, 'B')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['0', 'E', 'E', 'G#m', 'A', 'E', 'E', 'C#m', 'B', '112bpm', '\u0e02\u0e35\u0e49\u0e2b\u0e36\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 1
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 1
DEBUG:root:index = 1
DEBUG:root:index = 7
DEBUG:root:index = 8
DEBUG:root:index = 9
DEBUG:root:bpm = 112
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['0', 'E', 'E', 'G#m', 'A', 'E', 'E', 'C#m', 'B']
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'G#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'G#m'), (6.428571428571429, 8.571428571428571, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'G#m'), (6.428571428571429, 8.571428571428571, 'A'), (8.571428571428571, 10.714285714285714, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'G#m'), (6.428571428571429, 8.571428571428571, 'A'), (8.571428571428571, 10.714285714285714, 'E'), (10.714285714285714, 12.857142857142858, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'G#m'), (6.428571428571429, 8.571428571428571, 'A'), (8.571428571428571, 10.714285714285714, 'E'), (10.714285714285714, 12.857142857142858, 'E'), (12.857142857142858, 15.0, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'G#m'), (6.428571428571429, 8.571428571428571, 'A'), (8.571428571428571, 10.714285714285714, 'E'), (10.714285714285714, 12.857142857142858, 'E'), (12.857142857142858, 15.0, 'C#m'), (15.0, 17.142857142857142, 'B')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['0', 'Fmaj7', 'Em7', 'Dm7=2', 'G7=2', 'C=2', 'C7=2', 'Fmaj7', 'Em7=2', 'Am7=2', 'Dm7', 'G', '68bpm', '\u0e16\u0e49\u0e32.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:index = 6
DEBUG:root:index = 1
DEBUG:root:index = 8
DEBUG:root:index = 9
DEBUG:root:index = 10
DEBUG:root:index = 11
DEBUG:root:index = 12
DEBUG:root:bpm = 68
DEBUG:root:list_len = 14
DEBUG:root:all_chord after del = ['0', 'Fmaj7', 'Em7', 'Dm7=2', 'G7=2', 'C=2', 'C7=2', 'Fmaj7', 'Em7=2', 'Am7=2', 'Dm7', 'G']
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7')]
DEBUG:root:= found, special_note = ['Dm7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7')]
DEBUG:root:= found, special_note = ['G7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7')]
DEBUG:root:= found, special_note = ['C', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C')]
DEBUG:root:= found, special_note = ['C7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C'), (12.352941176470587, 14.117647058823529, 'C7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C'), (12.352941176470587, 14.117647058823529, 'C7'), (14.117647058823529, 17.647058823529413, 'Fmaj7')]
DEBUG:root:= found, special_note = ['Em7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C'), (12.352941176470587, 14.117647058823529, 'C7'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7')]
DEBUG:root:= found, special_note = ['Am7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C'), (12.352941176470587, 14.117647058823529, 'C7'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C'), (12.352941176470587, 14.117647058823529, 'C7'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7'), (21.176470588235293, 24.705882352941174, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C'), (12.352941176470587, 14.117647058823529, 'C7'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7'), (21.176470588235293, 24.705882352941174, 'Dm7'), (24.705882352941174, 28.235294117647058, 'G')]
INFO:root:going out, mat_len = 11
DEBUG:root:all_chord = ['0', 'Fmaj7', 'Em7', 'Dm7=2', 'G7=2', 'C', 'Fmaj7', 'Em7=2', 'Am7=2', 'Dm7=2', 'G7=2', 'C', '68bpm', '\u0e16\u0e49\u0e32.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:index = 1
DEBUG:root:index = 7
DEBUG:root:index = 8
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:index = 12
DEBUG:root:bpm = 68
DEBUG:root:list_len = 14
DEBUG:root:all_chord after del = ['0', 'Fmaj7', 'Em7', 'Dm7=2', 'G7=2', 'C', 'Fmaj7', 'Em7=2', 'Am7=2', 'Dm7=2', 'G7=2', 'C']
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7')]
DEBUG:root:= found, special_note = ['Dm7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7')]
DEBUG:root:= found, special_note = ['G7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C'), (14.117647058823529, 17.647058823529413, 'Fmaj7')]
DEBUG:root:= found, special_note = ['Em7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7')]
DEBUG:root:= found, special_note = ['Am7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7')]
DEBUG:root:= found, special_note = ['Dm7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7'), (21.176470588235293, 22.941176470588236, 'Dm7')]
DEBUG:root:= found, special_note = ['G7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7'), (21.176470588235293, 22.941176470588236, 'Dm7'), (22.941176470588236, 24.705882352941174, 'G7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7'), (21.176470588235293, 22.941176470588236, 'Dm7'), (22.941176470588236, 24.705882352941174, 'G7'), (24.705882352941174, 28.235294117647058, 'C')]
INFO:root:going out, mat_len = 11
DEBUG:root:all_chord = ['0', 'G=0.5', 'Em7=0.5', 'C=0.5', 'D=0.5', '86bpm', '\u0e1b\u0e25\u0e48\u0e2d\u0e22.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:bpm = 86
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['0', 'G=0.5', 'Em7=0.5', 'C=0.5', 'D=0.5']
DEBUG:root:= found, special_note = ['G', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'G')]
DEBUG:root:= found, special_note = ['Em7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'G'), (5.5813953488372094, 11.162790697674419, 'Em7')]
DEBUG:root:= found, special_note = ['C', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'G'), (5.5813953488372094, 11.162790697674419, 'Em7'), (11.162790697674419, 16.74418604651163, 'C')]
DEBUG:root:= found, special_note = ['D', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'G'), (5.5813953488372094, 11.162790697674419, 'Em7'), (11.162790697674419, 16.74418604651163, 'C'), (16.74418604651163, 22.325581395348838, 'D')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['0', 'Gmaj7=0.5', 'Em7=0.5', 'Cmaj7=0.5', 'D=0.5', '86bpm', '\u0e1b\u0e25\u0e48\u0e2d\u0e22.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:bpm = 86
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['0', 'Gmaj7=0.5', 'Em7=0.5', 'Cmaj7=0.5', 'D=0.5']
DEBUG:root:= found, special_note = ['Gmaj7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Gmaj7')]
DEBUG:root:= found, special_note = ['Em7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Gmaj7'), (5.5813953488372094, 11.162790697674419, 'Em7')]
DEBUG:root:= found, special_note = ['Cmaj7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Gmaj7'), (5.5813953488372094, 11.162790697674419, 'Em7'), (11.162790697674419, 16.74418604651163, 'Cmaj7')]
DEBUG:root:= found, special_note = ['D', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Gmaj7'), (5.5813953488372094, 11.162790697674419, 'Em7'), (11.162790697674419, 16.74418604651163, 'Cmaj7'), (16.74418604651163, 22.325581395348838, 'D')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['1', 'A', 'Amaj7', 'D', 'D', '68bpm', '\u0e19\u0e30\u0e2b\u0e19\u0e49\u0e32\u0e18\u0e2d\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 3
DEBUG:root:index = 5
DEBUG:root:bpm = 68
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['1', 'A', 'Amaj7', 'D', 'D']
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7'), (7.0588235294117645, 10.588235294117647, 'D')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7'), (7.0588235294117645, 10.588235294117647, 'D'), (10.588235294117647, 14.117647058823529, 'D')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7'), (7.0588235294117645, 10.588235294117647, 'D'), (10.588235294117647, 14.117647058823529, 'D'), (14.117647058823529, 17.647058823529413, 'A')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7'), (7.0588235294117645, 10.588235294117647, 'D'), (10.588235294117647, 14.117647058823529, 'D'), (14.117647058823529, 17.647058823529413, 'A'), (17.647058823529413, 21.176470588235293, 'Amaj7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7'), (7.0588235294117645, 10.588235294117647, 'D'), (10.588235294117647, 14.117647058823529, 'D'), (14.117647058823529, 17.647058823529413, 'A'), (17.647058823529413, 21.176470588235293, 'Amaj7'), (21.176470588235293, 24.705882352941174, 'D')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7'), (7.0588235294117645, 10.588235294117647, 'D'), (10.588235294117647, 14.117647058823529, 'D'), (14.117647058823529, 17.647058823529413, 'A'), (17.647058823529413, 21.176470588235293, 'Amaj7'), (21.176470588235293, 24.705882352941174, 'D'), (24.705882352941174, 28.235294117647058, 'D')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['1', 'Cmaj7', 'D7', 'G', 'G', '100bpm', '\u0e2b\u0e21\u0e2d\u0e01\u0e08\u0e32\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 3
DEBUG:root:index = 5
DEBUG:root:bpm = 100
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['1', 'Cmaj7', 'D7', 'G', 'G']
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7'), (4.8, 7.199999999999999, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7'), (4.8, 7.199999999999999, 'G'), (7.199999999999999, 9.6, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7'), (4.8, 7.199999999999999, 'G'), (7.199999999999999, 9.6, 'G'), (9.6, 12.0, 'Cmaj7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7'), (4.8, 7.199999999999999, 'G'), (7.199999999999999, 9.6, 'G'), (9.6, 12.0, 'Cmaj7'), (12.0, 14.399999999999999, 'D7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7'), (4.8, 7.199999999999999, 'G'), (7.199999999999999, 9.6, 'G'), (9.6, 12.0, 'Cmaj7'), (12.0, 14.399999999999999, 'D7'), (14.399999999999999, 16.8, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7'), (4.8, 7.199999999999999, 'G'), (7.199999999999999, 9.6, 'G'), (9.6, 12.0, 'Cmaj7'), (12.0, 14.399999999999999, 'D7'), (14.399999999999999, 16.8, 'G'), (16.8, 19.2, 'G')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['1', 'D', 'Dmaj7', 'Em7', 'A', '79bpm', '\u0e16\u0e49\u0e32\u0e40\u0e18\u0e2d\u0e23\u0e31\u0e01\u0e09\u0e31\u0e19\u0e08\u0e23\u0e34\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:bpm = 79
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['1', 'D', 'Dmaj7', 'Em7', 'A']
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7'), (6.075949367088608, 9.113924050632912, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7'), (6.075949367088608, 9.113924050632912, 'Em7'), (9.113924050632912, 12.151898734177216, 'A')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7'), (6.075949367088608, 9.113924050632912, 'Em7'), (9.113924050632912, 12.151898734177216, 'A'), (12.151898734177216, 15.18987341772152, 'D')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7'), (6.075949367088608, 9.113924050632912, 'Em7'), (9.113924050632912, 12.151898734177216, 'A'), (12.151898734177216, 15.18987341772152, 'D'), (15.18987341772152, 18.227848101265824, 'Dmaj7')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7'), (6.075949367088608, 9.113924050632912, 'Em7'), (9.113924050632912, 12.151898734177216, 'A'), (12.151898734177216, 15.18987341772152, 'D'), (15.18987341772152, 18.227848101265824, 'Dmaj7'), (18.227848101265824, 21.265822784810126, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7'), (6.075949367088608, 9.113924050632912, 'Em7'), (9.113924050632912, 12.151898734177216, 'A'), (12.151898734177216, 15.18987341772152, 'D'), (15.18987341772152, 18.227848101265824, 'Dmaj7'), (18.227848101265824, 21.265822784810126, 'Em7'), (21.265822784810126, 24.303797468354432, 'A')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['1', 'E', 'A', 'C#m', 'A=2', 'B=2', '73bpm', '\u0e23.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:index = 6
DEBUG:root:bpm = 73
DEBUG:root:list_len = 8
DEBUG:root:all_chord after del = ['1', 'E', 'A', 'C#m', 'A=2', 'B=2']
DEBUG:root:normal length, ann = [(0.0, 3.2876712328767126, 'E')]
DEBUG:root:normal length, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A')]
DEBUG:root:normal length, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m')]
DEBUG:root:= found, special_note = ['A', '2'], tmp = 0.5, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A')]
DEBUG:root:= found, special_note = ['B', '2'], tmp = 0.5, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A'), (11.506849315068495, 13.15068493150685, 'B')]
DEBUG:root:normal length, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A'), (11.506849315068495, 13.15068493150685, 'B'), (13.15068493150685, 16.438356164383563, 'E')]
DEBUG:root:normal length, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A'), (11.506849315068495, 13.15068493150685, 'B'), (13.15068493150685, 16.438356164383563, 'E'), (16.438356164383563, 19.726027397260275, 'A')]
DEBUG:root:normal length, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A'), (11.506849315068495, 13.15068493150685, 'B'), (13.15068493150685, 16.438356164383563, 'E'), (16.438356164383563, 19.726027397260275, 'A'), (19.726027397260275, 23.01369863013699, 'C#m')]
DEBUG:root:= found, special_note = ['A', '2'], tmp = 0.5, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A'), (11.506849315068495, 13.15068493150685, 'B'), (13.15068493150685, 16.438356164383563, 'E'), (16.438356164383563, 19.726027397260275, 'A'), (19.726027397260275, 23.01369863013699, 'C#m'), (23.01369863013699, 24.657534246575345, 'A')]
DEBUG:root:= found, special_note = ['B', '2'], tmp = 0.5, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A'), (11.506849315068495, 13.15068493150685, 'B'), (13.15068493150685, 16.438356164383563, 'E'), (16.438356164383563, 19.726027397260275, 'A'), (19.726027397260275, 23.01369863013699, 'C#m'), (23.01369863013699, 24.657534246575345, 'A'), (24.657534246575345, 26.3013698630137, 'B')]
INFO:root:going out, mat_len = 5
DEBUG:root:all_chord = ['1', 'G', 'A', 'F#m7', 'Bm', '110bpm', '\u0e04\u0e38\u0e01\u0e40\u0e02\u0e48\u0e32.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:bpm = 110
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['1', 'G', 'A', 'F#m7', 'Bm']
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G'), (10.90909090909091, 13.090909090909093, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G'), (10.90909090909091, 13.090909090909093, 'A'), (13.090909090909093, 15.272727272727275, 'F#m7')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G'), (10.90909090909091, 13.090909090909093, 'A'), (13.090909090909093, 15.272727272727275, 'F#m7'), (15.272727272727275, 17.454545454545457, 'Bm')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['1', 'G', 'A', 'F#m7', 'Bm', '110bpm', '\u0e04\u0e38\u0e01\u0e40\u0e02\u0e48\u0e32', 'stutter.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:bpm = 110
DEBUG:root:list_len = 8
DEBUG:root:all_chord after del = ['1', 'G', 'A', 'F#m7', 'Bm']
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G'), (10.90909090909091, 13.090909090909093, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G'), (10.90909090909091, 13.090909090909093, 'A'), (13.090909090909093, 15.272727272727275, 'F#m7')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G'), (10.90909090909091, 13.090909090909093, 'A'), (13.090909090909093, 15.272727272727275, 'F#m7'), (15.272727272727275, 17.454545454545457, 'Bm')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['1', 'G', 'Em7', 'Cmaj7', 'D', '100bpm', '\u0e2b\u0e21\u0e2d\u0e01\u0e08\u0e32\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:bpm = 100
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['1', 'G', 'Em7', 'Cmaj7', 'D']
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7'), (4.8, 7.199999999999999, 'Cmaj7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7'), (4.8, 7.199999999999999, 'Cmaj7'), (7.199999999999999, 9.6, 'D')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7'), (4.8, 7.199999999999999, 'Cmaj7'), (7.199999999999999, 9.6, 'D'), (9.6, 12.0, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7'), (4.8, 7.199999999999999, 'Cmaj7'), (7.199999999999999, 9.6, 'D'), (9.6, 12.0, 'G'), (12.0, 14.399999999999999, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7'), (4.8, 7.199999999999999, 'Cmaj7'), (7.199999999999999, 9.6, 'D'), (9.6, 12.0, 'G'), (12.0, 14.399999999999999, 'Em7'), (14.399999999999999, 16.8, 'Cmaj7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7'), (4.8, 7.199999999999999, 'Cmaj7'), (7.199999999999999, 9.6, 'D'), (9.6, 12.0, 'G'), (12.0, 14.399999999999999, 'Em7'), (14.399999999999999, 16.8, 'Cmaj7'), (16.8, 19.2, 'D')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['2', 'C', 'Am7', 'Dm7', 'G7', 'C', 'Am7', 'Dm7', 'G7', '68bpm', '\u0e16\u0e49\u0e32.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 9
DEBUG:root:bpm = 68
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['2', 'C', 'Am7', 'Dm7', 'G7', 'C', 'Am7', 'Dm7', 'G7']
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7'), (17.647058823529413, 19.41176470588235, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7'), (17.647058823529413, 19.41176470588235, 'Dm7'), (19.41176470588235, 21.176470588235293, 'G7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7'), (17.647058823529413, 19.41176470588235, 'Dm7'), (19.41176470588235, 21.176470588235293, 'G7'), (21.176470588235293, 22.941176470588236, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7'), (17.647058823529413, 19.41176470588235, 'Dm7'), (19.41176470588235, 21.176470588235293, 'G7'), (21.176470588235293, 22.941176470588236, 'C'), (22.941176470588236, 24.705882352941174, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7'), (17.647058823529413, 19.41176470588235, 'Dm7'), (19.41176470588235, 21.176470588235293, 'G7'), (21.176470588235293, 22.941176470588236, 'C'), (22.941176470588236, 24.705882352941174, 'Am7'), (24.705882352941174, 26.470588235294116, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7'), (17.647058823529413, 19.41176470588235, 'Dm7'), (19.41176470588235, 21.176470588235293, 'G7'), (21.176470588235293, 22.941176470588236, 'C'), (22.941176470588236, 24.705882352941174, 'Am7'), (24.705882352941174, 26.470588235294116, 'Dm7'), (26.470588235294116, 28.235294117647058, 'G7')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['2', 'C', 'Em7', 'Am7', 'F', 'C', 'C7', 'Fmaj7', 'G', '65bpm', '\u0e17\u0e38\u0e49\u0e21\u0e2d\u0e22\u0e39\u0e48.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 1
DEBUG:root:index = 6
DEBUG:root:index = 7
DEBUG:root:index = 8
DEBUG:root:index = 9
DEBUG:root:bpm = 65
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['2', 'C', 'Em7', 'Am7', 'F', 'C', 'C7', 'Fmaj7', 'G']
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Am7'), (20.30769230769231, 22.153846153846153, 'F')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Am7'), (20.30769230769231, 22.153846153846153, 'F'), (22.153846153846153, 24.0, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Am7'), (20.30769230769231, 22.153846153846153, 'F'), (22.153846153846153, 24.0, 'C'), (24.0, 25.846153846153847, 'C7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Am7'), (20.30769230769231, 22.153846153846153, 'F'), (22.153846153846153, 24.0, 'C'), (24.0, 25.846153846153847, 'C7'), (25.846153846153847, 27.692307692307693, 'Fmaj7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Am7'), (20.30769230769231, 22.153846153846153, 'F'), (22.153846153846153, 24.0, 'C'), (24.0, 25.846153846153847, 'C7'), (25.846153846153847, 27.692307692307693, 'Fmaj7'), (27.692307692307693, 29.53846153846154, 'G')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['2', 'Dm7', 'Em7', 'Fmaj7', 'Em7', 'Dm7', 'C7Em7', 'G', 'G', '65bpm', '\u0e17\u0e38\u0e49\u0e21\u0e2d\u0e22\u0e39\u0e48.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 2
DEBUG:root:index = 1
DEBUG:root:index = 6
DEBUG:root:index = 7
DEBUG:root:index = 7
DEBUG:root:index = 9
DEBUG:root:bpm = 65
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['2', 'Dm7', 'Em7', 'Fmaj7', 'Em7', 'Dm7', 'C7Em7', 'G', 'G']
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G'), (12.923076923076923, 14.76923076923077, 'G')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'Dm7'), (16.615384615384617, 18.461538461538463, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'Dm7'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Fmaj7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'Dm7'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Fmaj7'), (20.30769230769231, 22.153846153846153, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'Dm7'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Fmaj7'), (20.30769230769231, 22.153846153846153, 'Em7'), (22.153846153846153, 24.0, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'Dm7'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Fmaj7'), (20.30769230769231, 22.153846153846153, 'Em7'), (22.153846153846153, 24.0, 'Dm7'), (24.0, 25.846153846153847, 'C7Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'Dm7'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Fmaj7'), (20.30769230769231, 22.153846153846153, 'Em7'), (22.153846153846153, 24.0, 'Dm7'), (24.0, 25.846153846153847, 'C7Em7'), (25.846153846153847, 27.692307692307693, 'G')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'Dm7'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Fmaj7'), (20.30769230769231, 22.153846153846153, 'Em7'), (22.153846153846153, 24.0, 'Dm7'), (24.0, 25.846153846153847, 'C7Em7'), (25.846153846153847, 27.692307692307693, 'G'), (27.692307692307693, 29.53846153846154, 'G')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['2', 'G', 'D', 'F#', 'Em7', 'D', 'C', 'Bm7', 'Am7', 'D', '76bpm', '\u0e1b\u0e35\u0e19\u0e35\u0e49\u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e40\u0e2b\u0e07\u0e32.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 2
DEBUG:root:index = 6
DEBUG:root:index = 7
DEBUG:root:index = 8
DEBUG:root:index = 2
DEBUG:root:index = 10
DEBUG:root:bpm = 76
DEBUG:root:list_len = 12
DEBUG:root:all_chord after del = ['2', 'G', 'D', 'F#', 'Em7', 'D', 'C', 'Bm7', 'Am7', 'D']
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#'), (18.94736842105263, 20.526315789473685, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#'), (18.94736842105263, 20.526315789473685, 'Em7'), (20.526315789473685, 22.105263157894736, 'D')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#'), (18.94736842105263, 20.526315789473685, 'Em7'), (20.526315789473685, 22.105263157894736, 'D'), (22.105263157894736, 23.68421052631579, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#'), (18.94736842105263, 20.526315789473685, 'Em7'), (20.526315789473685, 22.105263157894736, 'D'), (22.105263157894736, 23.68421052631579, 'C'), (23.68421052631579, 25.263157894736842, 'Bm7')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#'), (18.94736842105263, 20.526315789473685, 'Em7'), (20.526315789473685, 22.105263157894736, 'D'), (22.105263157894736, 23.68421052631579, 'C'), (23.68421052631579, 25.263157894736842, 'Bm7'), (25.263157894736842, 26.842105263157894, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#'), (18.94736842105263, 20.526315789473685, 'Em7'), (20.526315789473685, 22.105263157894736, 'D'), (22.105263157894736, 23.68421052631579, 'C'), (23.68421052631579, 25.263157894736842, 'Bm7'), (25.263157894736842, 26.842105263157894, 'Am7'), (26.842105263157894, 28.42105263157895, 'D')]
INFO:root:going out, mat_len = 9
DEBUG:root:all_chord = ['0', 'Bm', 'E', 'C#m', 'F#m', 'Bm', 'E', 'A', 'A', '110bpm', '\u0e04\u0e19\u0e43\u0e08\u0e07\u0e48\u0e32\u0e22.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 7
DEBUG:root:index = 7
DEBUG:root:index = 9
DEBUG:root:bpm = 110
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['0', 'Bm', 'E', 'C#m', 'F#m', 'Bm', 'E', 'A', 'A']
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E'), (13.090909090909093, 15.272727272727275, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E'), (13.090909090909093, 15.272727272727275, 'A'), (15.272727272727275, 17.454545454545457, 'A')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['0', 'Bm', 'E', 'C#m', 'F#m', 'Bm', 'E', 'A', 'A', '110bpm', '\u0e04\u0e19\u0e43\u0e08\u0e07\u0e48\u0e32\u0e22.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 7
DEBUG:root:index = 7
DEBUG:root:index = 9
DEBUG:root:bpm = 110
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['0', 'Bm', 'E', 'C#m', 'F#m', 'Bm', 'E', 'A', 'A']
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E'), (13.090909090909093, 15.272727272727275, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E'), (13.090909090909093, 15.272727272727275, 'A'), (15.272727272727275, 17.454545454545457, 'A')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['0', 'C#m', 'B', 'C#m', 'B', 'C#m', 'B', 'A', 'B', '112bpm', '\u0e02\u0e35\u0e49\u0e2b\u0e36\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 7
DEBUG:root:index = 2
DEBUG:root:index = 9
DEBUG:root:bpm = 112
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['0', 'C#m', 'B', 'C#m', 'B', 'C#m', 'B', 'A', 'B']
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'B')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'B'), (12.857142857142858, 15.0, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'B'), (12.857142857142858, 15.0, 'A'), (15.0, 17.142857142857142, 'B')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['0', 'D', 'D', 'C#m', 'C#m', 'Bm', 'E', 'A', 'A', '110bpm', '\u0e04\u0e19\u0e43\u0e08\u0e07\u0e48\u0e32\u0e22.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 1
DEBUG:root:index = 3
DEBUG:root:index = 3
DEBUG:root:index = 5
DEBUG:root:index = 6
DEBUG:root:index = 7
DEBUG:root:index = 7
DEBUG:root:index = 9
DEBUG:root:bpm = 110
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['0', 'D', 'D', 'C#m', 'C#m', 'Bm', 'E', 'A', 'A']
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m'), (8.727272727272728, 10.90909090909091, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E'), (13.090909090909093, 15.272727272727275, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E'), (13.090909090909093, 15.272727272727275, 'A'), (15.272727272727275, 17.454545454545457, 'A')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['0', 'Em7=0.5', 'Cmaj7=0.5', 'Em7=0.5', 'Cmaj7', 'D', '86bpm', '\u0e1b\u0e25\u0e48\u0e2d\u0e22.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 1
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:index = 6
DEBUG:root:bpm = 86
DEBUG:root:list_len = 8
DEBUG:root:all_chord after del = ['0', 'Em7=0.5', 'Cmaj7=0.5', 'Em7=0.5', 'Cmaj7', 'D']
DEBUG:root:= found, special_note = ['Em7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Em7')]
DEBUG:root:= found, special_note = ['Cmaj7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Em7'), (5.5813953488372094, 11.162790697674419, 'Cmaj7')]
DEBUG:root:= found, special_note = ['Em7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Em7'), (5.5813953488372094, 11.162790697674419, 'Cmaj7'), (11.162790697674419, 16.74418604651163, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 5.5813953488372094, 'Em7'), (5.5813953488372094, 11.162790697674419, 'Cmaj7'), (11.162790697674419, 16.74418604651163, 'Em7'), (16.74418604651163, 19.53488372093023, 'Cmaj7')]
DEBUG:root:normal length, ann = [(0.0, 5.5813953488372094, 'Em7'), (5.5813953488372094, 11.162790697674419, 'Cmaj7'), (11.162790697674419, 16.74418604651163, 'Em7'), (16.74418604651163, 19.53488372093023, 'Cmaj7'), (19.53488372093023, 22.325581395348838, 'D')]
INFO:root:going out, mat_len = 5
DEBUG:root:all_chord = ['0', 'E', 'E', 'A', 'B', 'C#m', 'A', 'B', 'B', '112bpm', '\u0e02\u0e35\u0e49\u0e2b\u0e36\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 1
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 4
DEBUG:root:index = 9
DEBUG:root:bpm = 112
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['0', 'E', 'E', 'A', 'B', 'C#m', 'A', 'B', 'B']
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'A'), (6.428571428571429, 8.571428571428571, 'B')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'A'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'A'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'A'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'A'), (12.857142857142858, 15.0, 'B')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'A'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'A'), (12.857142857142858, 15.0, 'B'), (15.0, 17.142857142857142, 'B')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['0', 'E', 'E', 'G#m', 'A', 'E', 'E', 'C#m', 'B', '112bpm', '\u0e02\u0e35\u0e49\u0e2b\u0e36\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 1
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 1
DEBUG:root:index = 1
DEBUG:root:index = 7
DEBUG:root:index = 8
DEBUG:root:index = 9
DEBUG:root:bpm = 112
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['0', 'E', 'E', 'G#m', 'A', 'E', 'E', 'C#m', 'B']
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'G#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'G#m'), (6.428571428571429, 8.571428571428571, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'G#m'), (6.428571428571429, 8.571428571428571, 'A'), (8.571428571428571, 10.714285714285714, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'G#m'), (6.428571428571429, 8.571428571428571, 'A'), (8.571428571428571, 10.714285714285714, 'E'), (10.714285714285714, 12.857142857142858, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'G#m'), (6.428571428571429, 8.571428571428571, 'A'), (8.571428571428571, 10.714285714285714, 'E'), (10.714285714285714, 12.857142857142858, 'E'), (12.857142857142858, 15.0, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'G#m'), (6.428571428571429, 8.571428571428571, 'A'), (8.571428571428571, 10.714285714285714, 'E'), (10.714285714285714, 12.857142857142858, 'E'), (12.857142857142858, 15.0, 'C#m'), (15.0, 17.142857142857142, 'B')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['0', 'Fmaj7', 'Em7', 'Dm7=2', 'G7=2', 'C=2', 'C7=2', 'Fmaj7', 'Em7=2', 'Am7=2', 'Dm7', 'G', '68bpm', '\u0e16\u0e49\u0e32.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:index = 6
DEBUG:root:index = 1
DEBUG:root:index = 8
DEBUG:root:index = 9
DEBUG:root:index = 10
DEBUG:root:index = 11
DEBUG:root:index = 12
DEBUG:root:bpm = 68
DEBUG:root:list_len = 14
DEBUG:root:all_chord after del = ['0', 'Fmaj7', 'Em7', 'Dm7=2', 'G7=2', 'C=2', 'C7=2', 'Fmaj7', 'Em7=2', 'Am7=2', 'Dm7', 'G']
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7')]
DEBUG:root:= found, special_note = ['Dm7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7')]
DEBUG:root:= found, special_note = ['G7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7')]
DEBUG:root:= found, special_note = ['C', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C')]
DEBUG:root:= found, special_note = ['C7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C'), (12.352941176470587, 14.117647058823529, 'C7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C'), (12.352941176470587, 14.117647058823529, 'C7'), (14.117647058823529, 17.647058823529413, 'Fmaj7')]
DEBUG:root:= found, special_note = ['Em7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C'), (12.352941176470587, 14.117647058823529, 'C7'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7')]
DEBUG:root:= found, special_note = ['Am7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C'), (12.352941176470587, 14.117647058823529, 'C7'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C'), (12.352941176470587, 14.117647058823529, 'C7'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7'), (21.176470588235293, 24.705882352941174, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C'), (12.352941176470587, 14.117647058823529, 'C7'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7'), (21.176470588235293, 24.705882352941174, 'Dm7'), (24.705882352941174, 28.235294117647058, 'G')]
INFO:root:going out, mat_len = 11
DEBUG:root:all_chord = ['0', 'Fmaj7', 'Em7', 'Dm7=2', 'G7=2', 'C', 'Fmaj7', 'Em7=2', 'Am7=2', 'Dm7=2', 'G7=2', 'C', '68bpm', '\u0e16\u0e49\u0e32.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:index = 1
DEBUG:root:index = 7
DEBUG:root:index = 8
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:index = 12
DEBUG:root:bpm = 68
DEBUG:root:list_len = 14
DEBUG:root:all_chord after del = ['0', 'Fmaj7', 'Em7', 'Dm7=2', 'G7=2', 'C', 'Fmaj7', 'Em7=2', 'Am7=2', 'Dm7=2', 'G7=2', 'C']
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7')]
DEBUG:root:= found, special_note = ['Dm7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7')]
DEBUG:root:= found, special_note = ['G7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C'), (14.117647058823529, 17.647058823529413, 'Fmaj7')]
DEBUG:root:= found, special_note = ['Em7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7')]
DEBUG:root:= found, special_note = ['Am7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7')]
DEBUG:root:= found, special_note = ['Dm7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7'), (21.176470588235293, 22.941176470588236, 'Dm7')]
DEBUG:root:= found, special_note = ['G7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7'), (21.176470588235293, 22.941176470588236, 'Dm7'), (22.941176470588236, 24.705882352941174, 'G7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7'), (21.176470588235293, 22.941176470588236, 'Dm7'), (22.941176470588236, 24.705882352941174, 'G7'), (24.705882352941174, 28.235294117647058, 'C')]
INFO:root:going out, mat_len = 11
DEBUG:root:all_chord = ['0', 'G=0.5', 'Em7=0.5', 'C=0.5', 'D=0.5', '86bpm', '\u0e1b\u0e25\u0e48\u0e2d\u0e22.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:bpm = 86
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['0', 'G=0.5', 'Em7=0.5', 'C=0.5', 'D=0.5']
DEBUG:root:= found, special_note = ['G', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'G')]
DEBUG:root:= found, special_note = ['Em7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'G'), (5.5813953488372094, 11.162790697674419, 'Em7')]
DEBUG:root:= found, special_note = ['C', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'G'), (5.5813953488372094, 11.162790697674419, 'Em7'), (11.162790697674419, 16.74418604651163, 'C')]
DEBUG:root:= found, special_note = ['D', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'G'), (5.5813953488372094, 11.162790697674419, 'Em7'), (11.162790697674419, 16.74418604651163, 'C'), (16.74418604651163, 22.325581395348838, 'D')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['0', 'Gmaj7=0.5', 'Em7=0.5', 'Cmaj7=0.5', 'D=0.5', '86bpm', '\u0e1b\u0e25\u0e48\u0e2d\u0e22.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:bpm = 86
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['0', 'Gmaj7=0.5', 'Em7=0.5', 'Cmaj7=0.5', 'D=0.5']
DEBUG:root:= found, special_note = ['Gmaj7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Gmaj7')]
DEBUG:root:= found, special_note = ['Em7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Gmaj7'), (5.5813953488372094, 11.162790697674419, 'Em7')]
DEBUG:root:= found, special_note = ['Cmaj7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Gmaj7'), (5.5813953488372094, 11.162790697674419, 'Em7'), (11.162790697674419, 16.74418604651163, 'Cmaj7')]
DEBUG:root:= found, special_note = ['D', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Gmaj7'), (5.5813953488372094, 11.162790697674419, 'Em7'), (11.162790697674419, 16.74418604651163, 'Cmaj7'), (16.74418604651163, 22.325581395348838, 'D')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['1', 'A', 'Amaj7', 'D', 'D', '68bpm', '\u0e19\u0e30\u0e2b\u0e19\u0e49\u0e32\u0e18\u0e2d\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 3
DEBUG:root:index = 5
DEBUG:root:bpm = 68
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['1', 'A', 'Amaj7', 'D', 'D']
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7'), (7.0588235294117645, 10.588235294117647, 'D')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7'), (7.0588235294117645, 10.588235294117647, 'D'), (10.588235294117647, 14.117647058823529, 'D')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7'), (7.0588235294117645, 10.588235294117647, 'D'), (10.588235294117647, 14.117647058823529, 'D'), (14.117647058823529, 17.647058823529413, 'A')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7'), (7.0588235294117645, 10.588235294117647, 'D'), (10.588235294117647, 14.117647058823529, 'D'), (14.117647058823529, 17.647058823529413, 'A'), (17.647058823529413, 21.176470588235293, 'Amaj7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7'), (7.0588235294117645, 10.588235294117647, 'D'), (10.588235294117647, 14.117647058823529, 'D'), (14.117647058823529, 17.647058823529413, 'A'), (17.647058823529413, 21.176470588235293, 'Amaj7'), (21.176470588235293, 24.705882352941174, 'D')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7'), (7.0588235294117645, 10.588235294117647, 'D'), (10.588235294117647, 14.117647058823529, 'D'), (14.117647058823529, 17.647058823529413, 'A'), (17.647058823529413, 21.176470588235293, 'Amaj7'), (21.176470588235293, 24.705882352941174, 'D'), (24.705882352941174, 28.235294117647058, 'D')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['1', 'Cmaj7', 'D7', 'G', 'G', '100bpm', '\u0e2b\u0e21\u0e2d\u0e01\u0e08\u0e32\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 3
DEBUG:root:index = 5
DEBUG:root:bpm = 100
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['1', 'Cmaj7', 'D7', 'G', 'G']
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7'), (4.8, 7.199999999999999, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7'), (4.8, 7.199999999999999, 'G'), (7.199999999999999, 9.6, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7'), (4.8, 7.199999999999999, 'G'), (7.199999999999999, 9.6, 'G'), (9.6, 12.0, 'Cmaj7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7'), (4.8, 7.199999999999999, 'G'), (7.199999999999999, 9.6, 'G'), (9.6, 12.0, 'Cmaj7'), (12.0, 14.399999999999999, 'D7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7'), (4.8, 7.199999999999999, 'G'), (7.199999999999999, 9.6, 'G'), (9.6, 12.0, 'Cmaj7'), (12.0, 14.399999999999999, 'D7'), (14.399999999999999, 16.8, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7'), (4.8, 7.199999999999999, 'G'), (7.199999999999999, 9.6, 'G'), (9.6, 12.0, 'Cmaj7'), (12.0, 14.399999999999999, 'D7'), (14.399999999999999, 16.8, 'G'), (16.8, 19.2, 'G')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['1', 'D', 'Dmaj7', 'Em7', 'A', '79bpm', '\u0e16\u0e49\u0e32\u0e40\u0e18\u0e2d\u0e23\u0e31\u0e01\u0e09\u0e31\u0e19\u0e08\u0e23\u0e34\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:bpm = 79
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['1', 'D', 'Dmaj7', 'Em7', 'A']
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7'), (6.075949367088608, 9.113924050632912, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7'), (6.075949367088608, 9.113924050632912, 'Em7'), (9.113924050632912, 12.151898734177216, 'A')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7'), (6.075949367088608, 9.113924050632912, 'Em7'), (9.113924050632912, 12.151898734177216, 'A'), (12.151898734177216, 15.18987341772152, 'D')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7'), (6.075949367088608, 9.113924050632912, 'Em7'), (9.113924050632912, 12.151898734177216, 'A'), (12.151898734177216, 15.18987341772152, 'D'), (15.18987341772152, 18.227848101265824, 'Dmaj7')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7'), (6.075949367088608, 9.113924050632912, 'Em7'), (9.113924050632912, 12.151898734177216, 'A'), (12.151898734177216, 15.18987341772152, 'D'), (15.18987341772152, 18.227848101265824, 'Dmaj7'), (18.227848101265824, 21.265822784810126, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7'), (6.075949367088608, 9.113924050632912, 'Em7'), (9.113924050632912, 12.151898734177216, 'A'), (12.151898734177216, 15.18987341772152, 'D'), (15.18987341772152, 18.227848101265824, 'Dmaj7'), (18.227848101265824, 21.265822784810126, 'Em7'), (21.265822784810126, 24.303797468354432, 'A')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['1', 'E', 'A', 'C#m', 'A=2', 'B=2', '73bpm', '\u0e23.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:index = 6
DEBUG:root:bpm = 73
DEBUG:root:list_len = 8
DEBUG:root:all_chord after del = ['1', 'E', 'A', 'C#m', 'A=2', 'B=2']
DEBUG:root:normal length, ann = [(0.0, 3.2876712328767126, 'E')]
DEBUG:root:normal length, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A')]
DEBUG:root:normal length, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m')]
DEBUG:root:= found, special_note = ['A', '2'], tmp = 0.5, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A')]
DEBUG:root:= found, special_note = ['B', '2'], tmp = 0.5, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A'), (11.506849315068495, 13.15068493150685, 'B')]
DEBUG:root:normal length, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A'), (11.506849315068495, 13.15068493150685, 'B'), (13.15068493150685, 16.438356164383563, 'E')]
DEBUG:root:normal length, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A'), (11.506849315068495, 13.15068493150685, 'B'), (13.15068493150685, 16.438356164383563, 'E'), (16.438356164383563, 19.726027397260275, 'A')]
DEBUG:root:normal length, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A'), (11.506849315068495, 13.15068493150685, 'B'), (13.15068493150685, 16.438356164383563, 'E'), (16.438356164383563, 19.726027397260275, 'A'), (19.726027397260275, 23.01369863013699, 'C#m')]
DEBUG:root:= found, special_note = ['A', '2'], tmp = 0.5, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A'), (11.506849315068495, 13.15068493150685, 'B'), (13.15068493150685, 16.438356164383563, 'E'), (16.438356164383563, 19.726027397260275, 'A'), (19.726027397260275, 23.01369863013699, 'C#m'), (23.01369863013699, 24.657534246575345, 'A')]
DEBUG:root:= found, special_note = ['B', '2'], tmp = 0.5, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A'), (11.506849315068495, 13.15068493150685, 'B'), (13.15068493150685, 16.438356164383563, 'E'), (16.438356164383563, 19.726027397260275, 'A'), (19.726027397260275, 23.01369863013699, 'C#m'), (23.01369863013699, 24.657534246575345, 'A'), (24.657534246575345, 26.3013698630137, 'B')]
INFO:root:going out, mat_len = 5
DEBUG:root:all_chord = ['1', 'G', 'A', 'F#m7', 'Bm', '110bpm', '\u0e04\u0e38\u0e01\u0e40\u0e02\u0e48\u0e32.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:bpm = 110
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['1', 'G', 'A', 'F#m7', 'Bm']
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G'), (10.90909090909091, 13.090909090909093, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G'), (10.90909090909091, 13.090909090909093, 'A'), (13.090909090909093, 15.272727272727275, 'F#m7')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G'), (10.90909090909091, 13.090909090909093, 'A'), (13.090909090909093, 15.272727272727275, 'F#m7'), (15.272727272727275, 17.454545454545457, 'Bm')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['1', 'G', 'A', 'F#m7', 'Bm', '110bpm', '\u0e04\u0e38\u0e01\u0e40\u0e02\u0e48\u0e32', 'stutter.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:bpm = 110
DEBUG:root:list_len = 8
DEBUG:root:all_chord after del = ['1', 'G', 'A', 'F#m7', 'Bm']
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G'), (10.90909090909091, 13.090909090909093, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G'), (10.90909090909091, 13.090909090909093, 'A'), (13.090909090909093, 15.272727272727275, 'F#m7')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G'), (10.90909090909091, 13.090909090909093, 'A'), (13.090909090909093, 15.272727272727275, 'F#m7'), (15.272727272727275, 17.454545454545457, 'Bm')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['1', 'G', 'Em7', 'Cmaj7', 'D', '100bpm', '\u0e2b\u0e21\u0e2d\u0e01\u0e08\u0e32\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:bpm = 100
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['1', 'G', 'Em7', 'Cmaj7', 'D']
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7'), (4.8, 7.199999999999999, 'Cmaj7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7'), (4.8, 7.199999999999999, 'Cmaj7'), (7.199999999999999, 9.6, 'D')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7'), (4.8, 7.199999999999999, 'Cmaj7'), (7.199999999999999, 9.6, 'D'), (9.6, 12.0, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7'), (4.8, 7.199999999999999, 'Cmaj7'), (7.199999999999999, 9.6, 'D'), (9.6, 12.0, 'G'), (12.0, 14.399999999999999, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7'), (4.8, 7.199999999999999, 'Cmaj7'), (7.199999999999999, 9.6, 'D'), (9.6, 12.0, 'G'), (12.0, 14.399999999999999, 'Em7'), (14.399999999999999, 16.8, 'Cmaj7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7'), (4.8, 7.199999999999999, 'Cmaj7'), (7.199999999999999, 9.6, 'D'), (9.6, 12.0, 'G'), (12.0, 14.399999999999999, 'Em7'), (14.399999999999999, 16.8, 'Cmaj7'), (16.8, 19.2, 'D')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['2', 'C', 'Am7', 'Dm7', 'G7', 'C', 'Am7', 'Dm7', 'G7', '68bpm', '\u0e16\u0e49\u0e32.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 9
DEBUG:root:bpm = 68
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['2', 'C', 'Am7', 'Dm7', 'G7', 'C', 'Am7', 'Dm7', 'G7']
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7'), (17.647058823529413, 19.41176470588235, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7'), (17.647058823529413, 19.41176470588235, 'Dm7'), (19.41176470588235, 21.176470588235293, 'G7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7'), (17.647058823529413, 19.41176470588235, 'Dm7'), (19.41176470588235, 21.176470588235293, 'G7'), (21.176470588235293, 22.941176470588236, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7'), (17.647058823529413, 19.41176470588235, 'Dm7'), (19.41176470588235, 21.176470588235293, 'G7'), (21.176470588235293, 22.941176470588236, 'C'), (22.941176470588236, 24.705882352941174, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7'), (17.647058823529413, 19.41176470588235, 'Dm7'), (19.41176470588235, 21.176470588235293, 'G7'), (21.176470588235293, 22.941176470588236, 'C'), (22.941176470588236, 24.705882352941174, 'Am7'), (24.705882352941174, 26.470588235294116, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7'), (17.647058823529413, 19.41176470588235, 'Dm7'), (19.41176470588235, 21.176470588235293, 'G7'), (21.176470588235293, 22.941176470588236, 'C'), (22.941176470588236, 24.705882352941174, 'Am7'), (24.705882352941174, 26.470588235294116, 'Dm7'), (26.470588235294116, 28.235294117647058, 'G7')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['2', 'C', 'Em7', 'Am7', 'F', 'C', 'C7', 'Fmaj7', 'G', '65bpm', '\u0e17\u0e38\u0e49\u0e21\u0e2d\u0e22\u0e39\u0e48.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 1
DEBUG:root:index = 6
DEBUG:root:index = 7
DEBUG:root:index = 8
DEBUG:root:index = 9
DEBUG:root:bpm = 65
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['2', 'C', 'Em7', 'Am7', 'F', 'C', 'C7', 'Fmaj7', 'G']
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Am7'), (20.30769230769231, 22.153846153846153, 'F')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Am7'), (20.30769230769231, 22.153846153846153, 'F'), (22.153846153846153, 24.0, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Am7'), (20.30769230769231, 22.153846153846153, 'F'), (22.153846153846153, 24.0, 'C'), (24.0, 25.846153846153847, 'C7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Am7'), (20.30769230769231, 22.153846153846153, 'F'), (22.153846153846153, 24.0, 'C'), (24.0, 25.846153846153847, 'C7'), (25.846153846153847, 27.692307692307693, 'Fmaj7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Am7'), (20.30769230769231, 22.153846153846153, 'F'), (22.153846153846153, 24.0, 'C'), (24.0, 25.846153846153847, 'C7'), (25.846153846153847, 27.692307692307693, 'Fmaj7'), (27.692307692307693, 29.53846153846154, 'G')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['2', 'Dm7', 'Em7', 'Fmaj7', 'Em7', 'Dm7', 'C7Em7', 'G', 'G', '65bpm', '\u0e17\u0e38\u0e49\u0e21\u0e2d\u0e22\u0e39\u0e48.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 2
DEBUG:root:index = 1
DEBUG:root:index = 6
DEBUG:root:index = 7
DEBUG:root:index = 7
DEBUG:root:index = 9
DEBUG:root:bpm = 65
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['2', 'Dm7', 'Em7', 'Fmaj7', 'Em7', 'Dm7', 'C7Em7', 'G', 'G']
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G'), (12.923076923076923, 14.76923076923077, 'G')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'Dm7'), (16.615384615384617, 18.461538461538463, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'Dm7'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Fmaj7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'Dm7'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Fmaj7'), (20.30769230769231, 22.153846153846153, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'Dm7'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Fmaj7'), (20.30769230769231, 22.153846153846153, 'Em7'), (22.153846153846153, 24.0, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'Dm7'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Fmaj7'), (20.30769230769231, 22.153846153846153, 'Em7'), (22.153846153846153, 24.0, 'Dm7'), (24.0, 25.846153846153847, 'C7Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'Dm7'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Fmaj7'), (20.30769230769231, 22.153846153846153, 'Em7'), (22.153846153846153, 24.0, 'Dm7'), (24.0, 25.846153846153847, 'C7Em7'), (25.846153846153847, 27.692307692307693, 'G')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'Dm7'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Fmaj7'), (20.30769230769231, 22.153846153846153, 'Em7'), (22.153846153846153, 24.0, 'Dm7'), (24.0, 25.846153846153847, 'C7Em7'), (25.846153846153847, 27.692307692307693, 'G'), (27.692307692307693, 29.53846153846154, 'G')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['2', 'G', 'D', 'F#', 'Em7', 'D', 'C', 'Bm7', 'Am7', 'D', '76bpm', '\u0e1b\u0e35\u0e19\u0e35\u0e49\u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e40\u0e2b\u0e07\u0e32.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 2
DEBUG:root:index = 6
DEBUG:root:index = 7
DEBUG:root:index = 8
DEBUG:root:index = 2
DEBUG:root:index = 10
DEBUG:root:bpm = 76
DEBUG:root:list_len = 12
DEBUG:root:all_chord after del = ['2', 'G', 'D', 'F#', 'Em7', 'D', 'C', 'Bm7', 'Am7', 'D']
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#'), (18.94736842105263, 20.526315789473685, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#'), (18.94736842105263, 20.526315789473685, 'Em7'), (20.526315789473685, 22.105263157894736, 'D')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#'), (18.94736842105263, 20.526315789473685, 'Em7'), (20.526315789473685, 22.105263157894736, 'D'), (22.105263157894736, 23.68421052631579, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#'), (18.94736842105263, 20.526315789473685, 'Em7'), (20.526315789473685, 22.105263157894736, 'D'), (22.105263157894736, 23.68421052631579, 'C'), (23.68421052631579, 25.263157894736842, 'Bm7')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#'), (18.94736842105263, 20.526315789473685, 'Em7'), (20.526315789473685, 22.105263157894736, 'D'), (22.105263157894736, 23.68421052631579, 'C'), (23.68421052631579, 25.263157894736842, 'Bm7'), (25.263157894736842, 26.842105263157894, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#'), (18.94736842105263, 20.526315789473685, 'Em7'), (20.526315789473685, 22.105263157894736, 'D'), (22.105263157894736, 23.68421052631579, 'C'), (23.68421052631579, 25.263157894736842, 'Bm7'), (25.263157894736842, 26.842105263157894, 'Am7'), (26.842105263157894, 28.42105263157895, 'D')]
INFO:root:going out, mat_len = 9
DEBUG:root:all_chord = ['0', 'Bm', 'E', 'C#m', 'F#m', 'Bm', 'E', 'A', 'A', '110bpm', '\u0e04\u0e19\u0e43\u0e08\u0e07\u0e48\u0e32\u0e22.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 7
DEBUG:root:index = 7
DEBUG:root:index = 9
DEBUG:root:bpm = 110
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['0', 'Bm', 'E', 'C#m', 'F#m', 'Bm', 'E', 'A', 'A']
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E'), (13.090909090909093, 15.272727272727275, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E'), (13.090909090909093, 15.272727272727275, 'A'), (15.272727272727275, 17.454545454545457, 'A')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['0', 'C#m', 'B', 'C#m', 'B', 'C#m', 'B', 'A', 'B', '112bpm', '\u0e02\u0e35\u0e49\u0e2b\u0e36\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 7
DEBUG:root:index = 2
DEBUG:root:index = 9
DEBUG:root:bpm = 112
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['0', 'C#m', 'B', 'C#m', 'B', 'C#m', 'B', 'A', 'B']
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'B')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'B'), (12.857142857142858, 15.0, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'B'), (12.857142857142858, 15.0, 'A'), (15.0, 17.142857142857142, 'B')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['0', 'D', 'D', 'C#m', 'C#m', 'Bm', 'E', 'A', 'A', '110bpm', '\u0e04\u0e19\u0e43\u0e08\u0e07\u0e48\u0e32\u0e22.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 1
DEBUG:root:index = 3
DEBUG:root:index = 3
DEBUG:root:index = 5
DEBUG:root:index = 6
DEBUG:root:index = 7
DEBUG:root:index = 7
DEBUG:root:index = 9
DEBUG:root:bpm = 110
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['0', 'D', 'D', 'C#m', 'C#m', 'Bm', 'E', 'A', 'A']
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m'), (8.727272727272728, 10.90909090909091, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E'), (13.090909090909093, 15.272727272727275, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E'), (13.090909090909093, 15.272727272727275, 'A'), (15.272727272727275, 17.454545454545457, 'A')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['0', 'Em7=0.5', 'Cmaj7=0.5', 'Em7=0.5', 'Cmaj7', 'D', '86bpm', '\u0e1b\u0e25\u0e48\u0e2d\u0e22.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 1
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:index = 6
DEBUG:root:bpm = 86
DEBUG:root:list_len = 8
DEBUG:root:all_chord after del = ['0', 'Em7=0.5', 'Cmaj7=0.5', 'Em7=0.5', 'Cmaj7', 'D']
DEBUG:root:= found, special_note = ['Em7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Em7')]
DEBUG:root:= found, special_note = ['Cmaj7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Em7'), (5.5813953488372094, 11.162790697674419, 'Cmaj7')]
DEBUG:root:= found, special_note = ['Em7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Em7'), (5.5813953488372094, 11.162790697674419, 'Cmaj7'), (11.162790697674419, 16.74418604651163, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 5.5813953488372094, 'Em7'), (5.5813953488372094, 11.162790697674419, 'Cmaj7'), (11.162790697674419, 16.74418604651163, 'Em7'), (16.74418604651163, 19.53488372093023, 'Cmaj7')]
DEBUG:root:normal length, ann = [(0.0, 5.5813953488372094, 'Em7'), (5.5813953488372094, 11.162790697674419, 'Cmaj7'), (11.162790697674419, 16.74418604651163, 'Em7'), (16.74418604651163, 19.53488372093023, 'Cmaj7'), (19.53488372093023, 22.325581395348838, 'D')]
INFO:root:going out, mat_len = 5
DEBUG:root:all_chord = ['0', 'E', 'E', 'A', 'B', 'C#m', 'A', 'B', 'B', '112bpm', '\u0e02\u0e35\u0e49\u0e2b\u0e36\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 1
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 4
DEBUG:root:index = 9
DEBUG:root:bpm = 112
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['0', 'E', 'E', 'A', 'B', 'C#m', 'A', 'B', 'B']
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'A'), (6.428571428571429, 8.571428571428571, 'B')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'A'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'A'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'A'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'A'), (12.857142857142858, 15.0, 'B')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'A'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'A'), (12.857142857142858, 15.0, 'B'), (15.0, 17.142857142857142, 'B')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['0', 'E', 'E', 'G#m', 'A', 'E', 'E', 'C#m', 'B', '112bpm', '\u0e02\u0e35\u0e49\u0e2b\u0e36\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 1
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 1
DEBUG:root:index = 1
DEBUG:root:index = 7
DEBUG:root:index = 8
DEBUG:root:index = 9
DEBUG:root:bpm = 112
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['0', 'E', 'E', 'G#m', 'A', 'E', 'E', 'C#m', 'B']
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'G#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'G#m'), (6.428571428571429, 8.571428571428571, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'G#m'), (6.428571428571429, 8.571428571428571, 'A'), (8.571428571428571, 10.714285714285714, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'G#m'), (6.428571428571429, 8.571428571428571, 'A'), (8.571428571428571, 10.714285714285714, 'E'), (10.714285714285714, 12.857142857142858, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'G#m'), (6.428571428571429, 8.571428571428571, 'A'), (8.571428571428571, 10.714285714285714, 'E'), (10.714285714285714, 12.857142857142858, 'E'), (12.857142857142858, 15.0, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'G#m'), (6.428571428571429, 8.571428571428571, 'A'), (8.571428571428571, 10.714285714285714, 'E'), (10.714285714285714, 12.857142857142858, 'E'), (12.857142857142858, 15.0, 'C#m'), (15.0, 17.142857142857142, 'B')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['0', 'Fmaj7', 'Em7', 'Dm7=2', 'G7=2', 'C=2', 'C7=2', 'Fmaj7', 'Em7=2', 'Am7=2', 'Dm7', 'G', '68bpm', '\u0e16\u0e49\u0e32.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:index = 6
DEBUG:root:index = 1
DEBUG:root:index = 8
DEBUG:root:index = 9
DEBUG:root:index = 10
DEBUG:root:index = 11
DEBUG:root:index = 12
DEBUG:root:bpm = 68
DEBUG:root:list_len = 14
DEBUG:root:all_chord after del = ['0', 'Fmaj7', 'Em7', 'Dm7=2', 'G7=2', 'C=2', 'C7=2', 'Fmaj7', 'Em7=2', 'Am7=2', 'Dm7', 'G']
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7')]
DEBUG:root:= found, special_note = ['Dm7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7')]
DEBUG:root:= found, special_note = ['G7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7')]
DEBUG:root:= found, special_note = ['C', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C')]
DEBUG:root:= found, special_note = ['C7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C'), (12.352941176470587, 14.117647058823529, 'C7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C'), (12.352941176470587, 14.117647058823529, 'C7'), (14.117647058823529, 17.647058823529413, 'Fmaj7')]
DEBUG:root:= found, special_note = ['Em7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C'), (12.352941176470587, 14.117647058823529, 'C7'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7')]
DEBUG:root:= found, special_note = ['Am7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C'), (12.352941176470587, 14.117647058823529, 'C7'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C'), (12.352941176470587, 14.117647058823529, 'C7'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7'), (21.176470588235293, 24.705882352941174, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C'), (12.352941176470587, 14.117647058823529, 'C7'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7'), (21.176470588235293, 24.705882352941174, 'Dm7'), (24.705882352941174, 28.235294117647058, 'G')]
INFO:root:going out, mat_len = 11
DEBUG:root:all_chord = ['0', 'Fmaj7', 'Em7', 'Dm7=2', 'G7=2', 'C', 'Fmaj7', 'Em7=2', 'Am7=2', 'Dm7=2', 'G7=2', 'C', '68bpm', '\u0e16\u0e49\u0e32.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:index = 1
DEBUG:root:index = 7
DEBUG:root:index = 8
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:index = 12
DEBUG:root:bpm = 68
DEBUG:root:list_len = 14
DEBUG:root:all_chord after del = ['0', 'Fmaj7', 'Em7', 'Dm7=2', 'G7=2', 'C', 'Fmaj7', 'Em7=2', 'Am7=2', 'Dm7=2', 'G7=2', 'C']
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7')]
DEBUG:root:= found, special_note = ['Dm7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7')]
DEBUG:root:= found, special_note = ['G7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C'), (14.117647058823529, 17.647058823529413, 'Fmaj7')]
DEBUG:root:= found, special_note = ['Em7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7')]
DEBUG:root:= found, special_note = ['Am7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7')]
DEBUG:root:= found, special_note = ['Dm7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7'), (21.176470588235293, 22.941176470588236, 'Dm7')]
DEBUG:root:= found, special_note = ['G7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7'), (21.176470588235293, 22.941176470588236, 'Dm7'), (22.941176470588236, 24.705882352941174, 'G7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7'), (21.176470588235293, 22.941176470588236, 'Dm7'), (22.941176470588236, 24.705882352941174, 'G7'), (24.705882352941174, 28.235294117647058, 'C')]
INFO:root:going out, mat_len = 11
DEBUG:root:all_chord = ['0', 'G=0.5', 'Em7=0.5', 'C=0.5', 'D=0.5', '86bpm', '\u0e1b\u0e25\u0e48\u0e2d\u0e22.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:bpm = 86
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['0', 'G=0.5', 'Em7=0.5', 'C=0.5', 'D=0.5']
DEBUG:root:= found, special_note = ['G', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'G')]
DEBUG:root:= found, special_note = ['Em7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'G'), (5.5813953488372094, 11.162790697674419, 'Em7')]
DEBUG:root:= found, special_note = ['C', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'G'), (5.5813953488372094, 11.162790697674419, 'Em7'), (11.162790697674419, 16.74418604651163, 'C')]
DEBUG:root:= found, special_note = ['D', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'G'), (5.5813953488372094, 11.162790697674419, 'Em7'), (11.162790697674419, 16.74418604651163, 'C'), (16.74418604651163, 22.325581395348838, 'D')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['0', 'Gmaj7=0.5', 'Em7=0.5', 'Cmaj7=0.5', 'D=0.5', '86bpm', '\u0e1b\u0e25\u0e48\u0e2d\u0e22.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:bpm = 86
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['0', 'Gmaj7=0.5', 'Em7=0.5', 'Cmaj7=0.5', 'D=0.5']
DEBUG:root:= found, special_note = ['Gmaj7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Gmaj7')]
DEBUG:root:= found, special_note = ['Em7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Gmaj7'), (5.5813953488372094, 11.162790697674419, 'Em7')]
DEBUG:root:= found, special_note = ['Cmaj7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Gmaj7'), (5.5813953488372094, 11.162790697674419, 'Em7'), (11.162790697674419, 16.74418604651163, 'Cmaj7')]
DEBUG:root:= found, special_note = ['D', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Gmaj7'), (5.5813953488372094, 11.162790697674419, 'Em7'), (11.162790697674419, 16.74418604651163, 'Cmaj7'), (16.74418604651163, 22.325581395348838, 'D')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['1', 'A', 'Amaj7', 'D', 'D', '68bpm', '\u0e19\u0e30\u0e2b\u0e19\u0e49\u0e32\u0e18\u0e2d\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 3
DEBUG:root:index = 5
DEBUG:root:bpm = 68
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['1', 'A', 'Amaj7', 'D', 'D']
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7'), (7.0588235294117645, 10.588235294117647, 'D')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7'), (7.0588235294117645, 10.588235294117647, 'D'), (10.588235294117647, 14.117647058823529, 'D')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7'), (7.0588235294117645, 10.588235294117647, 'D'), (10.588235294117647, 14.117647058823529, 'D'), (14.117647058823529, 17.647058823529413, 'A')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7'), (7.0588235294117645, 10.588235294117647, 'D'), (10.588235294117647, 14.117647058823529, 'D'), (14.117647058823529, 17.647058823529413, 'A'), (17.647058823529413, 21.176470588235293, 'Amaj7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7'), (7.0588235294117645, 10.588235294117647, 'D'), (10.588235294117647, 14.117647058823529, 'D'), (14.117647058823529, 17.647058823529413, 'A'), (17.647058823529413, 21.176470588235293, 'Amaj7'), (21.176470588235293, 24.705882352941174, 'D')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7'), (7.0588235294117645, 10.588235294117647, 'D'), (10.588235294117647, 14.117647058823529, 'D'), (14.117647058823529, 17.647058823529413, 'A'), (17.647058823529413, 21.176470588235293, 'Amaj7'), (21.176470588235293, 24.705882352941174, 'D'), (24.705882352941174, 28.235294117647058, 'D')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['1', 'Cmaj7', 'D7', 'G', 'G', '100bpm', '\u0e2b\u0e21\u0e2d\u0e01\u0e08\u0e32\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 3
DEBUG:root:index = 5
DEBUG:root:bpm = 100
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['1', 'Cmaj7', 'D7', 'G', 'G']
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7'), (4.8, 7.199999999999999, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7'), (4.8, 7.199999999999999, 'G'), (7.199999999999999, 9.6, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7'), (4.8, 7.199999999999999, 'G'), (7.199999999999999, 9.6, 'G'), (9.6, 12.0, 'Cmaj7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7'), (4.8, 7.199999999999999, 'G'), (7.199999999999999, 9.6, 'G'), (9.6, 12.0, 'Cmaj7'), (12.0, 14.399999999999999, 'D7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7'), (4.8, 7.199999999999999, 'G'), (7.199999999999999, 9.6, 'G'), (9.6, 12.0, 'Cmaj7'), (12.0, 14.399999999999999, 'D7'), (14.399999999999999, 16.8, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7'), (4.8, 7.199999999999999, 'G'), (7.199999999999999, 9.6, 'G'), (9.6, 12.0, 'Cmaj7'), (12.0, 14.399999999999999, 'D7'), (14.399999999999999, 16.8, 'G'), (16.8, 19.2, 'G')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['1', 'D', 'Dmaj7', 'Em7', 'A', '79bpm', '\u0e16\u0e49\u0e32\u0e40\u0e18\u0e2d\u0e23\u0e31\u0e01\u0e09\u0e31\u0e19\u0e08\u0e23\u0e34\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:bpm = 79
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['1', 'D', 'Dmaj7', 'Em7', 'A']
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7'), (6.075949367088608, 9.113924050632912, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7'), (6.075949367088608, 9.113924050632912, 'Em7'), (9.113924050632912, 12.151898734177216, 'A')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7'), (6.075949367088608, 9.113924050632912, 'Em7'), (9.113924050632912, 12.151898734177216, 'A'), (12.151898734177216, 15.18987341772152, 'D')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7'), (6.075949367088608, 9.113924050632912, 'Em7'), (9.113924050632912, 12.151898734177216, 'A'), (12.151898734177216, 15.18987341772152, 'D'), (15.18987341772152, 18.227848101265824, 'Dmaj7')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7'), (6.075949367088608, 9.113924050632912, 'Em7'), (9.113924050632912, 12.151898734177216, 'A'), (12.151898734177216, 15.18987341772152, 'D'), (15.18987341772152, 18.227848101265824, 'Dmaj7'), (18.227848101265824, 21.265822784810126, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7'), (6.075949367088608, 9.113924050632912, 'Em7'), (9.113924050632912, 12.151898734177216, 'A'), (12.151898734177216, 15.18987341772152, 'D'), (15.18987341772152, 18.227848101265824, 'Dmaj7'), (18.227848101265824, 21.265822784810126, 'Em7'), (21.265822784810126, 24.303797468354432, 'A')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['1', 'E', 'A', 'C#m', 'A=2', 'B=2', '73bpm', '\u0e23.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:index = 6
DEBUG:root:bpm = 73
DEBUG:root:list_len = 8
DEBUG:root:all_chord after del = ['1', 'E', 'A', 'C#m', 'A=2', 'B=2']
DEBUG:root:normal length, ann = [(0.0, 3.2876712328767126, 'E')]
DEBUG:root:normal length, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A')]
DEBUG:root:normal length, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m')]
DEBUG:root:= found, special_note = ['A', '2'], tmp = 0.5, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A')]
DEBUG:root:= found, special_note = ['B', '2'], tmp = 0.5, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A'), (11.506849315068495, 13.15068493150685, 'B')]
DEBUG:root:normal length, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A'), (11.506849315068495, 13.15068493150685, 'B'), (13.15068493150685, 16.438356164383563, 'E')]
DEBUG:root:normal length, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A'), (11.506849315068495, 13.15068493150685, 'B'), (13.15068493150685, 16.438356164383563, 'E'), (16.438356164383563, 19.726027397260275, 'A')]
DEBUG:root:normal length, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A'), (11.506849315068495, 13.15068493150685, 'B'), (13.15068493150685, 16.438356164383563, 'E'), (16.438356164383563, 19.726027397260275, 'A'), (19.726027397260275, 23.01369863013699, 'C#m')]
DEBUG:root:= found, special_note = ['A', '2'], tmp = 0.5, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A'), (11.506849315068495, 13.15068493150685, 'B'), (13.15068493150685, 16.438356164383563, 'E'), (16.438356164383563, 19.726027397260275, 'A'), (19.726027397260275, 23.01369863013699, 'C#m'), (23.01369863013699, 24.657534246575345, 'A')]
DEBUG:root:= found, special_note = ['B', '2'], tmp = 0.5, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A'), (11.506849315068495, 13.15068493150685, 'B'), (13.15068493150685, 16.438356164383563, 'E'), (16.438356164383563, 19.726027397260275, 'A'), (19.726027397260275, 23.01369863013699, 'C#m'), (23.01369863013699, 24.657534246575345, 'A'), (24.657534246575345, 26.3013698630137, 'B')]
INFO:root:going out, mat_len = 5
DEBUG:root:all_chord = ['1', 'G', 'A', 'F#m7', 'Bm', '110bpm', '\u0e04\u0e38\u0e01\u0e40\u0e02\u0e48\u0e32.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:bpm = 110
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['1', 'G', 'A', 'F#m7', 'Bm']
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G'), (10.90909090909091, 13.090909090909093, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G'), (10.90909090909091, 13.090909090909093, 'A'), (13.090909090909093, 15.272727272727275, 'F#m7')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G'), (10.90909090909091, 13.090909090909093, 'A'), (13.090909090909093, 15.272727272727275, 'F#m7'), (15.272727272727275, 17.454545454545457, 'Bm')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['1', 'G', 'A', 'F#m7', 'Bm', '110bpm', '\u0e04\u0e38\u0e01\u0e40\u0e02\u0e48\u0e32', 'stutter.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:bpm = 110
DEBUG:root:list_len = 8
DEBUG:root:all_chord after del = ['1', 'G', 'A', 'F#m7', 'Bm']
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G'), (10.90909090909091, 13.090909090909093, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G'), (10.90909090909091, 13.090909090909093, 'A'), (13.090909090909093, 15.272727272727275, 'F#m7')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G'), (10.90909090909091, 13.090909090909093, 'A'), (13.090909090909093, 15.272727272727275, 'F#m7'), (15.272727272727275, 17.454545454545457, 'Bm')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['1', 'G', 'Em7', 'Cmaj7', 'D', '100bpm', '\u0e2b\u0e21\u0e2d\u0e01\u0e08\u0e32\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:bpm = 100
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['1', 'G', 'Em7', 'Cmaj7', 'D']
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7'), (4.8, 7.199999999999999, 'Cmaj7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7'), (4.8, 7.199999999999999, 'Cmaj7'), (7.199999999999999, 9.6, 'D')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7'), (4.8, 7.199999999999999, 'Cmaj7'), (7.199999999999999, 9.6, 'D'), (9.6, 12.0, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7'), (4.8, 7.199999999999999, 'Cmaj7'), (7.199999999999999, 9.6, 'D'), (9.6, 12.0, 'G'), (12.0, 14.399999999999999, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7'), (4.8, 7.199999999999999, 'Cmaj7'), (7.199999999999999, 9.6, 'D'), (9.6, 12.0, 'G'), (12.0, 14.399999999999999, 'Em7'), (14.399999999999999, 16.8, 'Cmaj7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7'), (4.8, 7.199999999999999, 'Cmaj7'), (7.199999999999999, 9.6, 'D'), (9.6, 12.0, 'G'), (12.0, 14.399999999999999, 'Em7'), (14.399999999999999, 16.8, 'Cmaj7'), (16.8, 19.2, 'D')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['2', 'C', 'Am7', 'Dm7', 'G7', 'C', 'Am7', 'Dm7', 'G7', '68bpm', '\u0e16\u0e49\u0e32.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 9
DEBUG:root:bpm = 68
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['2', 'C', 'Am7', 'Dm7', 'G7', 'C', 'Am7', 'Dm7', 'G7']
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7'), (17.647058823529413, 19.41176470588235, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7'), (17.647058823529413, 19.41176470588235, 'Dm7'), (19.41176470588235, 21.176470588235293, 'G7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7'), (17.647058823529413, 19.41176470588235, 'Dm7'), (19.41176470588235, 21.176470588235293, 'G7'), (21.176470588235293, 22.941176470588236, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7'), (17.647058823529413, 19.41176470588235, 'Dm7'), (19.41176470588235, 21.176470588235293, 'G7'), (21.176470588235293, 22.941176470588236, 'C'), (22.941176470588236, 24.705882352941174, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7'), (17.647058823529413, 19.41176470588235, 'Dm7'), (19.41176470588235, 21.176470588235293, 'G7'), (21.176470588235293, 22.941176470588236, 'C'), (22.941176470588236, 24.705882352941174, 'Am7'), (24.705882352941174, 26.470588235294116, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7'), (17.647058823529413, 19.41176470588235, 'Dm7'), (19.41176470588235, 21.176470588235293, 'G7'), (21.176470588235293, 22.941176470588236, 'C'), (22.941176470588236, 24.705882352941174, 'Am7'), (24.705882352941174, 26.470588235294116, 'Dm7'), (26.470588235294116, 28.235294117647058, 'G7')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['2', 'C', 'Em7', 'Am7', 'F', 'C', 'C7', 'Fmaj7', 'G', '65bpm', '\u0e17\u0e38\u0e49\u0e21\u0e2d\u0e22\u0e39\u0e48.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 1
DEBUG:root:index = 6
DEBUG:root:index = 7
DEBUG:root:index = 8
DEBUG:root:index = 9
DEBUG:root:bpm = 65
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['2', 'C', 'Em7', 'Am7', 'F', 'C', 'C7', 'Fmaj7', 'G']
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Am7'), (20.30769230769231, 22.153846153846153, 'F')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Am7'), (20.30769230769231, 22.153846153846153, 'F'), (22.153846153846153, 24.0, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Am7'), (20.30769230769231, 22.153846153846153, 'F'), (22.153846153846153, 24.0, 'C'), (24.0, 25.846153846153847, 'C7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Am7'), (20.30769230769231, 22.153846153846153, 'F'), (22.153846153846153, 24.0, 'C'), (24.0, 25.846153846153847, 'C7'), (25.846153846153847, 27.692307692307693, 'Fmaj7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Am7'), (20.30769230769231, 22.153846153846153, 'F'), (22.153846153846153, 24.0, 'C'), (24.0, 25.846153846153847, 'C7'), (25.846153846153847, 27.692307692307693, 'Fmaj7'), (27.692307692307693, 29.53846153846154, 'G')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['2', 'Dm7', 'Em7', 'Fmaj7', 'Em7', 'Dm7', 'C7Em7', 'G', 'G', '65bpm', '\u0e17\u0e38\u0e49\u0e21\u0e2d\u0e22\u0e39\u0e48.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 2
DEBUG:root:index = 1
DEBUG:root:index = 6
DEBUG:root:index = 7
DEBUG:root:index = 7
DEBUG:root:index = 9
DEBUG:root:bpm = 65
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['2', 'Dm7', 'Em7', 'Fmaj7', 'Em7', 'Dm7', 'C7Em7', 'G', 'G']
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G'), (12.923076923076923, 14.76923076923077, 'G')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'Dm7'), (16.615384615384617, 18.461538461538463, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'Dm7'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Fmaj7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'Dm7'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Fmaj7'), (20.30769230769231, 22.153846153846153, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'Dm7'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Fmaj7'), (20.30769230769231, 22.153846153846153, 'Em7'), (22.153846153846153, 24.0, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'Dm7'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Fmaj7'), (20.30769230769231, 22.153846153846153, 'Em7'), (22.153846153846153, 24.0, 'Dm7'), (24.0, 25.846153846153847, 'C7Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'Dm7'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Fmaj7'), (20.30769230769231, 22.153846153846153, 'Em7'), (22.153846153846153, 24.0, 'Dm7'), (24.0, 25.846153846153847, 'C7Em7'), (25.846153846153847, 27.692307692307693, 'G')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7Em7'), (11.076923076923077, 12.923076923076923, 'G'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'Dm7'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Fmaj7'), (20.30769230769231, 22.153846153846153, 'Em7'), (22.153846153846153, 24.0, 'Dm7'), (24.0, 25.846153846153847, 'C7Em7'), (25.846153846153847, 27.692307692307693, 'G'), (27.692307692307693, 29.53846153846154, 'G')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['2', 'G', 'D', 'F#', 'Em7', 'D', 'C', 'Bm7', 'Am7', 'D', '76bpm', '\u0e1b\u0e35\u0e19\u0e35\u0e49\u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e40\u0e2b\u0e07\u0e32.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 2
DEBUG:root:index = 6
DEBUG:root:index = 7
DEBUG:root:index = 8
DEBUG:root:index = 2
DEBUG:root:index = 10
DEBUG:root:bpm = 76
DEBUG:root:list_len = 12
DEBUG:root:all_chord after del = ['2', 'G', 'D', 'F#', 'Em7', 'D', 'C', 'Bm7', 'Am7', 'D']
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#'), (18.94736842105263, 20.526315789473685, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#'), (18.94736842105263, 20.526315789473685, 'Em7'), (20.526315789473685, 22.105263157894736, 'D')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#'), (18.94736842105263, 20.526315789473685, 'Em7'), (20.526315789473685, 22.105263157894736, 'D'), (22.105263157894736, 23.68421052631579, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#'), (18.94736842105263, 20.526315789473685, 'Em7'), (20.526315789473685, 22.105263157894736, 'D'), (22.105263157894736, 23.68421052631579, 'C'), (23.68421052631579, 25.263157894736842, 'Bm7')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#'), (18.94736842105263, 20.526315789473685, 'Em7'), (20.526315789473685, 22.105263157894736, 'D'), (22.105263157894736, 23.68421052631579, 'C'), (23.68421052631579, 25.263157894736842, 'Bm7'), (25.263157894736842, 26.842105263157894, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#'), (18.94736842105263, 20.526315789473685, 'Em7'), (20.526315789473685, 22.105263157894736, 'D'), (22.105263157894736, 23.68421052631579, 'C'), (23.68421052631579, 25.263157894736842, 'Bm7'), (25.263157894736842, 26.842105263157894, 'Am7'), (26.842105263157894, 28.42105263157895, 'D')]
INFO:root:going out, mat_len = 9
INFO:root:res = E, chord = E
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = B, chord = B
INFO:root:res = C#m, chord = C#m
INFO:root:res = B, chord = B
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = D, chord = D
INFO:root:res = D, chord = D
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = A, chord = A
INFO:root:res = D, chord = D
INFO:root:res = E, chord = E
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = B, chord = B
INFO:root:res = E, chord = E
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = E, chord = E
INFO:root:res = E, chord = E
INFO:root:res = B, chord = B
INFO:root:7 res = G, chord = G7=2
INFO:root:m7 res = Em, chord = Em7=2
INFO:root:res = G, chord = G
INFO:root:7 res = G, chord = G7=2
INFO:root:7 res = G, chord = G7=2
INFO:root:res = A, chord = A
INFO:root:res = D, chord = D
INFO:root:res = D, chord = D
INFO:root:res = G, chord = G
INFO:root:res = G, chord = G
INFO:root:res = D, chord = D
INFO:root:res = A, chord = A
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = G, chord = G
INFO:root:res = A, chord = A
INFO:root:res = G, chord = G
INFO:root:res = A, chord = A
INFO:root:res = G, chord = G
INFO:root:m7 res = Em, chord = Em7
INFO:root:res = D, chord = D
INFO:root:res = C, chord = C
INFO:root:7 res = G, chord = G7
INFO:root:7 res = G, chord = G7
INFO:root:res = C, chord = C
INFO:root:res = F, chord = F
INFO:root:res = C, chord = C
INFO:root:7 res = C, chord = C7
INFO:root:res = G, chord = G
INFO:root:res = G, chord = G
INFO:root:res = G, chord = G
INFO:root:res = G, chord = G
INFO:root:res = D, chord = D
INFO:root:res = E, chord = E
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = B, chord = B
INFO:root:res = C#m, chord = C#m
INFO:root:res = B, chord = B
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = D, chord = D
INFO:root:res = D, chord = D
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = A, chord = A
INFO:root:res = D, chord = D
INFO:root:res = E, chord = E
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = B, chord = B
INFO:root:res = E, chord = E
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = E, chord = E
INFO:root:res = E, chord = E
INFO:root:res = B, chord = B
INFO:root:7 res = G, chord = G7
INFO:root:m7 res = Em, chord = Em7
INFO:root:res = G, chord = G
INFO:root:7 res = G, chord = G7
INFO:root:7 res = G, chord = G7
INFO:root:res = G, chord = G
INFO:root:res = C, chord = C
INFO:root:res = D, chord = D
INFO:root:res = D, chord = D
INFO:root:res = A, chord = A
INFO:root:res = D, chord = D
INFO:root:res = D, chord = D
INFO:root:res = G, chord = G
INFO:root:res = G, chord = G
INFO:root:res = D, chord = D
INFO:root:res = A, chord = A
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = G, chord = G
INFO:root:res = A, chord = A
INFO:root:res = G, chord = G
INFO:root:res = A, chord = A
INFO:root:res = G, chord = G
INFO:root:m7 res = Em, chord = Em7
INFO:root:res = D, chord = D
INFO:root:res = C, chord = C
INFO:root:7 res = G, chord = G7
INFO:root:7 res = G, chord = G7
INFO:root:res = C, chord = C
INFO:root:res = F, chord = F
INFO:root:res = C, chord = C
INFO:root:7 res = C, chord = C7
INFO:root:res = G, chord = G
INFO:root:res = G, chord = G
INFO:root:res = G, chord = G
INFO:root:res = G, chord = G
INFO:root:res = D, chord = D
INFO:root:res = E, chord = E
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = B, chord = B
INFO:root:res = C#m, chord = C#m
INFO:root:res = B, chord = B
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = D, chord = D
INFO:root:res = D, chord = D
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = A, chord = A
INFO:root:res = D, chord = D
INFO:root:res = E, chord = E
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = B, chord = B
INFO:root:res = E, chord = E
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = E, chord = E
INFO:root:res = E, chord = E
INFO:root:res = B, chord = B
INFO:root:7 res = G, chord = G7
INFO:root:m7 res = Em, chord = Em7
INFO:root:res = G, chord = G
INFO:root:7 res = G, chord = G7
INFO:root:7 res = G, chord = G7
INFO:root:res = G, chord = G
INFO:root:res = C, chord = C
INFO:root:res = D, chord = D
INFO:root:res = D, chord = D
INFO:root:res = A, chord = A
INFO:root:res = D, chord = D
INFO:root:res = D, chord = D
INFO:root:res = G, chord = G
INFO:root:res = G, chord = G
INFO:root:res = D, chord = D
INFO:root:res = A, chord = A
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = G, chord = G
INFO:root:res = A, chord = A
INFO:root:res = G, chord = G
INFO:root:res = A, chord = A
INFO:root:res = G, chord = G
INFO:root:m7 res = Em, chord = Em7
INFO:root:res = D, chord = D
INFO:root:res = C, chord = C
INFO:root:7 res = G, chord = G7
INFO:root:7 res = G, chord = G7
INFO:root:res = C, chord = C
INFO:root:res = F, chord = F
INFO:root:res = C, chord = C
INFO:root:7 res = C, chord = C7
INFO:root:res = G, chord = G
INFO:root:res = G, chord = G
INFO:root:res = G, chord = G
INFO:root:res = G, chord = G
INFO:root:res = D, chord = D
INFO:root:res = E, chord = E
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = B, chord = B
INFO:root:res = C#m, chord = C#m
INFO:root:res = B, chord = B
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = D, chord = D
INFO:root:res = D, chord = D
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = A, chord = A
INFO:root:res = D, chord = D
INFO:root:res = E, chord = E
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = B, chord = B
INFO:root:res = E, chord = E
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = E, chord = E
INFO:root:res = E, chord = E
INFO:root:res = B, chord = B
INFO:root:7 res = G, chord = G7
INFO:root:m7 res = Em, chord = Em7
INFO:root:res = G, chord = G
INFO:root:7 res = G, chord = G7
INFO:root:7 res = G, chord = G7
INFO:root:res = G, chord = G
INFO:root:res = C, chord = C
INFO:root:res = D, chord = D
INFO:root:res = D, chord = D
INFO:root:res = A, chord = A
INFO:root:res = D, chord = D
INFO:root:res = D, chord = D
INFO:root:res = G, chord = G
INFO:root:res = G, chord = G
INFO:root:res = D, chord = D
INFO:root:res = A, chord = A
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = G, chord = G
INFO:root:res = A, chord = A
INFO:root:res = G, chord = G
INFO:root:res = A, chord = A
INFO:root:res = G, chord = G
INFO:root:m7 res = Em, chord = Em7
INFO:root:res = D, chord = D
INFO:root:res = C, chord = C
INFO:root:7 res = G, chord = G7
INFO:root:7 res = G, chord = G7
INFO:root:res = C, chord = C
INFO:root:res = F, chord = F
INFO:root:res = C, chord = C
INFO:root:7 res = C, chord = C7
INFO:root:res = G, chord = G
INFO:root:res = G, chord = G
INFO:root:res = G, chord = G
INFO:root:res = G, chord = G
INFO:root:res = D, chord = D
INFO:root:res = E, chord = E
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = B, chord = B
INFO:root:res = C#m, chord = C#m
INFO:root:res = B, chord = B
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = D, chord = D
INFO:root:res = D, chord = D
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = A, chord = A
INFO:root:res = D, chord = D
INFO:root:res = E, chord = E
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = B, chord = B
INFO:root:res = E, chord = E
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = E, chord = E
INFO:root:res = E, chord = E
INFO:root:res = B, chord = B
INFO:root:7 res = G, chord = G7
INFO:root:m7 res = Em, chord = Em7
INFO:root:res = G, chord = G
INFO:root:7 res = G, chord = G7
INFO:root:7 res = G, chord = G7
INFO:root:res = G, chord = G
INFO:root:res = C, chord = C
INFO:root:res = D, chord = D
INFO:root:res = D, chord = D
INFO:root:res = A, chord = A
INFO:root:res = D, chord = D
INFO:root:res = D, chord = D
INFO:root:res = G, chord = G
INFO:root:res = G, chord = G
INFO:root:res = D, chord = D
INFO:root:res = A, chord = A
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = G, chord = G
INFO:root:res = A, chord = A
INFO:root:res = G, chord = G
INFO:root:res = A, chord = A
INFO:root:res = G, chord = G
INFO:root:m7 res = Em, chord = Em7
INFO:root:res = D, chord = D
INFO:root:res = C, chord = C
INFO:root:7 res = G, chord = G7
INFO:root:7 res = G, chord = G7
INFO:root:res = C, chord = C
INFO:root:res = F, chord = F
INFO:root:res = C, chord = C
INFO:root:7 res = C, chord = C7
INFO:root:res = G, chord = G
INFO:root:res = G, chord = G
INFO:root:res = G, chord = G
INFO:root:res = G, chord = G
INFO:root:res = D, chord = D
INFO:root:res = E, chord = E
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = B, chord = B
INFO:root:res = C#m, chord = C#m
INFO:root:res = B, chord = B
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = D, chord = D
INFO:root:res = D, chord = D
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = A, chord = A
INFO:root:res = D, chord = D
INFO:root:res = E, chord = E
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = B, chord = B
INFO:root:res = E, chord = E
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = E, chord = E
INFO:root:res = E, chord = E
INFO:root:res = B, chord = B
INFO:root:7 res = G, chord = G7
INFO:root:m7 res = Em, chord = Em7
INFO:root:res = G, chord = G
INFO:root:7 res = G, chord = G7
INFO:root:7 res = G, chord = G7
INFO:root:res = G, chord = G
INFO:root:res = C, chord = C
INFO:root:res = D, chord = D
INFO:root:res = D, chord = D
INFO:root:res = A, chord = A
INFO:root:res = D, chord = D
INFO:root:res = D, chord = D
INFO:root:res = G, chord = G
INFO:root:res = G, chord = G
INFO:root:res = D, chord = D
INFO:root:res = A, chord = A
INFO:root:res = E, chord = E
INFO:root:res = A, chord = A
INFO:root:res = A, chord = A
INFO:root:res = B, chord = B
INFO:root:res = G, chord = G
INFO:root:res = A, chord = A
INFO:root:res = G, chord = G
INFO:root:res = A, chord = A
INFO:root:res = G, chord = G
INFO:root:m7 res = Em, chord = Em7
INFO:root:res = D, chord = D
INFO:root:res = C, chord = C
INFO:root:7 res = G, chord = G7
INFO:root:7 res = G, chord = G7
INFO:root:res = C, chord = C
INFO:root:res = F, chord = F
INFO:root:res = C, chord = C
INFO:root:7 res = C, chord = C7
INFO:root:res = G, chord = G
INFO:root:res = G, chord = G
INFO:root:res = G, chord = G
INFO:root:res = G, chord = G
INFO:root:res = D, chord = D
DEBUG:root:all_chord = ['0', 'Bm', 'E', 'C#m', 'F#m', 'Bm', 'E', 'A', 'A', '110bpm', '\u0e04\u0e19\u0e43\u0e08\u0e07\u0e48\u0e32\u0e22.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 7
DEBUG:root:index = 7
DEBUG:root:index = 9
DEBUG:root:bpm = 110
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['0', 'Bm', 'E', 'C#m', 'F#m', 'Bm', 'E', 'A', 'A']
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E'), (13.090909090909093, 15.272727272727275, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'Bm'), (2.181818181818182, 4.363636363636364, 'E'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'F#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E'), (13.090909090909093, 15.272727272727275, 'A'), (15.272727272727275, 17.454545454545457, 'A')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['0', 'C#m', 'B', 'C#m', 'B', 'C#m', 'B', 'A', 'B', '112bpm', '\u0e02\u0e35\u0e49\u0e2b\u0e36\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 7
DEBUG:root:index = 2
DEBUG:root:index = 9
DEBUG:root:bpm = 112
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['0', 'C#m', 'B', 'C#m', 'B', 'C#m', 'B', 'A', 'B']
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'B')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'B'), (12.857142857142858, 15.0, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'C#m'), (2.142857142857143, 4.285714285714286, 'B'), (4.285714285714286, 6.428571428571429, 'C#m'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'B'), (12.857142857142858, 15.0, 'A'), (15.0, 17.142857142857142, 'B')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['0', 'D', 'D', 'C#m', 'C#m', 'Bm', 'E', 'A', 'A', '110bpm', '\u0e04\u0e19\u0e43\u0e08\u0e07\u0e48\u0e32\u0e22.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 1
DEBUG:root:index = 3
DEBUG:root:index = 3
DEBUG:root:index = 5
DEBUG:root:index = 6
DEBUG:root:index = 7
DEBUG:root:index = 7
DEBUG:root:index = 9
DEBUG:root:bpm = 110
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['0', 'D', 'D', 'C#m', 'C#m', 'Bm', 'E', 'A', 'A']
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m'), (8.727272727272728, 10.90909090909091, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E'), (13.090909090909093, 15.272727272727275, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'D'), (2.181818181818182, 4.363636363636364, 'D'), (4.363636363636364, 6.545454545454547, 'C#m'), (6.545454545454547, 8.727272727272728, 'C#m'), (8.727272727272728, 10.90909090909091, 'Bm'), (10.90909090909091, 13.090909090909093, 'E'), (13.090909090909093, 15.272727272727275, 'A'), (15.272727272727275, 17.454545454545457, 'A')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['0', 'Em7=0.5', 'Cmaj7=0.5', 'Em7=0.5', 'Cmaj7', 'D', '86bpm', '\u0e1b\u0e25\u0e48\u0e2d\u0e22.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 1
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:index = 6
DEBUG:root:bpm = 86
DEBUG:root:list_len = 8
DEBUG:root:all_chord after del = ['0', 'Em7=0.5', 'Cmaj7=0.5', 'Em7=0.5', 'Cmaj7', 'D']
DEBUG:root:= found, special_note = ['Em7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Em7')]
DEBUG:root:= found, special_note = ['Cmaj7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Em7'), (5.5813953488372094, 11.162790697674419, 'Cmaj7')]
DEBUG:root:= found, special_note = ['Em7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Em7'), (5.5813953488372094, 11.162790697674419, 'Cmaj7'), (11.162790697674419, 16.74418604651163, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 5.5813953488372094, 'Em7'), (5.5813953488372094, 11.162790697674419, 'Cmaj7'), (11.162790697674419, 16.74418604651163, 'Em7'), (16.74418604651163, 19.53488372093023, 'Cmaj7')]
DEBUG:root:normal length, ann = [(0.0, 5.5813953488372094, 'Em7'), (5.5813953488372094, 11.162790697674419, 'Cmaj7'), (11.162790697674419, 16.74418604651163, 'Em7'), (16.74418604651163, 19.53488372093023, 'Cmaj7'), (19.53488372093023, 22.325581395348838, 'D')]
INFO:root:going out, mat_len = 5
DEBUG:root:all_chord = ['0', 'E', 'E', 'A', 'B', 'C#m', 'A', 'B', 'B', '112bpm', '\u0e02\u0e35\u0e49\u0e2b\u0e36\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 1
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 4
DEBUG:root:index = 9
DEBUG:root:bpm = 112
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['0', 'E', 'E', 'A', 'B', 'C#m', 'A', 'B', 'B']
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'A'), (6.428571428571429, 8.571428571428571, 'B')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'A'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'A'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'A'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'A'), (12.857142857142858, 15.0, 'B')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'A'), (6.428571428571429, 8.571428571428571, 'B'), (8.571428571428571, 10.714285714285714, 'C#m'), (10.714285714285714, 12.857142857142858, 'A'), (12.857142857142858, 15.0, 'B'), (15.0, 17.142857142857142, 'B')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['0', 'E', 'E', 'G#m', 'A', 'E', 'E', 'C#m', 'B', '112bpm', '\u0e02\u0e35\u0e49\u0e2b\u0e36\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 1
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 1
DEBUG:root:index = 1
DEBUG:root:index = 7
DEBUG:root:index = 8
DEBUG:root:index = 9
DEBUG:root:bpm = 112
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['0', 'E', 'E', 'G#m', 'A', 'E', 'E', 'C#m', 'B']
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'G#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'G#m'), (6.428571428571429, 8.571428571428571, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'G#m'), (6.428571428571429, 8.571428571428571, 'A'), (8.571428571428571, 10.714285714285714, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'G#m'), (6.428571428571429, 8.571428571428571, 'A'), (8.571428571428571, 10.714285714285714, 'E'), (10.714285714285714, 12.857142857142858, 'E')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'G#m'), (6.428571428571429, 8.571428571428571, 'A'), (8.571428571428571, 10.714285714285714, 'E'), (10.714285714285714, 12.857142857142858, 'E'), (12.857142857142858, 15.0, 'C#m')]
DEBUG:root:normal length, ann = [(0.0, 2.142857142857143, 'E'), (2.142857142857143, 4.285714285714286, 'E'), (4.285714285714286, 6.428571428571429, 'G#m'), (6.428571428571429, 8.571428571428571, 'A'), (8.571428571428571, 10.714285714285714, 'E'), (10.714285714285714, 12.857142857142858, 'E'), (12.857142857142858, 15.0, 'C#m'), (15.0, 17.142857142857142, 'B')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['0', 'Fmaj7', 'Em7', 'Dm7=2', 'G7=2', 'C=2', 'C7=2', 'Fmaj7', 'Em7=2', 'Am7=2', 'Dm7', 'G', '68bpm', '\u0e16\u0e49\u0e32.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:index = 6
DEBUG:root:index = 1
DEBUG:root:index = 8
DEBUG:root:index = 9
DEBUG:root:index = 10
DEBUG:root:index = 11
DEBUG:root:index = 12
DEBUG:root:bpm = 68
DEBUG:root:list_len = 14
DEBUG:root:all_chord after del = ['0', 'Fmaj7', 'Em7', 'Dm7=2', 'G7=2', 'C=2', 'C7=2', 'Fmaj7', 'Em7=2', 'Am7=2', 'Dm7', 'G']
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7')]
DEBUG:root:= found, special_note = ['Dm7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7')]
DEBUG:root:= found, special_note = ['G7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7')]
DEBUG:root:= found, special_note = ['C', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C')]
DEBUG:root:= found, special_note = ['C7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C'), (12.352941176470587, 14.117647058823529, 'C7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C'), (12.352941176470587, 14.117647058823529, 'C7'), (14.117647058823529, 17.647058823529413, 'Fmaj7')]
DEBUG:root:= found, special_note = ['Em7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C'), (12.352941176470587, 14.117647058823529, 'C7'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7')]
DEBUG:root:= found, special_note = ['Am7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C'), (12.352941176470587, 14.117647058823529, 'C7'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C'), (12.352941176470587, 14.117647058823529, 'C7'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7'), (21.176470588235293, 24.705882352941174, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 12.352941176470587, 'C'), (12.352941176470587, 14.117647058823529, 'C7'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7'), (21.176470588235293, 24.705882352941174, 'Dm7'), (24.705882352941174, 28.235294117647058, 'G')]
INFO:root:going out, mat_len = 11
DEBUG:root:all_chord = ['0', 'Fmaj7', 'Em7', 'Dm7=2', 'G7=2', 'C', 'Fmaj7', 'Em7=2', 'Am7=2', 'Dm7=2', 'G7=2', 'C', '68bpm', '\u0e16\u0e49\u0e32.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:index = 1
DEBUG:root:index = 7
DEBUG:root:index = 8
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:index = 12
DEBUG:root:bpm = 68
DEBUG:root:list_len = 14
DEBUG:root:all_chord after del = ['0', 'Fmaj7', 'Em7', 'Dm7=2', 'G7=2', 'C', 'Fmaj7', 'Em7=2', 'Am7=2', 'Dm7=2', 'G7=2', 'C']
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7')]
DEBUG:root:= found, special_note = ['Dm7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7')]
DEBUG:root:= found, special_note = ['G7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C'), (14.117647058823529, 17.647058823529413, 'Fmaj7')]
DEBUG:root:= found, special_note = ['Em7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7')]
DEBUG:root:= found, special_note = ['Am7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7')]
DEBUG:root:= found, special_note = ['Dm7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7'), (21.176470588235293, 22.941176470588236, 'Dm7')]
DEBUG:root:= found, special_note = ['G7', '2'], tmp = 0.5, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7'), (21.176470588235293, 22.941176470588236, 'Dm7'), (22.941176470588236, 24.705882352941174, 'G7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'Fmaj7'), (3.5294117647058822, 7.0588235294117645, 'Em7'), (7.0588235294117645, 8.823529411764707, 'Dm7'), (8.823529411764707, 10.588235294117647, 'G7'), (10.588235294117647, 14.117647058823529, 'C'), (14.117647058823529, 17.647058823529413, 'Fmaj7'), (17.647058823529413, 19.41176470588235, 'Em7'), (19.41176470588235, 21.176470588235293, 'Am7'), (21.176470588235293, 22.941176470588236, 'Dm7'), (22.941176470588236, 24.705882352941174, 'G7'), (24.705882352941174, 28.235294117647058, 'C')]
INFO:root:going out, mat_len = 11
DEBUG:root:all_chord = ['0', 'G=0.5', 'Em7=0.5', 'C=0.5', 'D=0.5', '86bpm', '\u0e1b\u0e25\u0e48\u0e2d\u0e22.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:bpm = 86
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['0', 'G=0.5', 'Em7=0.5', 'C=0.5', 'D=0.5']
DEBUG:root:= found, special_note = ['G', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'G')]
DEBUG:root:= found, special_note = ['Em7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'G'), (5.5813953488372094, 11.162790697674419, 'Em7')]
DEBUG:root:= found, special_note = ['C', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'G'), (5.5813953488372094, 11.162790697674419, 'Em7'), (11.162790697674419, 16.74418604651163, 'C')]
DEBUG:root:= found, special_note = ['D', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'G'), (5.5813953488372094, 11.162790697674419, 'Em7'), (11.162790697674419, 16.74418604651163, 'C'), (16.74418604651163, 22.325581395348838, 'D')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['0', 'Gmaj7=0.5', 'Em7=0.5', 'Cmaj7=0.5', 'D=0.5', '86bpm', '\u0e1b\u0e25\u0e48\u0e2d\u0e22.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:bpm = 86
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['0', 'Gmaj7=0.5', 'Em7=0.5', 'Cmaj7=0.5', 'D=0.5']
DEBUG:root:= found, special_note = ['Gmaj7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Gmaj7')]
DEBUG:root:= found, special_note = ['Em7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Gmaj7'), (5.5813953488372094, 11.162790697674419, 'Em7')]
DEBUG:root:= found, special_note = ['Cmaj7', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Gmaj7'), (5.5813953488372094, 11.162790697674419, 'Em7'), (11.162790697674419, 16.74418604651163, 'Cmaj7')]
DEBUG:root:= found, special_note = ['D', '0.5'], tmp = 2.0, ann = [(0.0, 5.5813953488372094, 'Gmaj7'), (5.5813953488372094, 11.162790697674419, 'Em7'), (11.162790697674419, 16.74418604651163, 'Cmaj7'), (16.74418604651163, 22.325581395348838, 'D')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['1', 'A', 'Amaj7', 'D', 'D', '68bpm', '\u0e19\u0e30\u0e2b\u0e19\u0e49\u0e32\u0e18\u0e2d\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 3
DEBUG:root:index = 5
DEBUG:root:bpm = 68
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['1', 'A', 'Amaj7', 'D', 'D']
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7'), (7.0588235294117645, 10.588235294117647, 'D')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7'), (7.0588235294117645, 10.588235294117647, 'D'), (10.588235294117647, 14.117647058823529, 'D')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7'), (7.0588235294117645, 10.588235294117647, 'D'), (10.588235294117647, 14.117647058823529, 'D'), (14.117647058823529, 17.647058823529413, 'A')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7'), (7.0588235294117645, 10.588235294117647, 'D'), (10.588235294117647, 14.117647058823529, 'D'), (14.117647058823529, 17.647058823529413, 'A'), (17.647058823529413, 21.176470588235293, 'Amaj7')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7'), (7.0588235294117645, 10.588235294117647, 'D'), (10.588235294117647, 14.117647058823529, 'D'), (14.117647058823529, 17.647058823529413, 'A'), (17.647058823529413, 21.176470588235293, 'Amaj7'), (21.176470588235293, 24.705882352941174, 'D')]
DEBUG:root:normal length, ann = [(0.0, 3.5294117647058822, 'A'), (3.5294117647058822, 7.0588235294117645, 'Amaj7'), (7.0588235294117645, 10.588235294117647, 'D'), (10.588235294117647, 14.117647058823529, 'D'), (14.117647058823529, 17.647058823529413, 'A'), (17.647058823529413, 21.176470588235293, 'Amaj7'), (21.176470588235293, 24.705882352941174, 'D'), (24.705882352941174, 28.235294117647058, 'D')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['1', 'Cmaj7', 'D7', 'G', 'G', '100bpm', '\u0e2b\u0e21\u0e2d\u0e01\u0e08\u0e32\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 3
DEBUG:root:index = 5
DEBUG:root:bpm = 100
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['1', 'Cmaj7', 'D7', 'G', 'G']
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7'), (4.8, 7.199999999999999, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7'), (4.8, 7.199999999999999, 'G'), (7.199999999999999, 9.6, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7'), (4.8, 7.199999999999999, 'G'), (7.199999999999999, 9.6, 'G'), (9.6, 12.0, 'Cmaj7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7'), (4.8, 7.199999999999999, 'G'), (7.199999999999999, 9.6, 'G'), (9.6, 12.0, 'Cmaj7'), (12.0, 14.399999999999999, 'D7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7'), (4.8, 7.199999999999999, 'G'), (7.199999999999999, 9.6, 'G'), (9.6, 12.0, 'Cmaj7'), (12.0, 14.399999999999999, 'D7'), (14.399999999999999, 16.8, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'Cmaj7'), (2.4, 4.8, 'D7'), (4.8, 7.199999999999999, 'G'), (7.199999999999999, 9.6, 'G'), (9.6, 12.0, 'Cmaj7'), (12.0, 14.399999999999999, 'D7'), (14.399999999999999, 16.8, 'G'), (16.8, 19.2, 'G')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['1', 'D', 'Dmaj7', 'Em7', 'A', '79bpm', '\u0e16\u0e49\u0e32\u0e40\u0e18\u0e2d\u0e23\u0e31\u0e01\u0e09\u0e31\u0e19\u0e08\u0e23\u0e34\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:bpm = 79
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['1', 'D', 'Dmaj7', 'Em7', 'A']
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7'), (6.075949367088608, 9.113924050632912, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7'), (6.075949367088608, 9.113924050632912, 'Em7'), (9.113924050632912, 12.151898734177216, 'A')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7'), (6.075949367088608, 9.113924050632912, 'Em7'), (9.113924050632912, 12.151898734177216, 'A'), (12.151898734177216, 15.18987341772152, 'D')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7'), (6.075949367088608, 9.113924050632912, 'Em7'), (9.113924050632912, 12.151898734177216, 'A'), (12.151898734177216, 15.18987341772152, 'D'), (15.18987341772152, 18.227848101265824, 'Dmaj7')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7'), (6.075949367088608, 9.113924050632912, 'Em7'), (9.113924050632912, 12.151898734177216, 'A'), (12.151898734177216, 15.18987341772152, 'D'), (15.18987341772152, 18.227848101265824, 'Dmaj7'), (18.227848101265824, 21.265822784810126, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 3.037974683544304, 'D'), (3.037974683544304, 6.075949367088608, 'Dmaj7'), (6.075949367088608, 9.113924050632912, 'Em7'), (9.113924050632912, 12.151898734177216, 'A'), (12.151898734177216, 15.18987341772152, 'D'), (15.18987341772152, 18.227848101265824, 'Dmaj7'), (18.227848101265824, 21.265822784810126, 'Em7'), (21.265822784810126, 24.303797468354432, 'A')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['1', 'E', 'A', 'C#m', 'A=2', 'B=2', '73bpm', '\u0e23.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:index = 6
DEBUG:root:bpm = 73
DEBUG:root:list_len = 8
DEBUG:root:all_chord after del = ['1', 'E', 'A', 'C#m', 'A=2', 'B=2']
DEBUG:root:normal length, ann = [(0.0, 3.2876712328767126, 'E')]
DEBUG:root:normal length, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A')]
DEBUG:root:normal length, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m')]
DEBUG:root:= found, special_note = ['A', '2'], tmp = 0.5, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A')]
DEBUG:root:= found, special_note = ['B', '2'], tmp = 0.5, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A'), (11.506849315068495, 13.15068493150685, 'B')]
DEBUG:root:normal length, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A'), (11.506849315068495, 13.15068493150685, 'B'), (13.15068493150685, 16.438356164383563, 'E')]
DEBUG:root:normal length, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A'), (11.506849315068495, 13.15068493150685, 'B'), (13.15068493150685, 16.438356164383563, 'E'), (16.438356164383563, 19.726027397260275, 'A')]
DEBUG:root:normal length, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A'), (11.506849315068495, 13.15068493150685, 'B'), (13.15068493150685, 16.438356164383563, 'E'), (16.438356164383563, 19.726027397260275, 'A'), (19.726027397260275, 23.01369863013699, 'C#m')]
DEBUG:root:= found, special_note = ['A', '2'], tmp = 0.5, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A'), (11.506849315068495, 13.15068493150685, 'B'), (13.15068493150685, 16.438356164383563, 'E'), (16.438356164383563, 19.726027397260275, 'A'), (19.726027397260275, 23.01369863013699, 'C#m'), (23.01369863013699, 24.657534246575345, 'A')]
DEBUG:root:= found, special_note = ['B', '2'], tmp = 0.5, ann = [(0.0, 3.2876712328767126, 'E'), (3.2876712328767126, 6.575342465753425, 'A'), (6.575342465753425, 9.863013698630137, 'C#m'), (9.863013698630137, 11.506849315068495, 'A'), (11.506849315068495, 13.15068493150685, 'B'), (13.15068493150685, 16.438356164383563, 'E'), (16.438356164383563, 19.726027397260275, 'A'), (19.726027397260275, 23.01369863013699, 'C#m'), (23.01369863013699, 24.657534246575345, 'A'), (24.657534246575345, 26.3013698630137, 'B')]
INFO:root:going out, mat_len = 5
DEBUG:root:all_chord = ['1', 'G', 'A', 'F#m7', 'Bm', '110bpm', '\u0e04\u0e38\u0e01\u0e40\u0e02\u0e48\u0e32.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:bpm = 110
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['1', 'G', 'A', 'F#m7', 'Bm']
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G'), (10.90909090909091, 13.090909090909093, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G'), (10.90909090909091, 13.090909090909093, 'A'), (13.090909090909093, 15.272727272727275, 'F#m7')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G'), (10.90909090909091, 13.090909090909093, 'A'), (13.090909090909093, 15.272727272727275, 'F#m7'), (15.272727272727275, 17.454545454545457, 'Bm')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['1', 'G', 'A', 'F#m7', 'Bm', '110bpm', '\u0e04\u0e38\u0e01\u0e40\u0e02\u0e48\u0e32', 'stutter.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:bpm = 110
DEBUG:root:list_len = 8
DEBUG:root:all_chord after del = ['1', 'G', 'A', 'F#m7', 'Bm']
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G'), (10.90909090909091, 13.090909090909093, 'A')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G'), (10.90909090909091, 13.090909090909093, 'A'), (13.090909090909093, 15.272727272727275, 'F#m7')]
DEBUG:root:normal length, ann = [(0.0, 2.181818181818182, 'G'), (2.181818181818182, 4.363636363636364, 'A'), (4.363636363636364, 6.545454545454547, 'F#m7'), (6.545454545454547, 8.727272727272728, 'Bm'), (8.727272727272728, 10.90909090909091, 'G'), (10.90909090909091, 13.090909090909093, 'A'), (13.090909090909093, 15.272727272727275, 'F#m7'), (15.272727272727275, 17.454545454545457, 'Bm')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['1', 'G', 'Em7', 'Cmaj7', 'D', '100bpm', '\u0e2b\u0e21\u0e2d\u0e01\u0e08\u0e32\u0e07.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 5
DEBUG:root:bpm = 100
DEBUG:root:list_len = 7
DEBUG:root:all_chord after del = ['1', 'G', 'Em7', 'Cmaj7', 'D']
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7'), (4.8, 7.199999999999999, 'Cmaj7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7'), (4.8, 7.199999999999999, 'Cmaj7'), (7.199999999999999, 9.6, 'D')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7'), (4.8, 7.199999999999999, 'Cmaj7'), (7.199999999999999, 9.6, 'D'), (9.6, 12.0, 'G')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7'), (4.8, 7.199999999999999, 'Cmaj7'), (7.199999999999999, 9.6, 'D'), (9.6, 12.0, 'G'), (12.0, 14.399999999999999, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7'), (4.8, 7.199999999999999, 'Cmaj7'), (7.199999999999999, 9.6, 'D'), (9.6, 12.0, 'G'), (12.0, 14.399999999999999, 'Em7'), (14.399999999999999, 16.8, 'Cmaj7')]
DEBUG:root:normal length, ann = [(0.0, 2.4, 'G'), (2.4, 4.8, 'Em7'), (4.8, 7.199999999999999, 'Cmaj7'), (7.199999999999999, 9.6, 'D'), (9.6, 12.0, 'G'), (12.0, 14.399999999999999, 'Em7'), (14.399999999999999, 16.8, 'Cmaj7'), (16.8, 19.2, 'D')]
INFO:root:going out, mat_len = 4
DEBUG:root:all_chord = ['2', 'C', 'Am7', 'Dm7', 'G7', 'C', 'Am7', 'Dm7', 'G7', '68bpm', '\u0e16\u0e49\u0e32.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 9
DEBUG:root:bpm = 68
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['2', 'C', 'Am7', 'Dm7', 'G7', 'C', 'Am7', 'Dm7', 'G7']
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7'), (17.647058823529413, 19.41176470588235, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7'), (17.647058823529413, 19.41176470588235, 'Dm7'), (19.41176470588235, 21.176470588235293, 'G7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7'), (17.647058823529413, 19.41176470588235, 'Dm7'), (19.41176470588235, 21.176470588235293, 'G7'), (21.176470588235293, 22.941176470588236, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7'), (17.647058823529413, 19.41176470588235, 'Dm7'), (19.41176470588235, 21.176470588235293, 'G7'), (21.176470588235293, 22.941176470588236, 'C'), (22.941176470588236, 24.705882352941174, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7'), (17.647058823529413, 19.41176470588235, 'Dm7'), (19.41176470588235, 21.176470588235293, 'G7'), (21.176470588235293, 22.941176470588236, 'C'), (22.941176470588236, 24.705882352941174, 'Am7'), (24.705882352941174, 26.470588235294116, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.7647058823529411, 'C'), (1.7647058823529411, 3.5294117647058822, 'Am7'), (3.5294117647058822, 5.294117647058823, 'Dm7'), (5.294117647058823, 7.0588235294117645, 'G7'), (7.0588235294117645, 8.823529411764707, 'C'), (8.823529411764707, 10.588235294117647, 'Am7'), (10.588235294117647, 12.352941176470587, 'Dm7'), (12.352941176470587, 14.117647058823529, 'G7'), (14.117647058823529, 15.882352941176471, 'C'), (15.882352941176471, 17.647058823529413, 'Am7'), (17.647058823529413, 19.41176470588235, 'Dm7'), (19.41176470588235, 21.176470588235293, 'G7'), (21.176470588235293, 22.941176470588236, 'C'), (22.941176470588236, 24.705882352941174, 'Am7'), (24.705882352941174, 26.470588235294116, 'Dm7'), (26.470588235294116, 28.235294117647058, 'G7')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['2', 'C', 'Em7', 'Am7', 'F', 'C', 'C7', 'Fmaj7', 'G', '65bpm', '\u0e17\u0e38\u0e49\u0e21\u0e2d\u0e22\u0e39\u0e48.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 1
DEBUG:root:index = 6
DEBUG:root:index = 7
DEBUG:root:index = 8
DEBUG:root:index = 9
DEBUG:root:bpm = 65
DEBUG:root:list_len = 11
DEBUG:root:all_chord after del = ['2', 'C', 'Em7', 'Am7', 'F', 'C', 'C7', 'Fmaj7', 'G']
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Am7'), (20.30769230769231, 22.153846153846153, 'F')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Am7'), (20.30769230769231, 22.153846153846153, 'F'), (22.153846153846153, 24.0, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Am7'), (20.30769230769231, 22.153846153846153, 'F'), (22.153846153846153, 24.0, 'C'), (24.0, 25.846153846153847, 'C7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Am7'), (20.30769230769231, 22.153846153846153, 'F'), (22.153846153846153, 24.0, 'C'), (24.0, 25.846153846153847, 'C7'), (25.846153846153847, 27.692307692307693, 'Fmaj7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'C'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Am7'), (5.538461538461538, 7.384615384615385, 'F'), (7.384615384615385, 9.230769230769232, 'C'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Fmaj7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'C'), (16.615384615384617, 18.461538461538463, 'Em7'), (18.461538461538463, 20.30769230769231, 'Am7'), (20.30769230769231, 22.153846153846153, 'F'), (22.153846153846153, 24.0, 'C'), (24.0, 25.846153846153847, 'C7'), (25.846153846153847, 27.692307692307693, 'Fmaj7'), (27.692307692307693, 29.53846153846154, 'G')]
INFO:root:going out, mat_len = 8
DEBUG:root:all_chord = ['2', 'Dm7', 'Em7', 'Fmaj7', 'Em7', 'Dm7', 'C7', 'Em7', 'G', 'G', '65bpm', '\u0e17\u0e38\u0e49\u0e21\u0e2d\u0e22\u0e39\u0e48.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 2
DEBUG:root:index = 1
DEBUG:root:index = 6
DEBUG:root:index = 2
DEBUG:root:index = 8
DEBUG:root:index = 8
DEBUG:root:index = 10
DEBUG:root:bpm = 65
DEBUG:root:list_len = 12
DEBUG:root:all_chord after del = ['2', 'Dm7', 'Em7', 'Fmaj7', 'Em7', 'Dm7', 'C7', 'Em7', 'G', 'G']
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Em7'), (12.923076923076923, 14.76923076923077, 'G')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Em7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'G')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Em7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'G'), (16.615384615384617, 18.461538461538463, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Em7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'G'), (16.615384615384617, 18.461538461538463, 'Dm7'), (18.461538461538463, 20.30769230769231, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Em7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'G'), (16.615384615384617, 18.461538461538463, 'Dm7'), (18.461538461538463, 20.30769230769231, 'Em7'), (20.30769230769231, 22.153846153846153, 'Fmaj7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Em7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'G'), (16.615384615384617, 18.461538461538463, 'Dm7'), (18.461538461538463, 20.30769230769231, 'Em7'), (20.30769230769231, 22.153846153846153, 'Fmaj7'), (22.153846153846153, 24.0, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Em7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'G'), (16.615384615384617, 18.461538461538463, 'Dm7'), (18.461538461538463, 20.30769230769231, 'Em7'), (20.30769230769231, 22.153846153846153, 'Fmaj7'), (22.153846153846153, 24.0, 'Em7'), (24.0, 25.846153846153847, 'Dm7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Em7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'G'), (16.615384615384617, 18.461538461538463, 'Dm7'), (18.461538461538463, 20.30769230769231, 'Em7'), (20.30769230769231, 22.153846153846153, 'Fmaj7'), (22.153846153846153, 24.0, 'Em7'), (24.0, 25.846153846153847, 'Dm7'), (25.846153846153847, 27.692307692307693, 'C7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Em7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'G'), (16.615384615384617, 18.461538461538463, 'Dm7'), (18.461538461538463, 20.30769230769231, 'Em7'), (20.30769230769231, 22.153846153846153, 'Fmaj7'), (22.153846153846153, 24.0, 'Em7'), (24.0, 25.846153846153847, 'Dm7'), (25.846153846153847, 27.692307692307693, 'C7'), (27.692307692307693, 29.53846153846154, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Em7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'G'), (16.615384615384617, 18.461538461538463, 'Dm7'), (18.461538461538463, 20.30769230769231, 'Em7'), (20.30769230769231, 22.153846153846153, 'Fmaj7'), (22.153846153846153, 24.0, 'Em7'), (24.0, 25.846153846153847, 'Dm7'), (25.846153846153847, 27.692307692307693, 'C7'), (27.692307692307693, 29.53846153846154, 'Em7'), (29.53846153846154, 31.384615384615387, 'G')]
DEBUG:root:normal length, ann = [(0.0, 1.8461538461538463, 'Dm7'), (1.8461538461538463, 3.6923076923076925, 'Em7'), (3.6923076923076925, 5.538461538461538, 'Fmaj7'), (5.538461538461538, 7.384615384615385, 'Em7'), (7.384615384615385, 9.230769230769232, 'Dm7'), (9.230769230769232, 11.076923076923077, 'C7'), (11.076923076923077, 12.923076923076923, 'Em7'), (12.923076923076923, 14.76923076923077, 'G'), (14.76923076923077, 16.615384615384617, 'G'), (16.615384615384617, 18.461538461538463, 'Dm7'), (18.461538461538463, 20.30769230769231, 'Em7'), (20.30769230769231, 22.153846153846153, 'Fmaj7'), (22.153846153846153, 24.0, 'Em7'), (24.0, 25.846153846153847, 'Dm7'), (25.846153846153847, 27.692307692307693, 'C7'), (27.692307692307693, 29.53846153846154, 'Em7'), (29.53846153846154, 31.384615384615387, 'G'), (31.384615384615387, 33.23076923076923, 'G')]
INFO:root:going out, mat_len = 9
DEBUG:root:all_chord = ['2', 'G', 'D', 'F#', 'Em7', 'D', 'C', 'Bm7', 'Am7', 'D', '76bpm', '\u0e1b\u0e35\u0e19\u0e35\u0e49\u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e40\u0e2b\u0e07\u0e32.wav']
DEBUG:root:index = 0
DEBUG:root:index = 1
DEBUG:root:index = 2
DEBUG:root:index = 3
DEBUG:root:index = 4
DEBUG:root:index = 2
DEBUG:root:index = 6
DEBUG:root:index = 7
DEBUG:root:index = 8
DEBUG:root:index = 2
DEBUG:root:index = 10
DEBUG:root:bpm = 76
DEBUG:root:list_len = 12
DEBUG:root:all_chord after del = ['2', 'G', 'D', 'F#', 'Em7', 'D', 'C', 'Bm7', 'Am7', 'D']
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#'), (18.94736842105263, 20.526315789473685, 'Em7')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#'), (18.94736842105263, 20.526315789473685, 'Em7'), (20.526315789473685, 22.105263157894736, 'D')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#'), (18.94736842105263, 20.526315789473685, 'Em7'), (20.526315789473685, 22.105263157894736, 'D'), (22.105263157894736, 23.68421052631579, 'C')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#'), (18.94736842105263, 20.526315789473685, 'Em7'), (20.526315789473685, 22.105263157894736, 'D'), (22.105263157894736, 23.68421052631579, 'C'), (23.68421052631579, 25.263157894736842, 'Bm7')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#'), (18.94736842105263, 20.526315789473685, 'Em7'), (20.526315789473685, 22.105263157894736, 'D'), (22.105263157894736, 23.68421052631579, 'C'), (23.68421052631579, 25.263157894736842, 'Bm7'), (25.263157894736842, 26.842105263157894, 'Am7')]
DEBUG:root:normal length, ann = [(0.0, 1.5789473684210527, 'G'), (1.5789473684210527, 3.1578947368421053, 'D'), (3.1578947368421053, 4.7368421052631575, 'F#'), (4.7368421052631575, 6.315789473684211, 'Em7'), (6.315789473684211, 7.894736842105264, 'D'), (7.894736842105264, 9.473684210526315, 'C'), (9.473684210526315, 11.052631578947368, 'Bm7'), (11.052631578947368, 12.631578947368421, 'Am7'), (12.631578947368421, 14.210526315789474, 'D'), (14.210526315789474, 15.789473684210527, 'G'), (15.789473684210527, 17.36842105263158, 'D'), (17.36842105263158, 18.94736842105263, 'F#'), (18.94736842105263, 20.526315789473685, 'Em7'), (20.526315789473685, 22.105263157894736, 'D'), (22.105263157894736, 23.68421052631579, 'C'), (23.68421052631579, 25.263157894736842, 'Bm7'), (25.263157894736842, 26.842105263157894, 'Am7'), (26.842105263157894, 28.42105263157895, 'D')]
INFO:root:going out, mat_len = 9
